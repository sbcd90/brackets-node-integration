
// ---- _global_ --------------------------------------------------------------------------


// ---- sap --------------------------------------------------------------------------


// ---- sap.viz --------------------------------------------------------------------------


// ---- sap.viz.ui5 --------------------------------------------------------------------------


// ---- sap.viz.ui5.Area --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Area.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Area#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Area
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Area = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyBackground = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyGeneral = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyInteraction = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyLegend = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyTitle = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyToolTip = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyXAxis = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.destroyYAxis = function() { return new sap.viz.ui5.Area(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Area</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Area</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Area</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Area with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Area.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * @return {sap.viz.ui5.types.Area}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Area}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Area(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Area(); };


// ---- sap.viz.ui5.Area100 --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Area100.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Area100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Area100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Area100 = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area100.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area100.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area100.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area100.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Area100.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyBackground = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyGeneral = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyInteraction = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyLegend = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyTitle = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyToolTip = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyXAxis = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.destroyYAxis = function() { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Area100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Area100.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area100.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area100.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area100.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area100.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Area100.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * @return {sap.viz.ui5.types.Area}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Area}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Area100(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Area100.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Area100(); };


// ---- sap.viz.ui5.Bar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Bar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Bar#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Bar
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Bar = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bar.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bar.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bar.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bar.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bar.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyBackground = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyGeneral = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyInteraction = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyLegend = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyTitle = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyToolTip = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyXAxis = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.destroyYAxis = function() { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Bar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bar.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bar.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bar.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bar.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bar.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bar
 * @return {sap.viz.ui5.types.Bar}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Bar}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Bar(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bar.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Bar(); };


// ---- sap.viz.ui5.Bubble --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Bubble.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getSizeLegend sizeLegend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bubble</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Bubble#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Bubble
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Bubble = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bubble.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bubble.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bubble.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bubble.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Bubble.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyBackground = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyGeneral = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyInteraction = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyLegend = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the sizeLegend in the aggregation 
 * named <code>sizeLegend</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroySizeLegend = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyTitle = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyToolTip = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyXAxis = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.destroyYAxis = function() { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Bubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Bubble.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bubble.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bubble.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bubble.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bubble.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Bubble.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bubble
 * @return {sap.viz.ui5.types.Bubble}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Getter for aggregation <code>sizeLegend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getSizeLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Bubble}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>sizeLegend</code>.
 * @param oSizeLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setSizeLegend = function(oSizeLegend) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Bubble.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Bubble(); };


// ---- sap.viz.ui5.Column --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Column.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.VerticalBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Column#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Column
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Column = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Column.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Column.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Column.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Column.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Column.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyBackground = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyGeneral = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyInteraction = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyLegend = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyTitle = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyToolTip = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyXAxis = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.destroyYAxis = function() { return new sap.viz.ui5.Column(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Column</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Column</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Column</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Column.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Column.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Column.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Column.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Column.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Column.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.verticalbar
 * @return {sap.viz.ui5.types.VerticalBar}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getPlotArea = function() { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.VerticalBar}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Column(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Column.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Column(); };


// ---- sap.viz.ui5.Combination --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Combination.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Combination</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Combination#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Combination
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Combination = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Combination.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Combination.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Combination.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Combination.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Combination.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyBackground = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyGeneral = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyInteraction = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyLegend = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyTitle = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyToolTip = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyXAxis = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.destroyYAxis = function() { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Combination with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Combination.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Combination.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Combination.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Combination.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Combination.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Combination.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.combination
 * @return {sap.viz.ui5.types.Combination}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Combination}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Combination(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Combination.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Combination(); };


// ---- sap.viz.ui5.core --------------------------------------------------------------------------


// ---- sap.viz.ui5.core.BaseChart --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/core/BaseChart.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '640px')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '480px')</li>
 * <li>{@link #getCss css} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDataset dataset} : sap.viz.ui5.data.Dataset</li>
 * <li>{@link #getNoData noData} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.core.BaseChart#event:beforeCreateViz beforeCreateViz} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * An abstract base class for all VIZ charts
 * @extends sap.ui.core.Control
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.core.BaseChart = function(sId,mSettings) {};
/**
 * 
 * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value for the parameter with the same name of the createViz call. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.usrOptions Value for the parameter with the same name of the createViz call.
 * @public
 */
sap.viz.ui5.core.BaseChart.prototype.beforeCreateViz = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'beforeCreateViz' event of this <code>sap.viz.ui5.core.BaseChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.core.BaseChart</code>.<br/> itself. 
 * </p><p>
 * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value for the parameter with the same name of the createViz call. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.core.BaseChart</code>.<br/> itself.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.attachBeforeCreateViz = function(oData,fnFunction,oListener) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Destroys the dataset in the aggregation 
 * named <code>dataset</code>.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.destroyDataset = function() { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Destroys the noData in the aggregation 
 * named <code>noData</code>.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.destroyNoData = function() { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'beforeCreateViz' event of this <code>sap.viz.ui5.core.BaseChart</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.detachBeforeCreateViz = function(fnFunction,oListener) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.core.BaseChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.core.BaseChart.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event beforeCreateViz to attached listeners.
 * </p><p>
 * Expects following event parameters:
 * <ul>
 * <li>'usrOptions' of type <code>object</code> Value for the parameter with the same name of the createViz call.</li>
 * </ul>
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.fireBeforeCreateViz = function(mArguments) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Getter for property <code>css</code>.
 * CSS style of Chart.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>css</code>
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.getCss = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>dataset</code>.<br/>
 * Dataset for this chart
 * @return {sap.viz.ui5.data.Dataset}
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.getDataset = function() { return new sap.viz.ui5.data.Dataset(); };

/**
 * 
 * Getter for property <code>height</code>.
 * Height of the Chart as a CSS size.
 * </p><p>
 * Default value is <code>480px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Getter for aggregation <code>noData</code>.<br/>
 * Control tree to display when there is no data available
 * @return {sap.ui.core.Control}
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.getNoData = function() { return new sap.ui.core.Control(); };

/**
 * 
 * Getter for property <code>width</code>.
 * Width of the Chart as a CSS size.
 * </p><p>
 * Default value is <code>640px</code>
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * 
 * Get/Set selected data points
 * To get selection, please use selection() or selection(object) 
 * To set selection, please use selection(object[]) or selection(object[], object) 
 * @param {object[]} [aPoints]
 *       Points. Each point is
 *       {
 *           data: {key: "value", ...},//optional
 *           ctx:  [{mi: 0, ...}, {...}, ...], // optional. Higher priority than data. 
 *       }
 *       Either data or ctx should be set.
 * @param {object} oAction
 *       {
 *           clearSelection: Boolean,// optional . Default value is false. Useful only in setting selection.
 *           withDataCtx: Boolean, // optional. Default value is false. Useful only in getting selection.
 *           withInfo: Boolean // optional. Default value is false. Useful only in getting selection.
 *       }
 * @returns {object[]}
 *          Points. Each point is
 *          {
 *             data: {key: "value", ...},
 *             ctx:  [{mi: 0, ...}, {...}, ...], // optional. Depends on “withDataCtx”.
 *             info: [{obj}, null, ... } // optional. Depends on “withInfo”.
 *          }
 * @public
 */
sap.viz.ui5.core.BaseChart.prototype.selection = function(aPoints,oAction) { return new Array(); };

/**
 * 
 * Setter for property <code>css</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sCss  new value for property <code>css</code>
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.setCss = function(sCss) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Setter for the aggregated <code>dataset</code>.
 * @param oDataset {sap.viz.ui5.data.Dataset}
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.setDataset = function(oDataset) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Set chart's default selection.
 * @param {object[]} Array of default selection info 
 * @public
 */
sap.viz.ui5.core.BaseChart.prototype.setDefaultSelection = function(Array) { return null; };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is <code>480px</code> 
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.setHeight = function(sHeight) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Setter for the aggregated <code>noData</code>.
 * @param oNoData {sap.ui.core.Control}
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.setNoData = function(oNoData) { return new sap.viz.ui5.core.BaseChart(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>640px</code> 
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.core.BaseChart.prototype.setWidth = function(sWidth) { return new sap.viz.ui5.core.BaseChart(); };


// ---- sap.viz.ui5.core.BaseStructuredType --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/core/BaseStructuredType.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Abstract base class for all elements that represent VIZ modules or complex property types
 * @extends sap.ui.core.Element
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.core.BaseStructuredType = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.core.BaseStructuredType with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.core.BaseStructuredType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };


// ---- sap.viz.ui5.data --------------------------------------------------------------------------


// ---- sap.viz.ui5.data.Dataset --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/data/Dataset.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Abstract Dataset implementation
 * @extends sap.ui.core.Element
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.data.Dataset = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.data.Dataset with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.data.Dataset.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };


// ---- sap.viz.ui5.data.DimensionDefinition --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/data/DimensionDefinition.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAxis axis} : int</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Definition of a single dimension in a dataset
 * @extends sap.ui.core.Element
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.data.DimensionDefinition = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.data.DimensionDefinition with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.data.DimensionDefinition.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>axis</code>.
 * Number of axis this dimension belongs to. Currently must be 1 or 2.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>axis</code>
 * @public
 * 
 */
sap.viz.ui5.data.DimensionDefinition.prototype.getAxis = function() { return 0; };

/**
 * 
 * Getter for property <code>name</code>.
 * Name of the dimension as displayed in the chart
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.viz.ui5.data.DimensionDefinition.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for property <code>value</code>.
 * Value for the dimension. Usually bound to some model field.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {any} the value of property <code>value</code>
 * @public
 * 
 */
sap.viz.ui5.data.DimensionDefinition.prototype.getValue = function() { return null; };

/**
 * 
 * Setter for property <code>axis</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iAxis  new value for property <code>axis</code>
 * @return {sap.viz.ui5.data.DimensionDefinition} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.DimensionDefinition.prototype.setAxis = function(iAxis) { return new sap.viz.ui5.data.DimensionDefinition(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.viz.ui5.data.DimensionDefinition} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.DimensionDefinition.prototype.setName = function(sName) { return new sap.viz.ui5.data.DimensionDefinition(); };

/**
 * 
 * Setter for property <code>value</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.viz.ui5.data.DimensionDefinition} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.DimensionDefinition.prototype.setValue = function(oValue) { return new sap.viz.ui5.data.DimensionDefinition(); };


// ---- sap.viz.ui5.data.FlattenedDataset --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/data/FlattenedDataset.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDimensions dimensions} : sap.viz.ui5.data.DimensionDefinition[]</li>
 * <li>{@link #getMeasures measures} : sap.viz.ui5.data.MeasureDefinition[]</li>
 * <li>{@link #getData data} : sap.ui.core.Element[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.data.Dataset#constructor sap.viz.ui5.data.Dataset}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * A dataset for flattened (redundant) data using a tabular format.
 * @extends sap.viz.ui5.data.Dataset
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.data.FlattenedDataset = function(sId,mSettings) {};
/**
 * 
 * Adds some data <code>oData</code> 
 * to the aggregation named <code>data</code>.
 * @param {sap.ui.core.Element}
 *            oData the data to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.addData = function(oData) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Adds some dimension <code>oDimension</code> 
 * to the aggregation named <code>dimensions</code>.
 * @param {sap.viz.ui5.data.DimensionDefinition}
 *            oDimension the dimension to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.addDimension = function(oDimension) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Adds some measure <code>oMeasure</code> 
 * to the aggregation named <code>measures</code>.
 * @param {sap.viz.ui5.data.MeasureDefinition}
 *            oMeasure the measure to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.addMeasure = function(oMeasure) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Binder for aggregation <code>data</code>.
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.bindData = function(sPath,oTemplate,oSorter,aFilters) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Destroys all the data in the aggregation 
 * named <code>data</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.destroyData = function() { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Destroys all the dimensions in the aggregation 
 * named <code>dimensions</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.destroyDimensions = function() { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Destroys all the measures in the aggregation 
 * named <code>measures</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.destroyMeasures = function() { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.data.FlattenedDataset with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.data.FlattenedDataset.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>data</code>.<br/>
 * Data containing dimensions and measures.
 * </p><p>
 * <b>Note:</b> This aggregation can only be bound against a model, it cannot be managed
 * programmatically using the aggregation mutator methods like addData.
 * @return {sap.ui.core.Element[]}
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.getData = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>dimensions</code>.<br/>
 * List of definitions of all dimensions in this dataset
 * @return {sap.viz.ui5.data.DimensionDefinition[]}
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.getDimensions = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>measures</code>.<br/>
 * list of definitions of all measures in this dataset
 * @return {sap.viz.ui5.data.MeasureDefinition[]}
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.getMeasures = function() { return new Array(); };

/**
 * 
 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation named <code>data</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Element}
 *            oData the data whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.indexOfData = function(oData) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.viz.ui5.data.DimensionDefinition</code> in the aggregation named <code>dimensions</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.viz.ui5.data.DimensionDefinition}
 *            oDimension the dimension whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.indexOfDimension = function(oDimension) { return 0; };

/**
 * 
 * Checks for the provided <code>sap.viz.ui5.data.MeasureDefinition</code> in the aggregation named <code>measures</code> 
 * and returns its index if found or -1 otherwise.
 * @param {sap.viz.ui5.data.MeasureDefinition}
 *            oMeasure the measure whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.indexOfMeasure = function(oMeasure) { return 0; };

/**
 * 
 * Inserts a data into the aggregation named <code>data</code>.
 * @param {sap.ui.core.Element}
 *          oData the data to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the data should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the data is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the data is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.insertData = function(oData,iIndex) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Inserts a dimension into the aggregation named <code>dimensions</code>.
 * @param {sap.viz.ui5.data.DimensionDefinition}
 *          oDimension the dimension to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the dimension should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the dimension is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the dimension is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.insertDimension = function(oDimension,iIndex) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Inserts a measure into the aggregation named <code>measures</code>.
 * @param {sap.viz.ui5.data.MeasureDefinition}
 *          oMeasure the measure to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the measure should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the measure is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the measure is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.insertMeasure = function(oMeasure,iIndex) { return new sap.viz.ui5.data.FlattenedDataset(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>data</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Element[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.removeAllData = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>dimensions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.data.DimensionDefinition[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.removeAllDimensions = function() { return new Array(); };

/**
 * 
 * Removes all the controls in the aggregation named <code>measures</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.data.MeasureDefinition[]} an array of the removed elements (might be empty)
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.removeAllMeasures = function() { return new Array(); };

/**
 * 
 * Removes an data from the aggregation named <code>data</code>.
 * @param {int | string | sap.ui.core.Element} vData the data to remove or its index or id
 * @return {sap.ui.core.Element} the removed data or null
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.removeData = function(vData) { return new sap.ui.core.Element(); };

/**
 * 
 * Removes an dimension from the aggregation named <code>dimensions</code>.
 * @param {int | string | sap.viz.ui5.data.DimensionDefinition} vDimension the dimension to remove or its index or id
 * @return {sap.viz.ui5.data.DimensionDefinition} the removed dimension or null
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.removeDimension = function(vDimension) { return new sap.viz.ui5.data.DimensionDefinition(); };

/**
 * 
 * Removes an measure from the aggregation named <code>measures</code>.
 * @param {int | string | sap.viz.ui5.data.MeasureDefinition} vMeasure the measure to remove or its index or id
 * @return {sap.viz.ui5.data.MeasureDefinition} the removed measure or null
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.removeMeasure = function(vMeasure) { return new sap.viz.ui5.data.MeasureDefinition(); };

/**
 * 
 * Set chart's default selection.
 * @param {object[]} Array of default selection info 
 * @public
 */
sap.viz.ui5.data.FlattenedDataset.prototype.setDefaultSelection = function(Array) { return null; };

/**
 * 
 * Unbinder for aggregation <code>data</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.FlattenedDataset.prototype.unbindData = function() { return new sap.viz.ui5.data.FlattenedDataset(); };


// ---- sap.viz.ui5.data.MeasureDefinition --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/data/MeasureDefinition.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getGroup group} : int (default: 1)</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Definition of a single Measure
 * @extends sap.ui.core.Element
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.data.MeasureDefinition = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.data.MeasureDefinition with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.data.MeasureDefinition.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>group</code>.
 * Measure group this measure belongs to. Order is significant, number should start from 1.
 * </p><p>
 * Default value is <code>1</code>
 * @return {int} the value of property <code>group</code>
 * @public
 * 
 */
sap.viz.ui5.data.MeasureDefinition.prototype.getGroup = function() { return 0; };

/**
 * 
 * Getter for property <code>name</code>.
 * Name of the measure as displayed in the chart
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.viz.ui5.data.MeasureDefinition.prototype.getName = function() { return ""; };

/**
 * 
 * Getter for property <code>value</code>.
 * Value for the measure. Usually bound to some model field.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {any} the value of property <code>value</code>
 * @public
 * 
 */
sap.viz.ui5.data.MeasureDefinition.prototype.getValue = function() { return null; };

/**
 * 
 * Setter for property <code>group</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {int} iGroup  new value for property <code>group</code>
 * @return {sap.viz.ui5.data.MeasureDefinition} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.MeasureDefinition.prototype.setGroup = function(iGroup) { return new sap.viz.ui5.data.MeasureDefinition(); };

/**
 * 
 * Setter for property <code>name</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.viz.ui5.data.MeasureDefinition} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.MeasureDefinition.prototype.setName = function(sName) { return new sap.viz.ui5.data.MeasureDefinition(); };

/**
 * 
 * Setter for property <code>value</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.viz.ui5.data.MeasureDefinition} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.data.MeasureDefinition.prototype.setValue = function(oValue) { return new sap.viz.ui5.data.MeasureDefinition(); };


// ---- sap.viz.ui5.Donut --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Donut.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Pie</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getDataTransform dataTransform} : sap.viz.ui5.types.Datatransform</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Donut#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Donut
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Donut = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Donut.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Donut.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Donut.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Donut.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Donut.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the dataTransform in the aggregation 
 * named <code>dataTransform</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyDataTransform = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyGeneral = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyInteraction = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyLegend = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyTitle = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Donut with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Donut.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Donut.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Donut.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Donut.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Donut.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Donut.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>dataTransform</code>.<br/>
 * Module sap.viz.modules.datatransform
 * @return {sap.viz.ui5.types.Datatransform}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getDataTransform = function() { return new sap.viz.ui5.types.Datatransform(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.pie
 * @return {sap.viz.ui5.types.Pie}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>dataTransform</code>.
 * @param oDataTransform {sap.viz.ui5.types.Datatransform}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setDataTransform = function(oDataTransform) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Pie}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Donut(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Donut.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Donut(); };


// ---- sap.viz.ui5.DualBar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/DualBar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bar</li>
 * <li>{@link #getXAxis2 xAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualBar#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/DualBar
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.DualBar = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualBar.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualBar.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualBar.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualBar.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualBar.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyBackground = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyDataLabel = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyGeneral = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyInteraction = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyLegend = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyPlotArea = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyTitle = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyToolTip = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyXAxis = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the xAxis2 in the aggregation 
 * named <code>xAxis2</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyXAxis2 = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyXyContainer = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.destroyYAxis = function() { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.DualBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.DualBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualBar.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualBar.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualBar.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualBar.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualBar.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bar
 * @return {sap.viz.ui5.types.Bar}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getXAxis2 = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Bar}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>xAxis2</code>.
 * @param oXAxis2 {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setXAxis2 = function(oXAxis2) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.DualBar(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualBar.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.DualBar(); };


// ---- sap.viz.ui5.DualColumn --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/DualColumn.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.VerticalBar</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualColumn#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/DualColumn
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.DualColumn = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualColumn.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualColumn.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualColumn.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualColumn.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualColumn.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyBackground = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyDataLabel = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyGeneral = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyInteraction = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyLegend = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyPlotArea = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyTitle = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyToolTip = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyXAxis = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyYAxis = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.destroyYAxis2 = function() { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.DualColumn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.DualColumn.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualColumn.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualColumn.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualColumn.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualColumn.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualColumn.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.verticalbar
 * @return {sap.viz.ui5.types.VerticalBar}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getPlotArea = function() { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.getYAxis2 = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.VerticalBar}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.DualColumn(); };

/**
 * 
 * Setter for the aggregated <code>yAxis2</code>.
 * @param oYAxis2 {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualColumn.prototype.setYAxis2 = function(oYAxis2) { return new sap.viz.ui5.DualColumn(); };


// ---- sap.viz.ui5.DualCombination --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/DualCombination.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Combination</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualCombination#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/DualCombination
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.DualCombination = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualCombination.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualCombination.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualCombination.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualCombination.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualCombination.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyBackground = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyDataLabel = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyGeneral = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyInteraction = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyLegend = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyPlotArea = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyTitle = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyToolTip = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyXAxis = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyYAxis = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.destroyYAxis2 = function() { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.DualCombination with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.DualCombination.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualCombination.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualCombination.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualCombination.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualCombination.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualCombination.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.combination
 * @return {sap.viz.ui5.types.Combination}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.getYAxis2 = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Combination}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.DualCombination(); };

/**
 * 
 * Setter for the aggregated <code>yAxis2</code>.
 * @param oYAxis2 {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualCombination.prototype.setYAxis2 = function(oYAxis2) { return new sap.viz.ui5.DualCombination(); };


// ---- sap.viz.ui5.DualLine --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/DualLine.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Line</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualLine#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/DualLine
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.DualLine = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualLine.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualLine.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualLine.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualLine.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualLine.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyBackground = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyDataLabel = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyGeneral = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyInteraction = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyLegend = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyPlotArea = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyTitle = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyToolTip = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyXAxis = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyYAxis = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.destroyYAxis2 = function() { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.DualLine with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.DualLine.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualLine.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualLine.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualLine.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualLine.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualLine.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.line
 * @return {sap.viz.ui5.types.Line}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.getYAxis2 = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Line}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.DualLine(); };

/**
 * 
 * Setter for the aggregated <code>yAxis2</code>.
 * @param oYAxis2 {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualLine.prototype.setYAxis2 = function(oYAxis2) { return new sap.viz.ui5.DualLine(); };


// ---- sap.viz.ui5.DualStackedColumn --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/DualStackedColumn.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/DualStackedColumn
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.DualStackedColumn = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyBackground = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyDataLabel = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyGeneral = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyInteraction = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyLegend = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyPlotArea = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyTitle = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyToolTip = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyXAxis = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyYAxis = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.destroyYAxis2 = function() { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.DualStackedColumn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.DualStackedColumn.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getPlotArea = function() { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.getYAxis2 = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.StackedVerticalBar}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.DualStackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>yAxis2</code>.
 * @param oYAxis2 {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn.prototype.setYAxis2 = function(oYAxis2) { return new sap.viz.ui5.DualStackedColumn(); };


// ---- sap.viz.ui5.DualStackedColumn100 --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/DualStackedColumn100.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/DualStackedColumn100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.DualStackedColumn100 = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn100.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn100.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn100.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn100.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.DualStackedColumn100.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyBackground = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyDataLabel = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyGeneral = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyInteraction = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyLegend = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyPlotArea = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyTitle = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyToolTip = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyXAxis = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyYAxis = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.destroyYAxis2 = function() { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.DualStackedColumn100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.DualStackedColumn100.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getPlotArea = function() { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.getYAxis2 = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.StackedVerticalBar}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.DualStackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>yAxis2</code>.
 * @param oYAxis2 {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.DualStackedColumn100.prototype.setYAxis2 = function(oYAxis2) { return new sap.viz.ui5.DualStackedColumn100(); };


// ---- sap.viz.ui5.Heatmap --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Heatmap.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Heatmap</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Heatmap#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Heatmap
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Heatmap = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Heatmap.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Heatmap.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Heatmap.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Heatmap.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Heatmap.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyGeneral = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyInteraction = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyLegend = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyTitle = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyToolTip = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyXAxis = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.destroyYAxis = function() { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Heatmap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Heatmap.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Heatmap.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Heatmap.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Heatmap.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Heatmap.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Heatmap.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.heatmap
 * @return {sap.viz.ui5.types.Heatmap}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Heatmap}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Heatmap.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Heatmap(); };


// ---- sap.viz.ui5.HorizontalArea --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/HorizontalArea.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/HorizontalArea
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.HorizontalArea = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyBackground = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyDataLabel = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyGeneral = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyInteraction = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyLegend = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyPlotArea = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyTitle = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyToolTip = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyXAxis = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyXyContainer = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.destroyYAxis = function() { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.HorizontalArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.HorizontalArea.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * @return {sap.viz.ui5.types.Area}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Area}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.HorizontalArea(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.HorizontalArea(); };


// ---- sap.viz.ui5.HorizontalArea100 --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/HorizontalArea100.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/HorizontalArea100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.HorizontalArea100 = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea100.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea100.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea100.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea100.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.HorizontalArea100.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyBackground = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyDataLabel = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyGeneral = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyInteraction = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyLegend = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyPlotArea = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyTitle = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyToolTip = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyXAxis = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyXyContainer = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.destroyYAxis = function() { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.HorizontalArea100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.HorizontalArea100.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * @return {sap.viz.ui5.types.Area}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Area}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.HorizontalArea100(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.HorizontalArea100.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.HorizontalArea100(); };


// ---- sap.viz.ui5.Line --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Line.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Line</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Line#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Line
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Line = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Line.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Line.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Line.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Line.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Line.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyBackground = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyGeneral = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyInteraction = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyLegend = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyTitle = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyToolTip = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyXAxis = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.destroyYAxis = function() { return new sap.viz.ui5.Line(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Line</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Line</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Line</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Line with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Line.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Line.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Line.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Line.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Line.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Line.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.line
 * @return {sap.viz.ui5.types.Line}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Line}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Line(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Line.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Line(); };


// ---- sap.viz.ui5.Pie --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Pie.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Pie</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getDataTransform dataTransform} : sap.viz.ui5.types.Datatransform</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Pie#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Pie
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Pie = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Pie.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Pie.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Pie.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Pie.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Pie.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the dataTransform in the aggregation 
 * named <code>dataTransform</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyDataTransform = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyGeneral = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyInteraction = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyLegend = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyTitle = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Pie with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Pie.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Pie.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Pie.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Pie.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Pie.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Pie.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>dataTransform</code>.<br/>
 * Module sap.viz.modules.datatransform
 * @return {sap.viz.ui5.types.Datatransform}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getDataTransform = function() { return new sap.viz.ui5.types.Datatransform(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.pie
 * @return {sap.viz.ui5.types.Pie}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>dataTransform</code>.
 * @param oDataTransform {sap.viz.ui5.types.Datatransform}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setDataTransform = function(oDataTransform) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Pie}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Pie(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Pie.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Pie(); };


// ---- sap.viz.ui5.Scatter --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Scatter.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Scatter</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getDataTransform dataTransform} : sap.viz.ui5.types.Datatransform</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Scatter#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Scatter
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Scatter = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Scatter.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Scatter.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Scatter.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Scatter.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Scatter.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyBackground = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the dataTransform in the aggregation 
 * named <code>dataTransform</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyDataTransform = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyGeneral = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyInteraction = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyLegend = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyTitle = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyToolTip = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyXAxis = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.destroyYAxis = function() { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Scatter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Scatter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Scatter.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Scatter.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Scatter.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Scatter.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Scatter.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>dataTransform</code>.<br/>
 * Module sap.viz.modules.datatransform
 * @return {sap.viz.ui5.types.Datatransform}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getDataTransform = function() { return new sap.viz.ui5.types.Datatransform(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.scatter
 * @return {sap.viz.ui5.types.Scatter}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>dataTransform</code>.
 * @param oDataTransform {sap.viz.ui5.types.Datatransform}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setDataTransform = function(oDataTransform) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Scatter}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Scatter.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.Scatter(); };


// ---- sap.viz.ui5.StackedColumn --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/StackedColumn.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.StackedColumn#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/StackedColumn
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.StackedColumn = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyBackground = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyDataLabel = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyGeneral = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyInteraction = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyLegend = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyPlotArea = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyTitle = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyToolTip = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyXAxis = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.destroyYAxis = function() { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.StackedColumn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.StackedColumn.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getPlotArea = function() { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.StackedVerticalBar}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.StackedColumn(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.StackedColumn(); };


// ---- sap.viz.ui5.StackedColumn100 --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/StackedColumn100.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/StackedColumn100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.StackedColumn100 = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn100.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn100.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn100.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn100.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.StackedColumn100.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyBackground = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyDataLabel = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyGeneral = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyInteraction = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyLegend = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyPlotArea = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyTitle = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyToolTip = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyXAxis = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.destroyYAxis = function() { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.StackedColumn100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.StackedColumn100.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * @return {sap.viz.ui5.types.Background}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getBackground = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getPlotArea = function() { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getXAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.getYAxis = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>background</code>.
 * @param oBackground {sap.viz.ui5.types.Background}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setBackground = function(oBackground) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.StackedVerticalBar}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>xAxis</code>.
 * @param oXAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setXAxis = function(oXAxis) { return new sap.viz.ui5.StackedColumn100(); };

/**
 * 
 * Setter for the aggregated <code>yAxis</code>.
 * @param oYAxis {sap.viz.ui5.types.Axis}
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.StackedColumn100.prototype.setYAxis = function(oYAxis) { return new sap.viz.ui5.StackedColumn100(); };


// ---- sap.viz.ui5.Treemap --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/Treemap.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Treemap</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Treemap#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Chart ui5/Treemap
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.Treemap = function(sId,mSettings) {};
/**
 * 
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Treemap.prototype.deselectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Treemap.prototype.hideTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Treemap.prototype.initialized = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Treemap.prototype.selectData = function(oControlEvent) { return null; };

/**
 * 
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
sap.viz.ui5.Treemap.prototype.showTooltip = function(oControlEvent) { return null; };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.attachDeselectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover out of the specific part of chart, no data is passed. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.attachHideTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 * </p><p>
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document. 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 * </p><p>
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.attachSelectData = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 * </p><p>
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}} 
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.attachShowTooltip = function(oData,fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyDataLabel = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyGeneral = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyInteraction = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyLegend = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyLegendGroup = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyPlotArea = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyTitle = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyToolTip = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.destroyXyContainer = function() { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.detachDeselectData = function(fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.detachHideTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.detachSelectData = function(fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 * </p><p>
 * The passed function and listener object must match the ones used for event registration.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.detachShowTooltip = function(fnFunction,oListener) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.Treemap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.Treemap.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Fire event deselectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Treemap.prototype.fireDeselectData = function(mArguments) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Fire event hideTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Treemap.prototype.fireHideTooltip = function(mArguments) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Fire event initialized to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Treemap.prototype.fireInitialized = function(mArguments) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Fire event selectData to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Treemap.prototype.fireSelectData = function(mArguments) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Fire event showTooltip to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.viz.ui5.Treemap.prototype.fireShowTooltip = function(mArguments) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getDataLabel = function() { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getGeneral = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getInteraction = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getLegend = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getLegendGroup = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.treemap
 * @return {sap.viz.ui5.types.Treemap}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getPlotArea = function() { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * @return {sap.viz.ui5.types.Title}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getTitle = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.modules.tooltip
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getToolTip = function() { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.getXyContainer = function() { return new sap.viz.ui5.types.XYContainer(); };

/**
 * 
 * Setter for the aggregated <code>dataLabel</code>.
 * @param oDataLabel {sap.viz.ui5.types.Datalabel}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setDataLabel = function(oDataLabel) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>general</code>.
 * @param oGeneral {sap.viz.ui5.types.RootContainer}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setGeneral = function(oGeneral) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>interaction</code>.
 * @param oInteraction {sap.viz.ui5.types.controller.Interaction}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setInteraction = function(oInteraction) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>legend</code>.
 * @param oLegend {sap.viz.ui5.types.legend.Common}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setLegend = function(oLegend) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>legendGroup</code>.
 * @param oLegendGroup {sap.viz.ui5.types.Legend}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setLegendGroup = function(oLegendGroup) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>plotArea</code>.
 * @param oPlotArea {sap.viz.ui5.types.Treemap}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setPlotArea = function(oPlotArea) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Title}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Tooltip}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>xyContainer</code>.
 * @param oXyContainer {sap.viz.ui5.types.XYContainer}
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.Treemap.prototype.setXyContainer = function(oXyContainer) { return new sap.viz.ui5.Treemap(); };


// ---- sap.viz.ui5.types --------------------------------------------------------------------------


// ---- sap.viz.ui5.types.Area --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Area.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Area_drawingEffect (default: sap.viz.ui5.types.Area_drawingEffect.normal)</li>
 * <li>{@link #getMode mode} : sap.viz.ui5.types.Area_mode (default: sap.viz.ui5.types.Area_mode.comparison)</li>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Area_orientation (default: sap.viz.ui5.types.Area_orientation.vertical)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Area_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Area_animation</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Area_hoverline</li>
 * <li>{@link #getMarker marker} : sap.viz.ui5.types.Area_marker</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Area = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.destroyHoverline = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Destroys the marker in the aggregation 
 * named <code>marker</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.destroyMarker = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Area with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Area.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.Area_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.getAnimation = function() { return new sap.viz.ui5.types.Area_animation(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of plotArea.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Area_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Area_drawingEffect(); };

/**
 * 
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for hoverline properties.
 * @return {sap.viz.ui5.types.Area_hoverline}
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.getHoverline = function() { return new sap.viz.ui5.types.Area_hoverline(); };

/**
 * 
 * Getter for aggregation <code>marker</code>.<br/>
 * Settings for marker/data point graphics
 * @return {sap.viz.ui5.types.Area_marker}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.getMarker = function() { return new sap.viz.ui5.types.Area_marker(); };

/**
 * 
 * Getter for property <code>mode</code>.
 * Set dispaly mode of area chart.
 * </p><p>
 * Default value is <code>comparison</code>
 * @return {sap.viz.ui5.types.Area_mode} the value of property <code>mode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.getMode = function() { return new sap.viz.ui5.types.Area_mode(); };

/**
 * 
 * Getter for property <code>orientation</code>.
 * vertical or horizontal area chart.
 * </p><p>
 * Default value is <code>vertical</code>
 * @return {sap.viz.ui5.types.Area_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.getOrientation = function() { return new sap.viz.ui5.types.Area_orientation(); };

/**
 * 
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set axis 1 color palette for dual chart.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.getPrimaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set axis 2 color palette for dual chart.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.getSecondaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.Area_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.getToolTip = function() { return new sap.viz.ui5.types.Area_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Area_animation}
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Area_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for the aggregated <code>hoverline</code>.
 * @param oHoverline {sap.viz.ui5.types.Area_hoverline}
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.setHoverline = function(oHoverline) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for the aggregated <code>marker</code>.
 * @param oMarker {sap.viz.ui5.types.Area_marker}
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.setMarker = function(oMarker) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for property <code>mode</code>.
 * </p><p>
 * Default value is <code>comparison</code> 
 * @param {sap.viz.ui5.types.Area_mode} oMode  new value for property <code>mode</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.setMode = function(oMode) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for property <code>orientation</code>.
 * </p><p>
 * Default value is <code>vertical</code> 
 * @param {sap.viz.ui5.types.Area_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.setOrientation = function(oOrientation) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for property <code>primaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.setPrimaryValuesColorPalette = function(aPrimaryValuesColorPalette) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for property <code>secondaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area.prototype.setSecondaryValuesColorPalette = function(aSecondaryValuesColorPalette) { return new sap.viz.ui5.types.Area(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Area_tooltip}
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Area(); };


// ---- sap.viz.ui5.types.Area_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Area_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Area_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Area_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Area_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Area_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Area_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Area_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Area_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Area_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Area_animation(); };


// ---- sap.viz.ui5.types.Area_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Area_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Area_hoverline --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Area_hoverline.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for hoverline properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Area_hoverline = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Area_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Area_hoverline.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to enabled/disabled hoverline or not.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_hoverline.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Area_hoverline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_hoverline.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Area_hoverline(); };


// ---- sap.viz.ui5.types.Area_marker --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Area_marker.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getShape shape} : sap.viz.ui5.types.Area_marker_shape (default: sap.viz.ui5.types.Area_marker_shape.circle)</li>
 * <li>{@link #getSize size} : int (default: 4)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for marker/data point graphics
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area_marker = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Area_marker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Area_marker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>shape</code>.
 * Set marker shapes for chart.
 * </p><p>
 * Default value is <code>circle</code>
 * @return {sap.viz.ui5.types.Area_marker_shape} the value of property <code>shape</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_marker.prototype.getShape = function() { return new sap.viz.ui5.types.Area_marker_shape(); };

/**
 * 
 * Getter for property <code>size</code>.
 * Set marker size of data point, range[4,32]. When beyond the range, the marker size is default size 4.
 * </p><p>
 * Default value is <code>4</code>
 * @return {int} the value of property <code>size</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_marker.prototype.getSize = function() { return 0; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set show marker or not.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area_marker.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>shape</code>.
 * </p><p>
 * Default value is <code>circle</code> 
 * @param {sap.viz.ui5.types.Area_marker_shape} oShape  new value for property <code>shape</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_marker.prototype.setShape = function(oShape) { return new sap.viz.ui5.types.Area_marker(); };

/**
 * 
 * Setter for property <code>size</code>.
 * </p><p>
 * Default value is <code>4</code> 
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_marker.prototype.setSize = function(iSize) { return new sap.viz.ui5.types.Area_marker(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area_marker.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Area_marker(); };


// ---- sap.viz.ui5.types.Area_marker_shape --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Area_marker_shape.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Area_mode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Area_mode.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Area_orientation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Area_orientation.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Area_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Area_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Area_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Area_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Area_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.Area_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Area_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Area_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.Area_tooltip(); };


// ---- sap.viz.ui5.types.Axis --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIsIndependentMode isIndependentMode} : boolean (default: false)</li>
 * <li>{@link #getIsPercentMode isPercentMode} : boolean (default: false)</li>
 * <li>{@link #getLineSize lineSize} : string (default: '1')</li>
 * <li>{@link #getColor color} : string (default: '#6c6c6c')</li>
 * <li>{@link #getType type} : sap.viz.ui5.types.Axis_type (default: sap.viz.ui5.types.Axis_type.value)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.Axis_position (default: sap.viz.ui5.types.Axis_position.bottom)</li>
 * <li>{@link #getIsTruncateAvailable isTruncateAvailable} : boolean (default: true)</li>
 * <li>{@link #getForceLabelArea forceLabelArea} : boolean (default: false)</li>
 * <li>{@link #getEnableLabelSelection enableLabelSelection} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Axis_title</li>
 * <li>{@link #getGridline gridline} : sap.viz.ui5.types.Axis_gridline</li>
 * <li>{@link #getAxisline axisline} : sap.viz.ui5.types.Axis_axisline</li>
 * <li>{@link #getLabel label} : sap.viz.ui5.types.Axis_label</li>
 * <li>{@link #getIndicator indicator} : sap.viz.ui5.types.Axis_indicator</li>
 * <li>{@link #getScale scale} : sap.viz.ui5.types.Axis_scale</li>
 * <li>{@link #getLayoutInfo layoutInfo} : sap.viz.ui5.types.Axis_layoutInfo</li>
 * <li>{@link #getAxisTick axisTick} : sap.viz.ui5.types.Axis_axisTick</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Axis
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis = function(sId,mSettings) {};
/**
 * 
 * Destroys the axisline in the aggregation 
 * named <code>axisline</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyAxisline = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the axisTick in the aggregation 
 * named <code>axisTick</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyAxisTick = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the gridline in the aggregation 
 * named <code>gridline</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyGridline = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the indicator in the aggregation 
 * named <code>indicator</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyIndicator = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the label in the aggregation 
 * named <code>label</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyLabel = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the layoutInfo in the aggregation 
 * named <code>layoutInfo</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyLayoutInfo = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the scale in the aggregation 
 * named <code>scale</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyScale = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.destroyTitle = function() { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>axisline</code>.<br/>
 * Settings for axisline.
 * @return {sap.viz.ui5.types.Axis_axisline}
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getAxisline = function() { return new sap.viz.ui5.types.Axis_axisline(); };

/**
 * 
 * Getter for aggregation <code>axisTick</code>.<br/>
 * Settings for axis ticks.
 * @return {sap.viz.ui5.types.Axis_axisTick}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getAxisTick = function() { return new sap.viz.ui5.types.Axis_axisTick(); };

/**
 * 
 * Getter for property <code>color</code>.
 * Set color of axisline.
 * </p><p>
 * Default value is <code>#6c6c6c</code>
 * @return {string} the value of property <code>color</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getColor = function() { return ""; };

/**
 * 
 * Getter for property <code>enableLabelSelection</code>.
 * Set whether to enable label selection effect. For mobile, default value will be false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableLabelSelection</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getEnableLabelSelection = function() { return false; };

/**
 * 
 * Getter for property <code>forceLabelArea</code>.
 * Make label area limit to text area.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>forceLabelArea</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getForceLabelArea = function() { return false; };

/**
 * 
 * Getter for aggregation <code>gridline</code>.<br/>
 * Settings for axis gridline.
 * @return {sap.viz.ui5.types.Axis_gridline}
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getGridline = function() { return new sap.viz.ui5.types.Axis_gridline(); };

/**
 * 
 * Getter for aggregation <code>indicator</code>.<br/>
 * Settings for axis indicator
 * @return {sap.viz.ui5.types.Axis_indicator}
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getIndicator = function() { return new sap.viz.ui5.types.Axis_indicator(); };

/**
 * 
 * Getter for property <code>isIndependentMode</code>.
 * Set whether axis works on independent mode, currently it is used specially for boxplot chart.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isIndependentMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getIsIndependentMode = function() { return false; };

/**
 * 
 * Getter for property <code>isPercentMode</code>.
 * Show the label 0.1 as 10
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isPercentMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getIsPercentMode = function() { return false; };

/**
 * 
 * Getter for property <code>isTruncateAvailable</code>.
 * Mark truncate logic availability for category axis.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>isTruncateAvailable</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getIsTruncateAvailable = function() { return false; };

/**
 * 
 * Getter for aggregation <code>label</code>.<br/>
 * Settings for axis label.
 * @return {sap.viz.ui5.types.Axis_label}
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getLabel = function() { return new sap.viz.ui5.types.Axis_label(); };

/**
 * 
 * Getter for aggregation <code>layoutInfo</code>.<br/>
 * Settings layoutInfo for category axis. this property just work on category type axis
 * @return {sap.viz.ui5.types.Axis_layoutInfo}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getLayoutInfo = function() { return new sap.viz.ui5.types.Axis_layoutInfo(); };

/**
 * 
 * Getter for property <code>lineSize</code>.
 * Set line size of axis.
 * </p><p>
 * Default value is <code>1</code>
 * @return {string} the value of property <code>lineSize</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getLineSize = function() { return ""; };

/**
 * 
 * Getter for property <code>position</code>.
 * Set position of axis.
 * </p><p>
 * Default value is <code>bottom</code>
 * @return {sap.viz.ui5.types.Axis_position} the value of property <code>position</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getPosition = function() { return new sap.viz.ui5.types.Axis_position(); };

/**
 * 
 * Getter for aggregation <code>scale</code>.<br/>
 * Set scale for value axis. this property just work on value type axis.
 * @return {sap.viz.ui5.types.Axis_scale}
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getScale = function() { return new sap.viz.ui5.types.Axis_scale(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Settings for axis title.
 * @return {sap.viz.ui5.types.Axis_title}
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getTitle = function() { return new sap.viz.ui5.types.Axis_title(); };

/**
 * 
 * Getter for property <code>type</code>.
 * Set type of axis.
 * </p><p>
 * Default value is <code>value</code>
 * @return {sap.viz.ui5.types.Axis_type} the value of property <code>type</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.getType = function() { return new sap.viz.ui5.types.Axis_type(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of axis.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for the aggregated <code>axisline</code>.
 * @param oAxisline {sap.viz.ui5.types.Axis_axisline}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setAxisline = function(oAxisline) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>axisTick</code>.
 * @param oAxisTick {sap.viz.ui5.types.Axis_axisTick}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setAxisTick = function(oAxisTick) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>color</code>.
 * </p><p>
 * Default value is <code>#6c6c6c</code> 
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setColor = function(sColor) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>enableLabelSelection</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableLabelSelection  new value for property <code>enableLabelSelection</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setEnableLabelSelection = function(bEnableLabelSelection) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>forceLabelArea</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bForceLabelArea  new value for property <code>forceLabelArea</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setForceLabelArea = function(bForceLabelArea) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>gridline</code>.
 * @param oGridline {sap.viz.ui5.types.Axis_gridline}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setGridline = function(oGridline) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>indicator</code>.
 * @param oIndicator {sap.viz.ui5.types.Axis_indicator}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setIndicator = function(oIndicator) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>isIndependentMode</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsIndependentMode  new value for property <code>isIndependentMode</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setIsIndependentMode = function(bIsIndependentMode) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>isPercentMode</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsPercentMode  new value for property <code>isPercentMode</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setIsPercentMode = function(bIsPercentMode) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>isTruncateAvailable</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bIsTruncateAvailable  new value for property <code>isTruncateAvailable</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setIsTruncateAvailable = function(bIsTruncateAvailable) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>label</code>.
 * @param oLabel {sap.viz.ui5.types.Axis_label}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setLabel = function(oLabel) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>layoutInfo</code>.
 * @param oLayoutInfo {sap.viz.ui5.types.Axis_layoutInfo}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setLayoutInfo = function(oLayoutInfo) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>lineSize</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {string} sLineSize  new value for property <code>lineSize</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setLineSize = function(sLineSize) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>position</code>.
 * </p><p>
 * Default value is <code>bottom</code> 
 * @param {sap.viz.ui5.types.Axis_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setPosition = function(oPosition) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>scale</code>.
 * @param oScale {sap.viz.ui5.types.Axis_scale}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setScale = function(oScale) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.Axis_title}
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>value</code> 
 * @param {sap.viz.ui5.types.Axis_type} oType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis.prototype.setType = function(oType) { return new sap.viz.ui5.types.Axis(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Axis(); };


// ---- sap.viz.ui5.types.Axis_axisline --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_axisline.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for axisline.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis_axisline = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_axisline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_axisline.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of axisline.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_axisline.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_axisline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_axisline.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Axis_axisline(); };


// ---- sap.viz.ui5.types.Axis_axisTick --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_axisTick.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for axis ticks.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_axisTick = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_axisTick with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_axisTick.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of axis ticks. For mobile, default value will be false.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_axisTick.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_axisTick} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_axisTick.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Axis_axisTick(); };


// ---- sap.viz.ui5.types.Axis_gridline --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_gridline.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowFirstLine showFirstLine} : boolean (default: false)</li>
 * <li>{@link #getShowLastLine showLastLine} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.viz.ui5.types.Axis_gridline_type (default: sap.viz.ui5.types.Axis_gridline_type.line)</li>
 * <li>{@link #getColor color} : string (default: '#d8d8d8')</li>
 * <li>{@link #getSize size} : string (default: '1')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for axis gridline.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis_gridline = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_gridline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_gridline.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>color</code>.
 * Set color of gridline.
 * </p><p>
 * Default value is <code>#d8d8d8</code>
 * @return {string} the value of property <code>color</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.getColor = function() { return ""; };

/**
 * 
 * Getter for property <code>showFirstLine</code>.
 * Set enabled/disabled the first line of gridlines.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showFirstLine</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.getShowFirstLine = function() { return false; };

/**
 * 
 * Getter for property <code>showLastLine</code>.
 * Set enabled/disabled the last line of gridlines.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>showLastLine</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.getShowLastLine = function() { return false; };

/**
 * 
 * Getter for property <code>size</code>.
 * Set line size of gridline.
 * </p><p>
 * Default value is <code>1</code>
 * @return {string} the value of property <code>size</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.getSize = function() { return ""; };

/**
 * 
 * Getter for property <code>type</code>.
 * Set type of gridline.
 * </p><p>
 * Default value is <code>line</code>
 * @return {sap.viz.ui5.types.Axis_gridline_type} the value of property <code>type</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.getType = function() { return new sap.viz.ui5.types.Axis_gridline_type(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of axis gridline.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>color</code>.
 * </p><p>
 * Default value is <code>#d8d8d8</code> 
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.setColor = function(sColor) { return new sap.viz.ui5.types.Axis_gridline(); };

/**
 * 
 * Setter for property <code>showFirstLine</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowFirstLine  new value for property <code>showFirstLine</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.setShowFirstLine = function(bShowFirstLine) { return new sap.viz.ui5.types.Axis_gridline(); };

/**
 * 
 * Setter for property <code>showLastLine</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bShowLastLine  new value for property <code>showLastLine</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.setShowLastLine = function(bShowLastLine) { return new sap.viz.ui5.types.Axis_gridline(); };

/**
 * 
 * Setter for property <code>size</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {string} sSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.setSize = function(sSize) { return new sap.viz.ui5.types.Axis_gridline(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>line</code> 
 * @param {sap.viz.ui5.types.Axis_gridline_type} oType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.setType = function(oType) { return new sap.viz.ui5.types.Axis_gridline(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_gridline.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Axis_gridline(); };


// ---- sap.viz.ui5.types.Axis_gridline_type --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Axis_gridline_type.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Axis_indicator --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_indicator.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for axis indicator
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis_indicator = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_indicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_indicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enable</code>.
 * Set visibility of axis indicator.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_indicator.prototype.getEnable = function() { return false; };

/**
 * 
 * Setter for property <code>enable</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.Axis_indicator} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_indicator.prototype.setEnable = function(bEnable) { return new sap.viz.ui5.types.Axis_indicator(); };


// ---- sap.viz.ui5.types.Axis_label --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_label.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getNumberFormat numberFormat} : string (default: '')</li>
 * <li>{@link #getFormatString formatString} : any (default: null)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for axis label.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis_label = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_label.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string of value axis. If value is a string, it will be axis format string as before. If value is a two dimensions array that each item of array is applied to each item of measure value group, it is only available for scatter matrix chart and multiple chart with MND in order to display different measure number format in each sub chart. If value is a two dimensions array for other charts except scatter matrix and multiple chart, the first value of first array of two dimensions array is as format string to format axis label. Any character in "MDYHSAmdyhsau#?%0@" is reserved as a token for format code. The end "u" of format string let value format with SI units, the other format string will explained as Excel format string, The value that bigger than 1e8 or less than 1e-6 and be not 0 format with Exponential style The following is a simple sample format string for label for axis as "0.00%" or as one chart may have two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
 * </p><p>
 * Default value is <code>null</code>
 * @return {any} the value of property <code>formatString</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_label.prototype.getFormatString = function() { return null; };

/**
 * 
 * Getter for property <code>numberFormat</code>.
 * Set number format of value axis.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>numberFormat</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_label.prototype.getNumberFormat = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of axis label.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_label.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {any} oFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_label.prototype.setFormatString = function(oFormatString) { return new sap.viz.ui5.types.Axis_label(); };

/**
 * 
 * Setter for property <code>numberFormat</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sNumberFormat  new value for property <code>numberFormat</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_label.prototype.setNumberFormat = function(sNumberFormat) { return new sap.viz.ui5.types.Axis_label(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_label.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Axis_label(); };


// ---- sap.viz.ui5.types.Axis_layoutInfo --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_layoutInfo.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : float (default: 0)</li>
 * <li>{@link #getHeight height} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings layoutInfo for category axis. this property just work on category type axis
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_layoutInfo = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_layoutInfo with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_layoutInfo.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>height</code>.
 * Set height of xAxis.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>height</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_layoutInfo.prototype.getHeight = function() { return 0.0; };

/**
 * 
 * Getter for property <code>width</code>.
 * Set width of xAxis.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>width</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_layoutInfo.prototype.getWidth = function() { return 0.0; };

/**
 * 
 * Setter for property <code>height</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fHeight  new value for property <code>height</code>
 * @return {sap.viz.ui5.types.Axis_layoutInfo} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_layoutInfo.prototype.setHeight = function(fHeight) { return new sap.viz.ui5.types.Axis_layoutInfo(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.types.Axis_layoutInfo} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_layoutInfo.prototype.setWidth = function(fWidth) { return new sap.viz.ui5.types.Axis_layoutInfo(); };


// ---- sap.viz.ui5.types.Axis_position --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Axis_position.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Axis_scale --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_scale.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFixedRange fixedRange} : boolean (default: false)</li>
 * <li>{@link #getMinValue minValue} : float (default: 0)</li>
 * <li>{@link #getMaxValue maxValue} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set scale for value axis. this property just work on value type axis.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis_scale = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_scale with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_scale.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>fixedRange</code>.
 * Enable/disable fixed axis range according minValue and maxValue.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>fixedRange</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_scale.prototype.getFixedRange = function() { return false; };

/**
 * 
 * Getter for property <code>maxValue</code>.
 * Set maxValue of value axis.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>maxValue</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_scale.prototype.getMaxValue = function() { return 0.0; };

/**
 * 
 * Getter for property <code>minValue</code>.
 * Set minValue of value axis.
 * </p><p>
 * Default value is <code>0</code>
 * @return {float} the value of property <code>minValue</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_scale.prototype.getMinValue = function() { return 0.0; };

/**
 * 
 * Setter for property <code>fixedRange</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bFixedRange  new value for property <code>fixedRange</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_scale.prototype.setFixedRange = function(bFixedRange) { return new sap.viz.ui5.types.Axis_scale(); };

/**
 * 
 * Setter for property <code>maxValue</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fMaxValue  new value for property <code>maxValue</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_scale.prototype.setMaxValue = function(fMaxValue) { return new sap.viz.ui5.types.Axis_scale(); };

/**
 * 
 * Setter for property <code>minValue</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {float} fMinValue  new value for property <code>minValue</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_scale.prototype.setMinValue = function(fMinValue) { return new sap.viz.ui5.types.Axis_scale(); };


// ---- sap.viz.ui5.types.Axis_title --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Axis_title.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getText text} : string (default: 'null')</li>
 * <li>{@link #getApplyAxislineColor applyAxislineColor} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for axis title.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Axis_title = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Axis_title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Axis_title.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>applyAxislineColor</code>.
 * Set title color same with axisline color.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>applyAxislineColor</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_title.prototype.getApplyAxislineColor = function() { return false; };

/**
 * 
 * Getter for property <code>text</code>.
 * Set text of axis title.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_title.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of axis title.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Axis_title.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>applyAxislineColor</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bApplyAxislineColor  new value for property <code>applyAxislineColor</code>
 * @return {sap.viz.ui5.types.Axis_title} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Axis_title.prototype.setApplyAxislineColor = function(bApplyAxislineColor) { return new sap.viz.ui5.types.Axis_title(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.viz.ui5.types.Axis_title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_title.prototype.setText = function(sText) { return new sap.viz.ui5.types.Axis_title(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Axis_title.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Axis_title(); };


// ---- sap.viz.ui5.types.Axis_type --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Axis_type.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Background --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Background.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Background_drawingEffect (default: sap.viz.ui5.types.Background_drawingEffect.normal)</li>
 * <li>{@link #getDirection direction} : sap.viz.ui5.types.Background_direction (default: sap.viz.ui5.types.Background_direction.vertical)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBorder border} : sap.viz.ui5.types.Background_border</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Background
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Background = function(sId,mSettings) {};
/**
 * 
 * Destroys the border in the aggregation 
 * named <code>border</code>.
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.destroyBorder = function() { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Background with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Background.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>border</code>.<br/>
 * Settings for border property.
 * @return {sap.viz.ui5.types.Background_border}
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.getBorder = function() { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Getter for property <code>direction</code>.
 * Set gradient direction of background, only taking effect when drawingEffect of background has been set to 'golossy'.
 * </p><p>
 * Default value is <code>vertical</code>
 * @return {sap.viz.ui5.types.Background_direction} the value of property <code>direction</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.getDirection = function() { return new sap.viz.ui5.types.Background_direction(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of background.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Background_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Background_drawingEffect(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of background.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for the aggregated <code>border</code>.
 * @param oBorder {sap.viz.ui5.types.Background_border}
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.setBorder = function(oBorder) { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Setter for property <code>direction</code>.
 * </p><p>
 * Default value is <code>vertical</code> 
 * @param {sap.viz.ui5.types.Background_direction} oDirection  new value for property <code>direction</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.setDirection = function(oDirection) { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Background_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Background(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Background(); };


// ---- sap.viz.ui5.types.Background_border --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Background_border.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLeft left} : sap.viz.ui5.types.Background_border_left</li>
 * <li>{@link #getRight right} : sap.viz.ui5.types.Background_border_right</li>
 * <li>{@link #getTop top} : sap.viz.ui5.types.Background_border_top</li>
 * <li>{@link #getBottom bottom} : sap.viz.ui5.types.Background_border_bottom</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for border property.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Background_border = function(sId,mSettings) {};
/**
 * 
 * Destroys the bottom in the aggregation 
 * named <code>bottom</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.destroyBottom = function() { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Destroys the left in the aggregation 
 * named <code>left</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.destroyLeft = function() { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Destroys the right in the aggregation 
 * named <code>right</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.destroyRight = function() { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Destroys the top in the aggregation 
 * named <code>top</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.destroyTop = function() { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Background_border with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Background_border.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>bottom</code>.<br/>
 * Set bottom border property.
 * @return {sap.viz.ui5.types.Background_border_bottom}
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.getBottom = function() { return new sap.viz.ui5.types.Background_border_bottom(); };

/**
 * 
 * Getter for aggregation <code>left</code>.<br/>
 * Set left border property.
 * @return {sap.viz.ui5.types.Background_border_left}
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.getLeft = function() { return new sap.viz.ui5.types.Background_border_left(); };

/**
 * 
 * Getter for aggregation <code>right</code>.<br/>
 * Set right border property.
 * @return {sap.viz.ui5.types.Background_border_right}
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.getRight = function() { return new sap.viz.ui5.types.Background_border_right(); };

/**
 * 
 * Getter for aggregation <code>top</code>.<br/>
 * Set top border property.
 * @return {sap.viz.ui5.types.Background_border_top}
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.getTop = function() { return new sap.viz.ui5.types.Background_border_top(); };

/**
 * 
 * Setter for the aggregated <code>bottom</code>.
 * @param oBottom {sap.viz.ui5.types.Background_border_bottom}
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.setBottom = function(oBottom) { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Setter for the aggregated <code>left</code>.
 * @param oLeft {sap.viz.ui5.types.Background_border_left}
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.setLeft = function(oLeft) { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Setter for the aggregated <code>right</code>.
 * @param oRight {sap.viz.ui5.types.Background_border_right}
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.setRight = function(oRight) { return new sap.viz.ui5.types.Background_border(); };

/**
 * 
 * Setter for the aggregated <code>top</code>.
 * @param oTop {sap.viz.ui5.types.Background_border_top}
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border.prototype.setTop = function(oTop) { return new sap.viz.ui5.types.Background_border(); };


// ---- sap.viz.ui5.types.Background_border_bottom --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Background_border_bottom.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set bottom border property.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Background_border_bottom = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_bottom with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Background_border_bottom.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of background.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_bottom.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_bottom} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_bottom.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Background_border_bottom(); };


// ---- sap.viz.ui5.types.Background_border_left --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Background_border_left.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set left border property.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Background_border_left = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_left with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Background_border_left.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of background.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_left.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_left} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_left.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Background_border_left(); };


// ---- sap.viz.ui5.types.Background_border_right --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Background_border_right.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set right border property.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Background_border_right = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_right with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Background_border_right.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of background.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_right.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_right} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_right.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Background_border_right(); };


// ---- sap.viz.ui5.types.Background_border_top --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Background_border_top.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set top border property.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Background_border_top = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_top with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Background_border_top.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of background.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_top.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_top} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Background_border_top.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Background_border_top(); };


// ---- sap.viz.ui5.types.Background_direction --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Background_direction.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Background_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Background_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Bar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Bar_drawingEffect (default: sap.viz.ui5.types.Bar_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li>
 * <li>{@link #getImageFill imageFill} : boolean (default: false)</li>
 * <li>{@link #getImagePalette imagePalette} : string[] (default: ['http://www.sap.com/global/ui/images/global/sap-logo.png'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Bar_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Bar_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Bar
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Bar = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.Bar_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.getAnimation = function() { return new sap.viz.ui5.types.Bar_animation(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of plotArea.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Bar_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Bar_drawingEffect(); };

/**
 * 
 * Getter for property <code>imageFill</code>.
 * Set enabled/disabled image fill.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>imageFill</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.getImageFill = function() { return false; };

/**
 * 
 * Getter for property <code>imagePalette</code>.
 * images to fill the bar
 * </p><p>
 * Default value is <code>http://www.sap.com/global/ui/images/global/sap-logo.png</code>
 * @return {string[]} the value of property <code>imagePalette</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.getImagePalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>isRoundCorner</code>.
 * Set enable/disable round corner of bar.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.getIsRoundCorner = function() { return false; };

/**
 * 
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set axis 1 color palette for dual chart.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.getPrimaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set axis 2 color palette for dual chart.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.getSecondaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.Bar_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.getToolTip = function() { return new sap.viz.ui5.types.Bar_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Bar_animation}
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Bar_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>imageFill</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bImageFill  new value for property <code>imageFill</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.setImageFill = function(bImageFill) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>imagePalette</code>.
 * </p><p>
 * Default value is <code>http://www.sap.com/global/ui/images/global/sap-logo.png</code> 
 * @param {string[]} aImagePalette  new value for property <code>imagePalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.setImagePalette = function(aImagePalette) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>isRoundCorner</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.setIsRoundCorner = function(bIsRoundCorner) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>primaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.setPrimaryValuesColorPalette = function(aPrimaryValuesColorPalette) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for property <code>secondaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar.prototype.setSecondaryValuesColorPalette = function(aSecondaryValuesColorPalette) { return new sap.viz.ui5.types.Bar(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Bar_tooltip}
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Bar(); };


// ---- sap.viz.ui5.types.Bar_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bar_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Bar_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bar_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bar_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Bar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Bar_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Bar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Bar_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Bar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Bar_animation(); };


// ---- sap.viz.ui5.types.Bar_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Bar_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Bar_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bar_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Bar_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bar_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bar_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bar_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Bar_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bar_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.Bar_tooltip(); };


// ---- sap.viz.ui5.types.Bubble --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bubble.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getShapePalette shapePalette} : string[] (default: ['circle','square','diamond','triangleUp','triangleDown','triangleLeft','triangleRight','cross','intersection'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Bubble_drawingEffect (default: sap.viz.ui5.types.Bubble_drawingEffect.normal)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAxisTooltip axisTooltip} : sap.viz.ui5.types.Bubble_axisTooltip</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Bubble_hoverline</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Bubble_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Bubble
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Bubble = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Destroys the axisTooltip in the aggregation 
 * named <code>axisTooltip</code>.
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.destroyAxisTooltip = function() { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.destroyHoverline = function() { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bubble.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Set animation of bubble/scatter.
 * @return {sap.viz.ui5.types.Bubble_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.getAnimation = function() { return new sap.viz.ui5.types.Bubble_animation(); };

/**
 * 
 * Getter for aggregation <code>axisTooltip</code>.<br/>
 * Set tooltip related properties.
 * @return {sap.viz.ui5.types.Bubble_axisTooltip}
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.getAxisTooltip = function() { return new sap.viz.ui5.types.Bubble_axisTooltip(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set marker color of bubble.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Drawing effect of bubble marker.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Bubble_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Bubble_drawingEffect(); };

/**
 * 
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for hoverline properties.
 * @return {sap.viz.ui5.types.Bubble_hoverline}
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.getHoverline = function() { return new sap.viz.ui5.types.Bubble_hoverline(); };

/**
 * 
 * Getter for property <code>shapePalette</code>.
 * Set marker shape of bubble.
 * </p><p>
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code>
 * @return {string[]} the value of property <code>shapePalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.getShapePalette = function() { return new Array(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Bubble_animation}
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>axisTooltip</code>.
 * @param oAxisTooltip {sap.viz.ui5.types.Bubble_axisTooltip}
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.setAxisTooltip = function(oAxisTooltip) { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Bubble_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Setter for the aggregated <code>hoverline</code>.
 * @param oHoverline {sap.viz.ui5.types.Bubble_hoverline}
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.setHoverline = function(oHoverline) { return new sap.viz.ui5.types.Bubble(); };

/**
 * 
 * Setter for property <code>shapePalette</code>.
 * </p><p>
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code> 
 * @param {string[]} aShapePalette  new value for property <code>shapePalette</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble.prototype.setShapePalette = function(aShapePalette) { return new sap.viz.ui5.types.Bubble(); };


// ---- sap.viz.ui5.types.Bubble_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bubble_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set animation of bubble/scatter.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Bubble_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bubble_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bubble_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Bubble_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Bubble_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Bubble_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Bubble_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Bubble_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Bubble_animation(); };


// ---- sap.viz.ui5.types.Bubble_axisTooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bubble_axisTooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFormatString formatString} : string[] (default: ['null'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Bubble_axisTooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bubble_axisTooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bubble_axisTooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string[]} the value of property <code>formatString</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_axisTooltip.prototype.getFormatString = function() { return new Array(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_axisTooltip.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string[]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Bubble_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_axisTooltip.prototype.setFormatString = function(aFormatString) { return new sap.viz.ui5.types.Bubble_axisTooltip(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Bubble_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_axisTooltip.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Bubble_axisTooltip(); };


// ---- sap.viz.ui5.types.Bubble_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Bubble_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Bubble_hoverline --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Bubble_hoverline.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for hoverline properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Bubble_hoverline = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Bubble_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Bubble_hoverline.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to enabled/disabled hoverline or not.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_hoverline.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Bubble_hoverline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Bubble_hoverline.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Bubble_hoverline(); };


// ---- sap.viz.ui5.types.Combination --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Combination_drawingEffect (default: sap.viz.ui5.types.Combination_drawingEffect.normal)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Combination_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Combination_animation</li>
 * <li>{@link #getDataShape dataShape} : sap.viz.ui5.types.Combination_dataShape</li>
 * <li>{@link #getBar bar} : sap.viz.ui5.types.Combination_bar</li>
 * <li>{@link #getLine line} : sap.viz.ui5.types.Combination_line</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Combination
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Combination = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Destroys the bar in the aggregation 
 * named <code>bar</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.destroyBar = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Destroys the dataShape in the aggregation 
 * named <code>dataShape</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.destroyDataShape = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Destroys the line in the aggregation 
 * named <code>line</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.destroyLine = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Combination.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.Combination_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getAnimation = function() { return new sap.viz.ui5.types.Combination_animation(); };

/**
 * 
 * Getter for aggregation <code>bar</code>.<br/>
 * Settings for bar properties.
 * @return {sap.viz.ui5.types.Combination_bar}
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getBar = function() { return new sap.viz.ui5.types.Combination_bar(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>dataShape</code>.<br/>
 * Set shape of measure data.
 * @return {sap.viz.ui5.types.Combination_dataShape}
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getDataShape = function() { return new sap.viz.ui5.types.Combination_dataShape(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of plotArea.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Combination_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Combination_drawingEffect(); };

/**
 * 
 * Getter for aggregation <code>line</code>.<br/>
 * Settings for line properties.
 * @return {sap.viz.ui5.types.Combination_line}
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getLine = function() { return new sap.viz.ui5.types.Combination_line(); };

/**
 * 
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set axis 1 color palette for dual chart.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getPrimaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set axis 2 color palette for dual chart.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.getSecondaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.Combination_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Combination.prototype.getToolTip = function() { return new sap.viz.ui5.types.Combination_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Combination_animation}
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for the aggregated <code>bar</code>.
 * @param oBar {sap.viz.ui5.types.Combination_bar}
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setBar = function(oBar) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for the aggregated <code>dataShape</code>.
 * @param oDataShape {sap.viz.ui5.types.Combination_dataShape}
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setDataShape = function(oDataShape) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Combination_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for the aggregated <code>line</code>.
 * @param oLine {sap.viz.ui5.types.Combination_line}
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setLine = function(oLine) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for property <code>primaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setPrimaryValuesColorPalette = function(aPrimaryValuesColorPalette) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for property <code>secondaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination.prototype.setSecondaryValuesColorPalette = function(aSecondaryValuesColorPalette) { return new sap.viz.ui5.types.Combination(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Combination_tooltip}
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Combination.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Combination(); };


// ---- sap.viz.ui5.types.Combination_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Combination_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Combination_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Combination_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Combination_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Combination_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Combination_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Combination_animation(); };


// ---- sap.viz.ui5.types.Combination_bar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination_bar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for bar properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Combination_bar = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination_bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination_bar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>isRoundCorner</code>.
 * Set enable/disable round corner of bar.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_bar.prototype.getIsRoundCorner = function() { return false; };

/**
 * 
 * Setter for property <code>isRoundCorner</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.Combination_bar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_bar.prototype.setIsRoundCorner = function(bIsRoundCorner) { return new sap.viz.ui5.types.Combination_bar(); };


// ---- sap.viz.ui5.types.Combination_dataShape --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination_dataShape.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPrimaryAxis primaryAxis} : string[] (default: ['bar','line','line'])</li>
 * <li>{@link #getSecondAxis secondAxis} : string[] (default: ['line','line','line'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set shape of measure data.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Combination_dataShape = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination_dataShape with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination_dataShape.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>primaryAxis</code>.
 * Set shape of measure index1 data.
 * </p><p>
 * Default value is <code>bar,line,line</code>
 * @return {string[]} the value of property <code>primaryAxis</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_dataShape.prototype.getPrimaryAxis = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondAxis</code>.
 * Set shape of measure index2 data.
 * </p><p>
 * Default value is <code>line,line,line</code>
 * @return {string[]} the value of property <code>secondAxis</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_dataShape.prototype.getSecondAxis = function() { return new Array(); };

/**
 * 
 * Setter for property <code>primaryAxis</code>.
 * </p><p>
 * Default value is <code>bar,line,line</code> 
 * @param {string[]} aPrimaryAxis  new value for property <code>primaryAxis</code>
 * @return {sap.viz.ui5.types.Combination_dataShape} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_dataShape.prototype.setPrimaryAxis = function(aPrimaryAxis) { return new sap.viz.ui5.types.Combination_dataShape(); };

/**
 * 
 * Setter for property <code>secondAxis</code>.
 * </p><p>
 * Default value is <code>line,line,line</code> 
 * @param {string[]} aSecondAxis  new value for property <code>secondAxis</code>
 * @return {sap.viz.ui5.types.Combination_dataShape} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_dataShape.prototype.setSecondAxis = function(aSecondAxis) { return new sap.viz.ui5.types.Combination_dataShape(); };


// ---- sap.viz.ui5.types.Combination_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Combination_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Combination_line --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination_line.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : int (default: 2)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMarker marker} : sap.viz.ui5.types.Combination_line_marker</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for line properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Combination_line = function(sId,mSettings) {};
/**
 * 
 * Destroys the marker in the aggregation 
 * named <code>marker</code>.
 * @return {sap.viz.ui5.types.Combination_line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line.prototype.destroyMarker = function() { return new sap.viz.ui5.types.Combination_line(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination_line with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination_line.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>marker</code>.<br/>
 * Set marker/data point graphics settings.
 * @return {sap.viz.ui5.types.Combination_line_marker}
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line.prototype.getMarker = function() { return new sap.viz.ui5.types.Combination_line_marker(); };

/**
 * 
 * Getter for property <code>width</code>.
 * Set width of line, range[1,7]. When beyond the range, the line width is default size 2.
 * </p><p>
 * Default value is <code>2</code>
 * @return {int} the value of property <code>width</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line.prototype.getWidth = function() { return 0; };

/**
 * 
 * Setter for the aggregated <code>marker</code>.
 * @param oMarker {sap.viz.ui5.types.Combination_line_marker}
 * @return {sap.viz.ui5.types.Combination_line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line.prototype.setMarker = function(oMarker) { return new sap.viz.ui5.types.Combination_line(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>2</code> 
 * @param {int} iWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.types.Combination_line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line.prototype.setWidth = function(iWidth) { return new sap.viz.ui5.types.Combination_line(); };


// ---- sap.viz.ui5.types.Combination_line_marker --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination_line_marker.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getShape shape} : string[] (default: ['circle'])</li>
 * <li>{@link #getSize size} : int (default: 6)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set marker/data point graphics settings.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Combination_line_marker = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination_line_marker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination_line_marker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>shape</code>.
 * Set marker shapes for chart.
 * </p><p>
 * Default value is <code>circle</code>
 * @return {string[]} the value of property <code>shape</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line_marker.prototype.getShape = function() { return new Array(); };

/**
 * 
 * Getter for property <code>size</code>.
 * Set marker size of data point, range[4,32]. When beyond the range, the marker size is default size 6.
 * </p><p>
 * Default value is <code>6</code>
 * @return {int} the value of property <code>size</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line_marker.prototype.getSize = function() { return 0; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to show marker or not.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line_marker.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>shape</code>.
 * </p><p>
 * Default value is <code>circle</code> 
 * @param {string[]} aShape  new value for property <code>shape</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line_marker.prototype.setShape = function(aShape) { return new sap.viz.ui5.types.Combination_line_marker(); };

/**
 * 
 * Setter for property <code>size</code>.
 * </p><p>
 * Default value is <code>6</code> 
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line_marker.prototype.setSize = function(iSize) { return new sap.viz.ui5.types.Combination_line_marker(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_line_marker.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Combination_line_marker(); };


// ---- sap.viz.ui5.types.Combination_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Combination_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Combination_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Combination_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Combination_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.Combination_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Combination_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Combination_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.Combination_tooltip(); };


// ---- sap.viz.ui5.types.controller --------------------------------------------------------------------------


// ---- sap.viz.ui5.types.controller.Interaction --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/controller/Interaction.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSupportedEventNames supportedEventNames} : string[] (default: ['mouseup','mousedown','mousemove','mouseout','mouseover','touchstart'])</li>
 * <li>{@link #getEnableMouseMove enableMouseMove} : boolean (default: true)</li>
 * <li>{@link #getEnableMouseOver enableMouseOver} : boolean (default: true)</li>
 * <li>{@link #getEnableMouseOut enableMouseOut} : boolean (default: true)</li>
 * <li>{@link #getSupportLassoEvent supportLassoEvent} : boolean (default: true)</li>
 * <li>{@link #getHoldSelection holdSelection} : boolean (default: false)</li>
 * <li>{@link #getPreserveSelectionWhenDragging preserveSelectionWhenDragging} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSelectability selectability} : sap.viz.ui5.types.controller.Interaction_selectability</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/controller/Interaction
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.controller.Interaction = function(sId,mSettings) {};
/**
 * 
 * Destroys the selectability in the aggregation 
 * named <code>selectability</code>.
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.destroySelectability = function() { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.controller.Interaction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enableMouseMove</code>.
 * Set whether mouse move is enabled.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableMouseMove</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getEnableMouseMove = function() { return false; };

/**
 * 
 * Getter for property <code>enableMouseOut</code>.
 * Set whether mouse out is enabled.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableMouseOut</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getEnableMouseOut = function() { return false; };

/**
 * 
 * Getter for property <code>enableMouseOver</code>.
 * Set whether mouse over is enabled.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enableMouseOver</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getEnableMouseOver = function() { return false; };

/**
 * 
 * Getter for property <code>holdSelection</code>.
 * Set whether hold selection is enabled.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>holdSelection</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getHoldSelection = function() { return false; };

/**
 * 
 * Getter for property <code>preserveSelectionWhenDragging</code>.
 * Set whether preserve selection when dragging is enabled.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>preserveSelectionWhenDragging</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getPreserveSelectionWhenDragging = function() { return false; };

/**
 * 
 * Getter for aggregation <code>selectability</code>.<br/>
 * Settings for selectability.
 * @return {sap.viz.ui5.types.controller.Interaction_selectability}
 * @public
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getSelectability = function() { return new sap.viz.ui5.types.controller.Interaction_selectability(); };

/**
 * 
 * Getter for property <code>supportedEventNames</code>.
 * Set supported event names.
 * </p><p>
 * Default value is <code>mouseup,mousedown,mousemove,mouseout,mouseover,touchstart</code>
 * @return {string[]} the value of property <code>supportedEventNames</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getSupportedEventNames = function() { return new Array(); };

/**
 * 
 * Getter for property <code>supportLassoEvent</code>.
 * Set whether support lasso event is enabled.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>supportLassoEvent</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.getSupportLassoEvent = function() { return false; };

/**
 * 
 * Setter for property <code>enableMouseMove</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableMouseMove  new value for property <code>enableMouseMove</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setEnableMouseMove = function(bEnableMouseMove) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for property <code>enableMouseOut</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableMouseOut  new value for property <code>enableMouseOut</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setEnableMouseOut = function(bEnableMouseOut) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for property <code>enableMouseOver</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnableMouseOver  new value for property <code>enableMouseOver</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setEnableMouseOver = function(bEnableMouseOver) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for property <code>holdSelection</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bHoldSelection  new value for property <code>holdSelection</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setHoldSelection = function(bHoldSelection) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for property <code>preserveSelectionWhenDragging</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bPreserveSelectionWhenDragging  new value for property <code>preserveSelectionWhenDragging</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setPreserveSelectionWhenDragging = function(bPreserveSelectionWhenDragging) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for the aggregated <code>selectability</code>.
 * @param oSelectability {sap.viz.ui5.types.controller.Interaction_selectability}
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setSelectability = function(oSelectability) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for property <code>supportedEventNames</code>.
 * </p><p>
 * Default value is <code>mouseup,mousedown,mousemove,mouseout,mouseover,touchstart</code> 
 * @param {string[]} aSupportedEventNames  new value for property <code>supportedEventNames</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setSupportedEventNames = function(aSupportedEventNames) { return new sap.viz.ui5.types.controller.Interaction(); };

/**
 * 
 * Setter for property <code>supportLassoEvent</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bSupportLassoEvent  new value for property <code>supportLassoEvent</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction.prototype.setSupportLassoEvent = function(bSupportLassoEvent) { return new sap.viz.ui5.types.controller.Interaction(); };


// ---- sap.viz.ui5.types.controller.Interaction_selectability --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/controller/Interaction_selectability.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMode mode} : sap.viz.ui5.types.controller.Interaction_selectability_mode (default: sap.viz.ui5.types.controller.Interaction_selectability_mode.multiple)</li>
 * <li>{@link #getLassoWithCtrlKey lassoWithCtrlKey} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for selectability.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.controller.Interaction_selectability = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction_selectability with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.controller.Interaction_selectability.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>lassoWithCtrlKey</code>.
 * Set whether lasso selection needs ctrl key pressed.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>lassoWithCtrlKey</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction_selectability.prototype.getLassoWithCtrlKey = function() { return false; };

/**
 * 
 * Getter for property <code>mode</code>.
 * Set the selection mode. Single means you only can select one at the same time. Multiple means you can select several ones. None means you can not select anything.
 * </p><p>
 * Default value is <code>multiple</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability_mode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.viz.ui5.types.controller.Interaction_selectability.prototype.getMode = function() { return new sap.viz.ui5.types.controller.Interaction_selectability_mode(); };

/**
 * 
 * Setter for property <code>lassoWithCtrlKey</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bLassoWithCtrlKey  new value for property <code>lassoWithCtrlKey</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.controller.Interaction_selectability.prototype.setLassoWithCtrlKey = function(bLassoWithCtrlKey) { return new sap.viz.ui5.types.controller.Interaction_selectability(); };

/**
 * 
 * Setter for property <code>mode</code>.
 * </p><p>
 * Default value is <code>multiple</code> 
 * @param {sap.viz.ui5.types.controller.Interaction_selectability_mode} oMode  new value for property <code>mode</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.controller.Interaction_selectability.prototype.setMode = function(oMode) { return new sap.viz.ui5.types.controller.Interaction_selectability(); };


// ---- sap.viz.ui5.types.controller.Interaction_selectability_mode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.controller.Interaction_selectability_mode.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Datalabel --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Datalabel.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getIsDonut isDonut} : boolean (default: false)</li>
 * <li>{@link #getType type} : string (default: 'value')</li>
 * <li>{@link #getAutomaticInOutside automaticInOutside} : boolean (default: true)</li>
 * <li>{@link #getShowZero showZero} : boolean (default: true)</li>
 * <li>{@link #getIsGeoChart isGeoChart} : boolean (default: false)</li>
 * <li>{@link #getIsStackMode isStackMode} : boolean (default: false)</li>
 * <li>{@link #getIsPercentMode isPercentMode} : boolean (default: false)</li>
 * <li>{@link #getPositionPreference positionPreference} : boolean (default: false)</li>
 * <li>{@link #getOutsideVisible outsideVisible} : boolean (default: true)</li>
 * <li>{@link #getOutsidePosition outsidePosition} : sap.viz.ui5.types.Datalabel_outsidePosition (default: sap.viz.ui5.types.Datalabel_outsidePosition.up)</li>
 * <li>{@link #getPaintingMode paintingMode} : sap.viz.ui5.types.Datalabel_paintingMode (default: sap.viz.ui5.types.Datalabel_paintingMode.rectCoordinate)</li>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.Datalabel_position (default: sap.viz.ui5.types.Datalabel_position.inside)</li>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Datalabel_orientation (default: sap.viz.ui5.types.Datalabel_orientation.vertical)</li>
 * <li>{@link #getFormatString formatString} : any[][] (default: [[null]])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Datalabel
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Datalabel = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Datalabel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Datalabel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>automaticInOutside</code>.
 * if it is true, the data label will be automatically placed outside when data label postion property is inside and vice versa.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>automaticInOutside</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getAutomaticInOutside = function() { return false; };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string of datalabel.As we may have dual axis with serveral measures,the first array is applied to primary axis and the second one is applied to the second axis.If the length of format string list is less than the length of data series, the last format string in the list will be applied to exceeded data series.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code. A simple sample is like this [["0.00%"],["0.00%"]].
 * </p><p>
 * Default value is <code>null</code>
 * @return {any[][]} the value of property <code>formatString</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getFormatString = function() { return new Array(); };

/**
 * 
 * Getter for property <code>isDonut</code>.
 * Set for donut chart only.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isDonut</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getIsDonut = function() { return false; };

/**
 * 
 * Getter for property <code>isGeoChart</code>.
 * if it is true, it is a geo chart.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isGeoChart</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getIsGeoChart = function() { return false; };

/**
 * 
 * Getter for property <code>isPercentMode</code>.
 * Set for percent chart only.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isPercentMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getIsPercentMode = function() { return false; };

/**
 * 
 * Getter for property <code>isStackMode</code>.
 * Set for stack chart only.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isStackMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getIsStackMode = function() { return false; };

/**
 * 
 * Getter for property <code>orientation</code>.
 * Set orientation of data labels.
 * </p><p>
 * Default value is <code>vertical</code>
 * @return {sap.viz.ui5.types.Datalabel_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getOrientation = function() { return new sap.viz.ui5.types.Datalabel_orientation(); };

/**
 * 
 * Getter for property <code>outsidePosition</code>.
 * when data label is oustide, its position is above the element.
 * </p><p>
 * Default value is <code>up</code>
 * @return {sap.viz.ui5.types.Datalabel_outsidePosition} the value of property <code>outsidePosition</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getOutsidePosition = function() { return new sap.viz.ui5.types.Datalabel_outsidePosition(); };

/**
 * 
 * Getter for property <code>outsideVisible</code>.
 * when data label is oustide, it can control whether it is visible or not.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>outsideVisible</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getOutsideVisible = function() { return false; };

/**
 * 
 * Getter for property <code>paintingMode</code>.
 * Set painting mode of data labels.
 * </p><p>
 * Default value is <code>rectCoordinate</code>
 * @return {sap.viz.ui5.types.Datalabel_paintingMode} the value of property <code>paintingMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getPaintingMode = function() { return new sap.viz.ui5.types.Datalabel_paintingMode(); };

/**
 * 
 * Getter for property <code>position</code>.
 * Set position of data labels.
 * </p><p>
 * Default value is <code>inside</code>
 * @return {sap.viz.ui5.types.Datalabel_position} the value of property <code>position</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getPosition = function() { return new sap.viz.ui5.types.Datalabel_position(); };

/**
 * 
 * Getter for property <code>positionPreference</code>.
 * If it is true, the data label position is defined by property outsidePosition no matter whether data label value is negative.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>positionPreference</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getPositionPreference = function() { return false; };

/**
 * 
 * Getter for property <code>showZero</code>.
 * if it is true, the value zero will be shown in data label.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>showZero</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getShowZero = function() { return false; };

/**
 * 
 * Getter for property <code>type</code>.
 * Set the type of label
 * </p><p>
 * Default value is <code>value</code>
 * @return {string} the value of property <code>type</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getType = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set whether data label is visible.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>automaticInOutside</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bAutomaticInOutside  new value for property <code>automaticInOutside</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setAutomaticInOutside = function(bAutomaticInOutside) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {any[][]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setFormatString = function(aFormatString) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>isDonut</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsDonut  new value for property <code>isDonut</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setIsDonut = function(bIsDonut) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>isGeoChart</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsGeoChart  new value for property <code>isGeoChart</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setIsGeoChart = function(bIsGeoChart) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>isPercentMode</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsPercentMode  new value for property <code>isPercentMode</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setIsPercentMode = function(bIsPercentMode) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>isStackMode</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsStackMode  new value for property <code>isStackMode</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setIsStackMode = function(bIsStackMode) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>orientation</code>.
 * </p><p>
 * Default value is <code>vertical</code> 
 * @param {sap.viz.ui5.types.Datalabel_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setOrientation = function(oOrientation) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>outsidePosition</code>.
 * </p><p>
 * Default value is <code>up</code> 
 * @param {sap.viz.ui5.types.Datalabel_outsidePosition} oOutsidePosition  new value for property <code>outsidePosition</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setOutsidePosition = function(oOutsidePosition) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>outsideVisible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bOutsideVisible  new value for property <code>outsideVisible</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setOutsideVisible = function(bOutsideVisible) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>paintingMode</code>.
 * </p><p>
 * Default value is <code>rectCoordinate</code> 
 * @param {sap.viz.ui5.types.Datalabel_paintingMode} oPaintingMode  new value for property <code>paintingMode</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setPaintingMode = function(oPaintingMode) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>position</code>.
 * </p><p>
 * Default value is <code>inside</code> 
 * @param {sap.viz.ui5.types.Datalabel_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setPosition = function(oPosition) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>positionPreference</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bPositionPreference  new value for property <code>positionPreference</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setPositionPreference = function(bPositionPreference) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>showZero</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bShowZero  new value for property <code>showZero</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setShowZero = function(bShowZero) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>value</code> 
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setType = function(sType) { return new sap.viz.ui5.types.Datalabel(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datalabel.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Datalabel(); };


// ---- sap.viz.ui5.types.Datalabel_orientation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Datalabel_orientation.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Datalabel_outsidePosition --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Datalabel_outsidePosition.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Datalabel_paintingMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Datalabel_paintingMode.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Datalabel_position --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Datalabel_position.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Datatransform --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Datatransform.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAutoBinning autoBinning} : sap.viz.ui5.types.Datatransform_autoBinning</li>
 * <li>{@link #getDataSampling dataSampling} : sap.viz.ui5.types.Datatransform_dataSampling</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Datatransform
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Datatransform = function(sId,mSettings) {};
/**
 * 
 * Destroys the autoBinning in the aggregation 
 * named <code>autoBinning</code>.
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform.prototype.destroyAutoBinning = function() { return new sap.viz.ui5.types.Datatransform(); };

/**
 * 
 * Destroys the dataSampling in the aggregation 
 * named <code>dataSampling</code>.
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform.prototype.destroyDataSampling = function() { return new sap.viz.ui5.types.Datatransform(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Datatransform.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>autoBinning</code>.<br/>
 * Settings for auto-binning algorithm
 * @return {sap.viz.ui5.types.Datatransform_autoBinning}
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform.prototype.getAutoBinning = function() { return new sap.viz.ui5.types.Datatransform_autoBinning(); };

/**
 * 
 * Getter for aggregation <code>dataSampling</code>.<br/>
 * Settings for data sampling algorithm
 * @return {sap.viz.ui5.types.Datatransform_dataSampling}
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform.prototype.getDataSampling = function() { return new sap.viz.ui5.types.Datatransform_dataSampling(); };

/**
 * 
 * Setter for the aggregated <code>autoBinning</code>.
 * @param oAutoBinning {sap.viz.ui5.types.Datatransform_autoBinning}
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform.prototype.setAutoBinning = function(oAutoBinning) { return new sap.viz.ui5.types.Datatransform(); };

/**
 * 
 * Setter for the aggregated <code>dataSampling</code>.
 * @param oDataSampling {sap.viz.ui5.types.Datatransform_dataSampling}
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform.prototype.setDataSampling = function(oDataSampling) { return new sap.viz.ui5.types.Datatransform(); };


// ---- sap.viz.ui5.types.Datatransform_autoBinning --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Datatransform_autoBinning.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: false)</li>
 * <li>{@link #getBinNumber binNumber} : int (default: 10)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for auto-binning algorithm
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Datatransform_autoBinning = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform_autoBinning with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Datatransform_autoBinning.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>binNumber</code>.
 * Set bin number.
 * </p><p>
 * Default value is <code>10</code>
 * @return {int} the value of property <code>binNumber</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_autoBinning.prototype.getBinNumber = function() { return 0; };

/**
 * 
 * Getter for property <code>enable</code>.
 * Set whether to enable data auto binning.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_autoBinning.prototype.getEnable = function() { return false; };

/**
 * 
 * Setter for property <code>binNumber</code>.
 * </p><p>
 * Default value is <code>10</code> 
 * @param {int} iBinNumber  new value for property <code>binNumber</code>
 * @return {sap.viz.ui5.types.Datatransform_autoBinning} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_autoBinning.prototype.setBinNumber = function(iBinNumber) { return new sap.viz.ui5.types.Datatransform_autoBinning(); };

/**
 * 
 * Setter for property <code>enable</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.Datatransform_autoBinning} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_autoBinning.prototype.setEnable = function(bEnable) { return new sap.viz.ui5.types.Datatransform_autoBinning(); };


// ---- sap.viz.ui5.types.Datatransform_dataSampling --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Datatransform_dataSampling.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: false)</li>
 * <li>{@link #getSizeFactor sizeFactor} : int (default: 1)</li>
 * <li>{@link #getNumberPrecondition numberPrecondition} : int (default: 3000)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGrid grid} : sap.viz.ui5.types.Datatransform_dataSampling_grid</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for data sampling algorithm
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling = function(sId,mSettings) {};
/**
 * 
 * Destroys the grid in the aggregation 
 * named <code>grid</code>.
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.destroyGrid = function() { return new sap.viz.ui5.types.Datatransform_dataSampling(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform_dataSampling with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enable</code>.
 * Set whether to enable data sampling.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.getEnable = function() { return false; };

/**
 * 
 * Getter for aggregation <code>grid</code>.<br/>
 * add documentation for aggregation grid
 * @return {sap.viz.ui5.types.Datatransform_dataSampling_grid}
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.getGrid = function() { return new sap.viz.ui5.types.Datatransform_dataSampling_grid(); };

/**
 * 
 * Getter for property <code>numberPrecondition</code>.
 * if data point is larger than this value, data sampling will be triggered.
 * </p><p>
 * Default value is <code>3000</code>
 * @return {int} the value of property <code>numberPrecondition</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.getNumberPrecondition = function() { return 0; };

/**
 * 
 * Getter for property <code>sizeFactor</code>.
 * Set data point percentage in original dataset
 * </p><p>
 * Default value is <code>1</code>
 * @return {int} the value of property <code>sizeFactor</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.getSizeFactor = function() { return 0; };

/**
 * 
 * Setter for property <code>enable</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.setEnable = function(bEnable) { return new sap.viz.ui5.types.Datatransform_dataSampling(); };

/**
 * 
 * Setter for the aggregated <code>grid</code>.
 * @param oGrid {sap.viz.ui5.types.Datatransform_dataSampling_grid}
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.setGrid = function(oGrid) { return new sap.viz.ui5.types.Datatransform_dataSampling(); };

/**
 * 
 * Setter for property <code>numberPrecondition</code>.
 * </p><p>
 * Default value is <code>3000</code> 
 * @param {int} iNumberPrecondition  new value for property <code>numberPrecondition</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.setNumberPrecondition = function(iNumberPrecondition) { return new sap.viz.ui5.types.Datatransform_dataSampling(); };

/**
 * 
 * Setter for property <code>sizeFactor</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {int} iSizeFactor  new value for property <code>sizeFactor</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling.prototype.setSizeFactor = function(iSizeFactor) { return new sap.viz.ui5.types.Datatransform_dataSampling(); };


// ---- sap.viz.ui5.types.Datatransform_dataSampling_grid --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Datatransform_dataSampling_grid.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRow row} : int (default: 3)</li>
 * <li>{@link #getColumn column} : int (default: 3)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Structured Type ui5/types/Datatransform_dataSampling_grid
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling_grid = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform_dataSampling_grid with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling_grid.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>column</code>.
 * The column number of grid
 * </p><p>
 * Default value is <code>3</code>
 * @return {int} the value of property <code>column</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling_grid.prototype.getColumn = function() { return 0; };

/**
 * 
 * Getter for property <code>row</code>.
 * The row number of grid
 * </p><p>
 * Default value is <code>3</code>
 * @return {int} the value of property <code>row</code>
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling_grid.prototype.getRow = function() { return 0; };

/**
 * 
 * Setter for property <code>column</code>.
 * </p><p>
 * Default value is <code>3</code> 
 * @param {int} iColumn  new value for property <code>column</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling_grid} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling_grid.prototype.setColumn = function(iColumn) { return new sap.viz.ui5.types.Datatransform_dataSampling_grid(); };

/**
 * 
 * Setter for property <code>row</code>.
 * </p><p>
 * Default value is <code>3</code> 
 * @param {int} iRow  new value for property <code>row</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling_grid} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Datatransform_dataSampling_grid.prototype.setRow = function(iRow) { return new sap.viz.ui5.types.Datatransform_dataSampling_grid(); };


// ---- sap.viz.ui5.types.Heatmap --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Heatmap.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartColor startColor} : string (default: '#C2E3A9')</li>
 * <li>{@link #getEndColor endColor} : string (default: '#73C03C')</li>
 * <li>{@link #getColorPalette colorPalette} : string[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBorder border} : sap.viz.ui5.types.Heatmap_border</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Heatmap_animation</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Heatmap_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Heatmap
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Heatmap = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Destroys the border in the aggregation 
 * named <code>border</code>.
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.destroyBorder = function() { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Heatmap.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.Heatmap_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.getAnimation = function() { return new sap.viz.ui5.types.Heatmap_animation(); };

/**
 * 
 * Getter for aggregation <code>border</code>.<br/>
 * Settings for border.
 * @return {sap.viz.ui5.types.Heatmap_border}
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.getBorder = function() { return new sap.viz.ui5.types.Heatmap_border(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for sectors. For example, ["#748CB2","#9CC677","#EACF5E","#F9AD79","#D16A7C"].
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>endColor</code>.
 * Set heatMap endColor.
 * </p><p>
 * Default value is <code>#73C03C</code>
 * @return {string} the value of property <code>endColor</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.getEndColor = function() { return ""; };

/**
 * 
 * Getter for property <code>startColor</code>.
 * Set heatMap startColor.
 * </p><p>
 * Default value is <code>#C2E3A9</code>
 * @return {string} the value of property <code>startColor</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.getStartColor = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip.
 * @return {sap.viz.ui5.types.Heatmap_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.getToolTip = function() { return new sap.viz.ui5.types.Heatmap_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Heatmap_animation}
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>border</code>.
 * @param oBorder {sap.viz.ui5.types.Heatmap_border}
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.setBorder = function(oBorder) { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Setter for property <code>endColor</code>.
 * </p><p>
 * Default value is <code>#73C03C</code> 
 * @param {string} sEndColor  new value for property <code>endColor</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.setEndColor = function(sEndColor) { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Setter for property <code>startColor</code>.
 * </p><p>
 * Default value is <code>#C2E3A9</code> 
 * @param {string} sStartColor  new value for property <code>startColor</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.setStartColor = function(sStartColor) { return new sap.viz.ui5.types.Heatmap(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Heatmap_tooltip}
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Heatmap.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Heatmap(); };


// ---- sap.viz.ui5.types.Heatmap_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Heatmap_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Heatmap_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Heatmap_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Heatmap_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Heatmap_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Heatmap_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Heatmap_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Heatmap_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Heatmap_animation(); };


// ---- sap.viz.ui5.types.Heatmap_border --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Heatmap_border.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for border.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Heatmap_border = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap_border with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Heatmap_border.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of zone edge.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_border.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Heatmap_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_border.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Heatmap_border(); };


// ---- sap.viz.ui5.types.Heatmap_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Heatmap_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Heatmap_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Heatmap_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Heatmap_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Heatmap_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.Heatmap_tooltip(); };


// ---- sap.viz.ui5.types.layout --------------------------------------------------------------------------


// ---- sap.viz.ui5.types.layout.Dock --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/layout/Dock.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/layout/Dock
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.layout.Dock = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.layout.Dock with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.layout.Dock.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };


// ---- sap.viz.ui5.types.layout.Stack --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/layout/Stack.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/layout/Stack
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.layout.Stack = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.layout.Stack with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.layout.Stack.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };


// ---- sap.viz.ui5.types.Legend --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Legend.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLayout layout} : sap.viz.ui5.types.Legend_layout</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Legend
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Legend = function(sId,mSettings) {};
/**
 * 
 * Destroys the layout in the aggregation 
 * named <code>layout</code>.
 * @return {sap.viz.ui5.types.Legend} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Legend.prototype.destroyLayout = function() { return new sap.viz.ui5.types.Legend(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Legend with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Legend.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>layout</code>.<br/>
 * Settings for layout of legend area.
 * @return {sap.viz.ui5.types.Legend_layout}
 * @public
 * 
 */
sap.viz.ui5.types.Legend.prototype.getLayout = function() { return new sap.viz.ui5.types.Legend_layout(); };

/**
 * 
 * Setter for the aggregated <code>layout</code>.
 * @param oLayout {sap.viz.ui5.types.Legend_layout}
 * @return {sap.viz.ui5.types.Legend} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Legend.prototype.setLayout = function(oLayout) { return new sap.viz.ui5.types.Legend(); };


// ---- sap.viz.ui5.types.legend --------------------------------------------------------------------------


// ---- sap.viz.ui5.types.legend.Common --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/legend/Common.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFormatString formatString} : string (default: 'null')</li>
 * <li>{@link #getIsHierarchical isHierarchical} : boolean (default: false)</li>
 * <li>{@link #getIsScrollable isScrollable} : boolean (default: false)</li>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.legend.Common_position (default: sap.viz.ui5.types.legend.Common_position.right)</li>
 * <li>{@link #getType type} : sap.viz.ui5.types.legend.Common_type (default: sap.viz.ui5.types.legend.Common_type.ColorLegend)</li>
 * <li>{@link #getAlignment alignment} : sap.viz.ui5.types.legend.Common_alignment (default: sap.viz.ui5.types.legend.Common_alignment.start)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.legend.Common_drawingEffect (default: sap.viz.ui5.types.legend.Common_drawingEffect.normal)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.legend.Common_title</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/legend/Common
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.legend.Common = function(sId,mSettings) {};
/**
 * 
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.destroyTitle = function() { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.legend.Common with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.legend.Common.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>alignment</code>.
 * Set alignment of legend.
 * </p><p>
 * Default value is <code>start</code>
 * @return {sap.viz.ui5.types.legend.Common_alignment} the value of property <code>alignment</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getAlignment = function() { return new sap.viz.ui5.types.legend.Common_alignment(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of legend.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.legend.Common_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.legend.Common_drawingEffect(); };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string of legend. Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string} the value of property <code>formatString</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getFormatString = function() { return ""; };

/**
 * 
 * Getter for property <code>isHierarchical</code>.
 * Set hierarchy legend. Supported only when legend is located in the right of chart.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isHierarchical</code>
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getIsHierarchical = function() { return false; };

/**
 * 
 * Getter for property <code>isScrollable</code>.
 * Set scrollable legend. Switch on/off scrollable legend. If it is switched off, "..." will be used instead when there is no enough room to fit in all legend items.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isScrollable</code>
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getIsScrollable = function() { return false; };

/**
 * 
 * Getter for property <code>position</code>.
 * It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position.
 * </p><p>
 * Default value is <code>right</code>
 * @return {sap.viz.ui5.types.legend.Common_position} the value of property <code>position</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getPosition = function() { return new sap.viz.ui5.types.legend.Common_position(); };

/**
 * 
 * Getter for aggregation <code>title</code>.<br/>
 * Settings for legend title.
 * @return {sap.viz.ui5.types.legend.Common_title}
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getTitle = function() { return new sap.viz.ui5.types.legend.Common_title(); };

/**
 * 
 * Getter for property <code>type</code>.
 * Set legend type of Bubble chart. Non-bubble chart is not supported.
 * </p><p>
 * Default value is <code>ColorLegend</code>
 * @return {sap.viz.ui5.types.legend.Common_type} the value of property <code>type</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getType = function() { return new sap.viz.ui5.types.legend.Common_type(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of legend.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>alignment</code>.
 * </p><p>
 * Default value is <code>start</code> 
 * @param {sap.viz.ui5.types.legend.Common_alignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setAlignment = function(oAlignment) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.legend.Common_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string} sFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setFormatString = function(sFormatString) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>isHierarchical</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsHierarchical  new value for property <code>isHierarchical</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setIsHierarchical = function(bIsHierarchical) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>isScrollable</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsScrollable  new value for property <code>isScrollable</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setIsScrollable = function(bIsScrollable) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>position</code>.
 * </p><p>
 * Default value is <code>right</code> 
 * @param {sap.viz.ui5.types.legend.Common_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setPosition = function(oPosition) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.viz.ui5.types.legend.Common_title}
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setTitle = function(oTitle) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>type</code>.
 * </p><p>
 * Default value is <code>ColorLegend</code> 
 * @param {sap.viz.ui5.types.legend.Common_type} oType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setType = function(oType) { return new sap.viz.ui5.types.legend.Common(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.legend.Common(); };


// ---- sap.viz.ui5.types.legend.Common_alignment --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.legend.Common_alignment.toString = function() { return ""; };

// ---- sap.viz.ui5.types.legend.Common_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.legend.Common_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.legend.Common_position --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.legend.Common_position.toString = function() { return ""; };

// ---- sap.viz.ui5.types.legend.Common_title --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/legend/Common_title.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getText text} : string (default: 'null')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for legend title.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.legend.Common_title = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.legend.Common_title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.legend.Common_title.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>text</code>.
 * Set text of legend title.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common_title.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of legend title.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common_title.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.viz.ui5.types.legend.Common_title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common_title.prototype.setText = function(sText) { return new sap.viz.ui5.types.legend.Common_title(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.legend.Common_title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.legend.Common_title.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.legend.Common_title(); };


// ---- sap.viz.ui5.types.legend.Common_type --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.legend.Common_type.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Legend_layout --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Legend_layout.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.Legend_layout_position (default: sap.viz.ui5.types.Legend_layout_position.right)</li>
 * <li>{@link #getPriority priority} : int (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for layout of legend area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Legend_layout = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Legend_layout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Legend_layout.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>position</code>.
 * Set the position of the legend area.
 * </p><p>
 * Default value is <code>right</code>
 * @return {sap.viz.ui5.types.Legend_layout_position} the value of property <code>position</code>
 * @public
 * 
 */
sap.viz.ui5.types.Legend_layout.prototype.getPosition = function() { return new sap.viz.ui5.types.Legend_layout_position(); };

/**
 * 
 * Getter for property <code>priority</code>.
 * Set the priority of the position for the legend area.
 * </p><p>
 * Default value is <code>1</code>
 * @return {int} the value of property <code>priority</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Legend_layout.prototype.getPriority = function() { return 0; };

/**
 * 
 * Setter for property <code>position</code>.
 * </p><p>
 * Default value is <code>right</code> 
 * @param {sap.viz.ui5.types.Legend_layout_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Legend_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Legend_layout.prototype.setPosition = function(oPosition) { return new sap.viz.ui5.types.Legend_layout(); };

/**
 * 
 * Setter for property <code>priority</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {int} iPriority  new value for property <code>priority</code>
 * @return {sap.viz.ui5.types.Legend_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Legend_layout.prototype.setPriority = function(iPriority) { return new sap.viz.ui5.types.Legend_layout(); };


// ---- sap.viz.ui5.types.Legend_layout_position --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Legend_layout_position.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Line --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Line.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Line_drawingEffect (default: sap.viz.ui5.types.Line_drawingEffect.normal)</li>
 * <li>{@link #getWidth width} : int (default: 2)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Line_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Line_animation</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Line_hoverline</li>
 * <li>{@link #getMarker marker} : sap.viz.ui5.types.Line_marker</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Line
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Line = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.destroyHoverline = function() { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Destroys the marker in the aggregation 
 * named <code>marker</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.destroyMarker = function() { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Line.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Line with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Line.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation related properties.
 * @return {sap.viz.ui5.types.Line_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getAnimation = function() { return new sap.viz.ui5.types.Line_animation(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of plotArea.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Line_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Line_drawingEffect(); };

/**
 * 
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for hoverline properties.
 * @return {sap.viz.ui5.types.Line_hoverline}
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getHoverline = function() { return new sap.viz.ui5.types.Line_hoverline(); };

/**
 * 
 * Getter for aggregation <code>marker</code>.<br/>
 * Settings for marker/data point graphics
 * @return {sap.viz.ui5.types.Line_marker}
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getMarker = function() { return new sap.viz.ui5.types.Line_marker(); };

/**
 * 
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set axis 1 color palette for dual chart.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getPrimaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set axis 2 color palette for dual chart.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getSecondaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.Line_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Line.prototype.getToolTip = function() { return new sap.viz.ui5.types.Line_tooltip(); };

/**
 * 
 * Getter for property <code>width</code>.
 * Set width of line, range[1,7]. When beyond the range, the line width is default size 2.
 * </p><p>
 * Default value is <code>2</code>
 * @return {int} the value of property <code>width</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.getWidth = function() { return 0; };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Line_animation}
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Line_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for the aggregated <code>hoverline</code>.
 * @param oHoverline {sap.viz.ui5.types.Line_hoverline}
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setHoverline = function(oHoverline) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for the aggregated <code>marker</code>.
 * @param oMarker {sap.viz.ui5.types.Line_marker}
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setMarker = function(oMarker) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for property <code>primaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setPrimaryValuesColorPalette = function(aPrimaryValuesColorPalette) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for property <code>secondaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setSecondaryValuesColorPalette = function(aSecondaryValuesColorPalette) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Line_tooltip}
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Line.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Line(); };

/**
 * 
 * Setter for property <code>width</code>.
 * </p><p>
 * Default value is <code>2</code> 
 * @param {int} iWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line.prototype.setWidth = function(iWidth) { return new sap.viz.ui5.types.Line(); };


// ---- sap.viz.ui5.types.Line_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Line_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Line_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Line_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Line_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Line_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Line_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Line_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Line_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Line_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Line_animation(); };


// ---- sap.viz.ui5.types.Line_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Line_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Line_hoverline --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Line_hoverline.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for hoverline properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Line_hoverline = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Line_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Line_hoverline.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to enabled/disabled hoverline or not.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_hoverline.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Line_hoverline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_hoverline.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Line_hoverline(); };


// ---- sap.viz.ui5.types.Line_marker --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Line_marker.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getShape shape} : sap.viz.ui5.types.Line_marker_shape (default: sap.viz.ui5.types.Line_marker_shape.circle)</li>
 * <li>{@link #getSize size} : int (default: 6)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for marker/data point graphics
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Line_marker = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Line_marker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Line_marker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>shape</code>.
 * Set marker shapes for chart.
 * </p><p>
 * Default value is <code>circle</code>
 * @return {sap.viz.ui5.types.Line_marker_shape} the value of property <code>shape</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_marker.prototype.getShape = function() { return new sap.viz.ui5.types.Line_marker_shape(); };

/**
 * 
 * Getter for property <code>size</code>.
 * Set marker size of data point, range[4,32]. When beyond the range, the marker size is default size 6.
 * </p><p>
 * Default value is <code>6</code>
 * @return {int} the value of property <code>size</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_marker.prototype.getSize = function() { return 0; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set show marker or not.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_marker.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>shape</code>.
 * </p><p>
 * Default value is <code>circle</code> 
 * @param {sap.viz.ui5.types.Line_marker_shape} oShape  new value for property <code>shape</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_marker.prototype.setShape = function(oShape) { return new sap.viz.ui5.types.Line_marker(); };

/**
 * 
 * Setter for property <code>size</code>.
 * </p><p>
 * Default value is <code>6</code> 
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_marker.prototype.setSize = function(iSize) { return new sap.viz.ui5.types.Line_marker(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_marker.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Line_marker(); };


// ---- sap.viz.ui5.types.Line_marker_shape --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Line_marker_shape.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Line_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Line_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Line_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Line_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Line_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.Line_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Line_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Line_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.Line_tooltip(); };


// ---- sap.viz.ui5.types.Pie --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Pie.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getIsDonut isDonut} : boolean (default: false)</li>
 * <li>{@link #getIsGeoPie isGeoPie} : boolean (default: false)</li>
 * <li>{@link #getValign valign} : sap.viz.ui5.types.Pie_valign (default: sap.viz.ui5.types.Pie_valign.top)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Pie_drawingEffect (default: sap.viz.ui5.types.Pie_drawingEffect.normal)</li>
 * <li>{@link #getPlotScale plotScale} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Pie_animation</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Pie_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Pie
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Pie = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Pie with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Pie.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.Pie_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.getAnimation = function() { return new sap.viz.ui5.types.Pie_animation(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for sectors.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of Pie.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Pie_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Pie_drawingEffect(); };

/**
 * 
 * Getter for property <code>isDonut</code>.
 * Set whether is a donut or pie.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isDonut</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.getIsDonut = function() { return false; };

/**
 * 
 * Getter for property <code>isGeoPie</code>.
 * Set whether is a geo pie.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isGeoPie</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie.prototype.getIsGeoPie = function() { return false; };

/**
 * 
 * Getter for property <code>plotScale</code>.
 * Set plot scale of Pie.
 * </p><p>
 * Default value is <code>1</code>
 * @return {float} the value of property <code>plotScale</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie.prototype.getPlotScale = function() { return 0.0; };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.Pie_tooltip}
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.getToolTip = function() { return new sap.viz.ui5.types.Pie_tooltip(); };

/**
 * 
 * Getter for property <code>valign</code>.
 * Set vertical aligment.
 * </p><p>
 * Default value is <code>top</code>
 * @return {sap.viz.ui5.types.Pie_valign} the value of property <code>valign</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie.prototype.getValign = function() { return new sap.viz.ui5.types.Pie_valign(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Pie_animation}
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Pie_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for property <code>isDonut</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsDonut  new value for property <code>isDonut</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.setIsDonut = function(bIsDonut) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for property <code>isGeoPie</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsGeoPie  new value for property <code>isGeoPie</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie.prototype.setIsGeoPie = function(bIsGeoPie) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for property <code>plotScale</code>.
 * </p><p>
 * Default value is <code>1</code> 
 * @param {float} fPlotScale  new value for property <code>plotScale</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie.prototype.setPlotScale = function(fPlotScale) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Pie_tooltip}
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Pie(); };

/**
 * 
 * Setter for property <code>valign</code>.
 * </p><p>
 * Default value is <code>top</code> 
 * @param {sap.viz.ui5.types.Pie_valign} oValign  new value for property <code>valign</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie.prototype.setValign = function(oValign) { return new sap.viz.ui5.types.Pie(); };


// ---- sap.viz.ui5.types.Pie_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Pie_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Pie_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Pie_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Pie_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Pie_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Pie_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Pie_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Pie_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Pie_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Pie_animation(); };


// ---- sap.viz.ui5.types.Pie_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Pie_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Pie_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Pie_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getValueFormat valueFormat} : string (default: 'n')</li>
 * <li>{@link #getPercentageFormat percentageFormat} : string (default: '.0%')</li>
 * <li>{@link #getFormatString formatString} : string[] (default: ['null'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Pie_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Pie_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Pie_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string of tooltip. The first string is applied to value and the second is applied to percentage.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string[]} the value of property <code>formatString</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.getFormatString = function() { return new Array(); };

/**
 * 
 * Getter for property <code>percentageFormat</code>.
 * Set the number format of percentage label in tooltip.
 * </p><p>
 * Default value is <code>.0%</code>
 * @return {string} the value of property <code>percentageFormat</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.getPercentageFormat = function() { return ""; };

/**
 * 
 * Getter for property <code>valueFormat</code>.
 * Set the number format of measure value in tooltip.
 * </p><p>
 * Default value is <code>n</code>
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.getValueFormat = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set whether tooltip is enabled.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string[]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.setFormatString = function(aFormatString) { return new sap.viz.ui5.types.Pie_tooltip(); };

/**
 * 
 * Setter for property <code>percentageFormat</code>.
 * </p><p>
 * Default value is <code>.0%</code> 
 * @param {string} sPercentageFormat  new value for property <code>percentageFormat</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.setPercentageFormat = function(sPercentageFormat) { return new sap.viz.ui5.types.Pie_tooltip(); };

/**
 * 
 * Setter for property <code>valueFormat</code>.
 * </p><p>
 * Default value is <code>n</code> 
 * @param {string} sValueFormat  new value for property <code>valueFormat</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.setValueFormat = function(sValueFormat) { return new sap.viz.ui5.types.Pie_tooltip(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Pie_tooltip.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Pie_tooltip(); };


// ---- sap.viz.ui5.types.Pie_valign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Pie_valign.toString = function() { return ""; };

// ---- sap.viz.ui5.types.RootContainer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/RootContainer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLayout layout} : sap.viz.ui5.types.RootContainer_layout</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/RootContainer
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.RootContainer = function(sId,mSettings) {};
/**
 * 
 * Destroys the layout in the aggregation 
 * named <code>layout</code>.
 * @return {sap.viz.ui5.types.RootContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer.prototype.destroyLayout = function() { return new sap.viz.ui5.types.RootContainer(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.RootContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.RootContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>layout</code>.<br/>
 * Layout properties
 * @return {sap.viz.ui5.types.RootContainer_layout}
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer.prototype.getLayout = function() { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for the aggregated <code>layout</code>.
 * @param oLayout {sap.viz.ui5.types.RootContainer_layout}
 * @return {sap.viz.ui5.types.RootContainer} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer.prototype.setLayout = function(oLayout) { return new sap.viz.ui5.types.RootContainer(); };


// ---- sap.viz.ui5.types.RootContainer_layout --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/RootContainer_layout.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAdjustPolicy adjustPolicy} : string</li>
 * <li>{@link #getPadding padding} : int (default: 24)</li>
 * <li>{@link #getPaddingTop paddingTop} : int</li>
 * <li>{@link #getPaddingLeft paddingLeft} : int</li>
 * <li>{@link #getPaddingRight paddingRight} : int</li>
 * <li>{@link #getPaddingBottom paddingBottom} : int</li>
 * <li>{@link #getVgap vgap} : int (default: 8)</li>
 * <li>{@link #getHgap hgap} : int (default: 8)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Layout properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.RootContainer_layout = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.RootContainer_layout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.RootContainer_layout.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>adjustPolicy</code>.
 * Indicates the layout adjust policy.
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string} the value of property <code>adjustPolicy</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getAdjustPolicy = function() { return ""; };

/**
 * 
 * Getter for property <code>hgap</code>.
 * Horizontal gap value between UI components
 * </p><p>
 * Default value is <code>8</code>
 * @return {int} the value of property <code>hgap</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getHgap = function() { return 0; };

/**
 * 
 * Getter for property <code>padding</code>.
 * Universal padding value settings. The single value will be applied to all laterals of the chart area. Explicit settings for each edge are supported.
 * </p><p>
 * Default value is <code>24</code>
 * @return {int} the value of property <code>padding</code>
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getPadding = function() { return 0; };

/**
 * 
 * Getter for property <code>paddingBottom</code>.
 * Padding value for the bottom side
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>paddingBottom</code>
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getPaddingBottom = function() { return 0; };

/**
 * 
 * Getter for property <code>paddingLeft</code>.
 * Padding value for the left side
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>paddingLeft</code>
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getPaddingLeft = function() { return 0; };

/**
 * 
 * Getter for property <code>paddingRight</code>.
 * Padding value for the right side
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>paddingRight</code>
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getPaddingRight = function() { return 0; };

/**
 * 
 * Getter for property <code>paddingTop</code>.
 * Padding value for the top side
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {int} the value of property <code>paddingTop</code>
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getPaddingTop = function() { return 0; };

/**
 * 
 * Getter for property <code>vgap</code>.
 * Vertical gap value between UI components
 * </p><p>
 * Default value is <code>8</code>
 * @return {int} the value of property <code>vgap</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.getVgap = function() { return 0; };

/**
 * 
 * Setter for property <code>adjustPolicy</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string} sAdjustPolicy  new value for property <code>adjustPolicy</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setAdjustPolicy = function(sAdjustPolicy) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>hgap</code>.
 * </p><p>
 * Default value is <code>8</code> 
 * @param {int} iHgap  new value for property <code>hgap</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setHgap = function(iHgap) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>padding</code>.
 * </p><p>
 * Default value is <code>24</code> 
 * @param {int} iPadding  new value for property <code>padding</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setPadding = function(iPadding) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>paddingBottom</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iPaddingBottom  new value for property <code>paddingBottom</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setPaddingBottom = function(iPaddingBottom) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>paddingLeft</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iPaddingLeft  new value for property <code>paddingLeft</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setPaddingLeft = function(iPaddingLeft) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>paddingRight</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iPaddingRight  new value for property <code>paddingRight</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setPaddingRight = function(iPaddingRight) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>paddingTop</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {int} iPaddingTop  new value for property <code>paddingTop</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setPaddingTop = function(iPaddingTop) { return new sap.viz.ui5.types.RootContainer_layout(); };

/**
 * 
 * Setter for property <code>vgap</code>.
 * </p><p>
 * Default value is <code>8</code> 
 * @param {int} iVgap  new value for property <code>vgap</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.RootContainer_layout.prototype.setVgap = function(iVgap) { return new sap.viz.ui5.types.RootContainer_layout(); };


// ---- sap.viz.ui5.types.Scatter --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Scatter.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getShapePalette shapePalette} : string[] (default: ['circle','square','diamond','triangleUp','triangleDown','triangleLeft','triangleRight','cross','intersection'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Scatter_drawingEffect (default: sap.viz.ui5.types.Scatter_drawingEffect.normal)</li>
 * <li>{@link #getMarkerSize markerSize} : int (default: 10)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAxisTooltip axisTooltip} : sap.viz.ui5.types.Scatter_axisTooltip</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Scatter_hoverline</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Scatter_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Scatter
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Scatter = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Destroys the axisTooltip in the aggregation 
 * named <code>axisTooltip</code>.
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.destroyAxisTooltip = function() { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.destroyHoverline = function() { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Scatter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Scatter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Set animation of bubble/scatter.
 * @return {sap.viz.ui5.types.Scatter_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getAnimation = function() { return new sap.viz.ui5.types.Scatter_animation(); };

/**
 * 
 * Getter for aggregation <code>axisTooltip</code>.<br/>
 * Set tooltip related properties.
 * @return {sap.viz.ui5.types.Scatter_axisTooltip}
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getAxisTooltip = function() { return new sap.viz.ui5.types.Scatter_axisTooltip(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set marker color of bubble.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Drawing effect of bubble marker.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Scatter_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Scatter_drawingEffect(); };

/**
 * 
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for hoverline properties.
 * @return {sap.viz.ui5.types.Scatter_hoverline}
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getHoverline = function() { return new sap.viz.ui5.types.Scatter_hoverline(); };

/**
 * 
 * Getter for property <code>markerSize</code>.
 * Set marker size of data point. The available range is from 4 to 32.
 * </p><p>
 * Default value is <code>10</code>
 * @return {int} the value of property <code>markerSize</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getMarkerSize = function() { return 0; };

/**
 * 
 * Getter for property <code>shapePalette</code>.
 * Set marker shape of bubble.
 * </p><p>
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code>
 * @return {string[]} the value of property <code>shapePalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.getShapePalette = function() { return new Array(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Scatter_animation}
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>axisTooltip</code>.
 * @param oAxisTooltip {sap.viz.ui5.types.Scatter_axisTooltip}
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setAxisTooltip = function(oAxisTooltip) { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Scatter_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Setter for the aggregated <code>hoverline</code>.
 * @param oHoverline {sap.viz.ui5.types.Scatter_hoverline}
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setHoverline = function(oHoverline) { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Setter for property <code>markerSize</code>.
 * </p><p>
 * Default value is <code>10</code> 
 * @param {int} iMarkerSize  new value for property <code>markerSize</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setMarkerSize = function(iMarkerSize) { return new sap.viz.ui5.types.Scatter(); };

/**
 * 
 * Setter for property <code>shapePalette</code>.
 * </p><p>
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code> 
 * @param {string[]} aShapePalette  new value for property <code>shapePalette</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter.prototype.setShapePalette = function(aShapePalette) { return new sap.viz.ui5.types.Scatter(); };


// ---- sap.viz.ui5.types.Scatter_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Scatter_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set animation of bubble/scatter.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Scatter_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Scatter_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Scatter_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Scatter_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Scatter_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Scatter_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Scatter_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Scatter_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Scatter_animation(); };


// ---- sap.viz.ui5.types.Scatter_axisTooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Scatter_axisTooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFormatString formatString} : string[] (default: ['null'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Set tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Scatter_axisTooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Scatter_axisTooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Scatter_axisTooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string[]} the value of property <code>formatString</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_axisTooltip.prototype.getFormatString = function() { return new Array(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_axisTooltip.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string[]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Scatter_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_axisTooltip.prototype.setFormatString = function(aFormatString) { return new sap.viz.ui5.types.Scatter_axisTooltip(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Scatter_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_axisTooltip.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Scatter_axisTooltip(); };


// ---- sap.viz.ui5.types.Scatter_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Scatter_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Scatter_hoverline --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Scatter_hoverline.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for hoverline properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Scatter_hoverline = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Scatter_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Scatter_hoverline.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set to enabled/disabled hoverline or not.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_hoverline.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Scatter_hoverline} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Scatter_hoverline.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Scatter_hoverline(); };


// ---- sap.viz.ui5.types.StackedVerticalBar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/StackedVerticalBar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.StackedVerticalBar_drawingEffect (default: sap.viz.ui5.types.StackedVerticalBar_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li>
 * <li>{@link #getMode mode} : sap.viz.ui5.types.StackedVerticalBar_mode (default: sap.viz.ui5.types.StackedVerticalBar_mode.comparison)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.StackedVerticalBar_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.StackedVerticalBar_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/StackedVerticalBar
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.StackedVerticalBar = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation}
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getAnimation = function() { return new sap.viz.ui5.types.StackedVerticalBar_animation(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of plotArea.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.StackedVerticalBar_drawingEffect(); };

/**
 * 
 * Getter for property <code>isRoundCorner</code>.
 * Set enable/disable round corner of bar.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getIsRoundCorner = function() { return false; };

/**
 * 
 * Getter for property <code>mode</code>.
 * Set dispaly mode of stacked vertical bar.
 * </p><p>
 * Default value is <code>comparison</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_mode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getMode = function() { return new sap.viz.ui5.types.StackedVerticalBar_mode(); };

/**
 * 
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set axis 1 color palette for dual chart.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getPrimaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set axis 2 color palette for dual chart.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getSecondaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.StackedVerticalBar_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.getToolTip = function() { return new sap.viz.ui5.types.StackedVerticalBar_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.StackedVerticalBar_animation}
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.StackedVerticalBar_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for property <code>isRoundCorner</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setIsRoundCorner = function(bIsRoundCorner) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for property <code>mode</code>.
 * </p><p>
 * Default value is <code>comparison</code> 
 * @param {sap.viz.ui5.types.StackedVerticalBar_mode} oMode  new value for property <code>mode</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setMode = function(oMode) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for property <code>primaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setPrimaryValuesColorPalette = function(aPrimaryValuesColorPalette) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for property <code>secondaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setSecondaryValuesColorPalette = function(aSecondaryValuesColorPalette) { return new sap.viz.ui5.types.StackedVerticalBar(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.StackedVerticalBar_tooltip}
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.StackedVerticalBar.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.StackedVerticalBar(); };


// ---- sap.viz.ui5.types.StackedVerticalBar_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/StackedVerticalBar_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.StackedVerticalBar_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.StackedVerticalBar_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.StackedVerticalBar_animation(); };


// ---- sap.viz.ui5.types.StackedVerticalBar_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.StackedVerticalBar_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.StackedVerticalBar_mode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.StackedVerticalBar_mode.toString = function() { return ""; };

// ---- sap.viz.ui5.types.StackedVerticalBar_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/StackedVerticalBar_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.StackedVerticalBar_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.StackedVerticalBar_tooltip(); };


// ---- sap.viz.ui5.types.Title --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Title.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getText text} : string (default: 'null')</li>
 * <li>{@link #getAlignment alignment} : sap.viz.ui5.types.Title_alignment (default: sap.viz.ui5.types.Title_alignment.center)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLayout layout} : sap.viz.ui5.types.Title_layout</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Title
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Title = function(sId,mSettings) {};
/**
 * 
 * Destroys the layout in the aggregation 
 * named <code>layout</code>.
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Title.prototype.destroyLayout = function() { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Title.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>alignment</code>.
 * Set chart title alignment.
 * </p><p>
 * Default value is <code>center</code>
 * @return {sap.viz.ui5.types.Title_alignment} the value of property <code>alignment</code>
 * @public
 * 
 */
sap.viz.ui5.types.Title.prototype.getAlignment = function() { return new sap.viz.ui5.types.Title_alignment(); };

/**
 * 
 * Getter for aggregation <code>layout</code>.<br/>
 * Settings for layout of title.
 * @return {sap.viz.ui5.types.Title_layout}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Title.prototype.getLayout = function() { return new sap.viz.ui5.types.Title_layout(); };

/**
 * 
 * Getter for property <code>text</code>.
 * Set chart title text.
 * </p><p>
 * Default value is <code>null</code>
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.viz.ui5.types.Title.prototype.getText = function() { return ""; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of chart title.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Title.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>alignment</code>.
 * </p><p>
 * Default value is <code>center</code> 
 * @param {sap.viz.ui5.types.Title_alignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Title.prototype.setAlignment = function(oAlignment) { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Setter for the aggregated <code>layout</code>.
 * @param oLayout {sap.viz.ui5.types.Title_layout}
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Title.prototype.setLayout = function(oLayout) { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Setter for property <code>text</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Title.prototype.setText = function(sText) { return new sap.viz.ui5.types.Title(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Title.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Title(); };


// ---- sap.viz.ui5.types.Title_alignment --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Title_alignment.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Title_layout --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Title_layout.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPosition position} : string (default: 'right')</li>
 * <li>{@link #getPriority priority} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for layout of title.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Title_layout = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Title_layout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Title_layout.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>position</code>.
 * Set the position of the title.
 * </p><p>
 * Default value is <code>right</code>
 * @return {string} the value of property <code>position</code>
 * @public
 * 
 */
sap.viz.ui5.types.Title_layout.prototype.getPosition = function() { return ""; };

/**
 * 
 * Getter for property <code>priority</code>.
 * Set the priority of the position for the title.
 * </p><p>
 * Default value is <code>0</code>
 * @return {int} the value of property <code>priority</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Title_layout.prototype.getPriority = function() { return 0; };

/**
 * 
 * Setter for property <code>position</code>.
 * </p><p>
 * Default value is <code>right</code> 
 * @param {string} sPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Title_layout} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Title_layout.prototype.setPosition = function(sPosition) { return new sap.viz.ui5.types.Title_layout(); };

/**
 * 
 * Setter for property <code>priority</code>.
 * </p><p>
 * Default value is <code>0</code> 
 * @param {int} iPriority  new value for property <code>priority</code>
 * @return {sap.viz.ui5.types.Title_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Title_layout.prototype.setPriority = function(iPriority) { return new sap.viz.ui5.types.Title_layout(); };


// ---- sap.viz.ui5.types.Tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Tooltip_drawingEffect (default: sap.viz.ui5.types.Tooltip_drawingEffect.normal)</li>
 * <li>{@link #getFormatString formatString} : any[][] (default: [[null]])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of Tooltip.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.Tooltip_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.Tooltip.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.Tooltip_drawingEffect(); };

/**
 * 
 * Getter for property <code>formatString</code>.
 * Set format string of tooltip. As we may have dual axis with serveral measures, the first array is applied to primary axis and the second one is applied to the second one.If the length of format string list is less than the length of data series, the last format string in the list will be applied to exceeded data series.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.The following is a simple sample format string for tooltip as one chart has two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
 * </p><p>
 * Default value is <code>null</code>
 * @return {any[][]} the value of property <code>formatString</code>
 * @public
 * 
 */
sap.viz.ui5.types.Tooltip.prototype.getFormatString = function() { return new Array(); };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Tooltip.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.Tooltip_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Tooltip.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Setter for property <code>formatString</code>.
 * </p><p>
 * Default value is <code>null</code> 
 * @param {any[][]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Tooltip.prototype.setFormatString = function(aFormatString) { return new sap.viz.ui5.types.Tooltip(); };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Tooltip.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Tooltip(); };


// ---- sap.viz.ui5.types.Tooltip_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.Tooltip_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.Treemap --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Treemap.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartColor startColor} : string (default: '#C2E3A9')</li>
 * <li>{@link #getEndColor endColor} : string (default: '#73C03C')</li>
 * <li>{@link #getColorPalette colorPalette} : string[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBorder border} : sap.viz.ui5.types.Treemap_border</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Treemap_animation</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Treemap_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/Treemap
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Treemap = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Destroys the border in the aggregation 
 * named <code>border</code>.
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.destroyBorder = function() { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Treemap.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Treemap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Treemap.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.Treemap_animation}
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.getAnimation = function() { return new sap.viz.ui5.types.Treemap_animation(); };

/**
 * 
 * Getter for aggregation <code>border</code>.<br/>
 * Settings for border.
 * @return {sap.viz.ui5.types.Treemap_border}
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.getBorder = function() { return new sap.viz.ui5.types.Treemap_border(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for sectors. For example, ["#748CB2","#9CC677","#EACF5E","#F9AD79","#D16A7C"].
 * </p><p>
 * Default value is empty/<code>undefined</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>endColor</code>.
 * Set treeMap endColor.
 * </p><p>
 * Default value is <code>#73C03C</code>
 * @return {string} the value of property <code>endColor</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.getEndColor = function() { return ""; };

/**
 * 
 * Getter for property <code>startColor</code>.
 * Set treeMap startColor.
 * </p><p>
 * Default value is <code>#C2E3A9</code>
 * @return {string} the value of property <code>startColor</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.getStartColor = function() { return ""; };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip.
 * @return {sap.viz.ui5.types.Treemap_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Treemap.prototype.getToolTip = function() { return new sap.viz.ui5.types.Treemap_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.Treemap_animation}
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>border</code>.
 * @param oBorder {sap.viz.ui5.types.Treemap_border}
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.setBorder = function(oBorder) { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is empty/<code>undefined</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Setter for property <code>endColor</code>.
 * </p><p>
 * Default value is <code>#73C03C</code> 
 * @param {string} sEndColor  new value for property <code>endColor</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.setEndColor = function(sEndColor) { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Setter for property <code>startColor</code>.
 * </p><p>
 * Default value is <code>#C2E3A9</code> 
 * @param {string} sStartColor  new value for property <code>startColor</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap.prototype.setStartColor = function(sStartColor) { return new sap.viz.ui5.types.Treemap(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.Treemap_tooltip}
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Treemap.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.Treemap(); };


// ---- sap.viz.ui5.types.Treemap_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Treemap_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Treemap_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Treemap_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Treemap_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Treemap_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.Treemap_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Treemap_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.Treemap_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Treemap_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.Treemap_animation(); };


// ---- sap.viz.ui5.types.Treemap_border --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Treemap_border.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for border.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.Treemap_border = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Treemap_border with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Treemap_border.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>visible</code>.
 * Set visibility of zone edge.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_border.prototype.getVisible = function() { return false; };

/**
 * 
 * Setter for property <code>visible</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Treemap_border} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_border.prototype.setVisible = function(bVisible) { return new sap.viz.ui5.types.Treemap_border(); };


// ---- sap.viz.ui5.types.Treemap_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/Treemap_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.Treemap_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.Treemap_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.Treemap_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Treemap_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.Treemap_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.Treemap_tooltip(); };


// ---- sap.viz.ui5.types.VerticalBar --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/VerticalBar.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.VerticalBar_drawingEffect (default: sap.viz.ui5.types.VerticalBar_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.VerticalBar_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.VerticalBar_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/VerticalBar
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.VerticalBar = function(sId,mSettings) {};
/**
 * 
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.destroyAnimation = function() { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.destroyToolTip = function() { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.VerticalBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.VerticalBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animation of plot area.
 * @return {sap.viz.ui5.types.VerticalBar_animation}
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getAnimation = function() { return new sap.viz.ui5.types.VerticalBar_animation(); };

/**
 * 
 * Getter for property <code>colorPalette</code>.
 * Set color palette for non-dual chart. Or dual chart's color palette when MND is not fed on legend color.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>drawingEffect</code>.
 * Set drawing effect of plotArea.
 * </p><p>
 * Default value is <code>normal</code>
 * @return {sap.viz.ui5.types.VerticalBar_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getDrawingEffect = function() { return new sap.viz.ui5.types.VerticalBar_drawingEffect(); };

/**
 * 
 * Getter for property <code>isRoundCorner</code>.
 * Set enable/disable round corner of bar.
 * </p><p>
 * Default value is <code>false</code>
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getIsRoundCorner = function() { return false; };

/**
 * 
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set axis 1 color palette for dual chart.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getPrimaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set axis 2 color palette for dual chart.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getSecondaryValuesColorPalette = function() { return new Array(); };

/**
 * 
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties.
 * @return {sap.viz.ui5.types.VerticalBar_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.getToolTip = function() { return new sap.viz.ui5.types.VerticalBar_tooltip(); };

/**
 * 
 * Setter for the aggregated <code>animation</code>.
 * @param oAnimation {sap.viz.ui5.types.VerticalBar_animation}
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setAnimation = function(oAnimation) { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Setter for property <code>colorPalette</code>.
 * </p><p>
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setColorPalette = function(aColorPalette) { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Setter for property <code>drawingEffect</code>.
 * </p><p>
 * Default value is <code>normal</code> 
 * @param {sap.viz.ui5.types.VerticalBar_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setDrawingEffect = function(oDrawingEffect) { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Setter for property <code>isRoundCorner</code>.
 * </p><p>
 * Default value is <code>false</code> 
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setIsRoundCorner = function(bIsRoundCorner) { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Setter for property <code>primaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setPrimaryValuesColorPalette = function(aPrimaryValuesColorPalette) { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Setter for property <code>secondaryValuesColorPalette</code>.
 * </p><p>
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setSecondaryValuesColorPalette = function(aSecondaryValuesColorPalette) { return new sap.viz.ui5.types.VerticalBar(); };

/**
 * 
 * Setter for the aggregated <code>toolTip</code>.
 * @param oToolTip {sap.viz.ui5.types.VerticalBar_tooltip}
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.VerticalBar.prototype.setToolTip = function(oToolTip) { return new sap.viz.ui5.types.VerticalBar(); };


// ---- sap.viz.ui5.types.VerticalBar_animation --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/VerticalBar_animation.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for animation of plot area.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.VerticalBar_animation = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.VerticalBar_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>dataLoading</code>.
 * Set enable/disable data loading animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.prototype.getDataLoading = function() { return false; };

/**
 * 
 * Getter for property <code>dataUpdating</code>.
 * Set enable/disable data updating animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.prototype.getDataUpdating = function() { return false; };

/**
 * 
 * Getter for property <code>resizing</code>.
 * Set enable/disable resizing animation of plot area.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.prototype.getResizing = function() { return false; };

/**
 * 
 * Setter for property <code>dataLoading</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.VerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.prototype.setDataLoading = function(bDataLoading) { return new sap.viz.ui5.types.VerticalBar_animation(); };

/**
 * 
 * Setter for property <code>dataUpdating</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.VerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.prototype.setDataUpdating = function(bDataUpdating) { return new sap.viz.ui5.types.VerticalBar_animation(); };

/**
 * 
 * Setter for property <code>resizing</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.VerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_animation.prototype.setResizing = function(bResizing) { return new sap.viz.ui5.types.VerticalBar_animation(); };


// ---- sap.viz.ui5.types.VerticalBar_drawingEffect --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.viz.ui5.types.VerticalBar_drawingEffect.toString = function() { return ""; };

// ---- sap.viz.ui5.types.VerticalBar_tooltip --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/VerticalBar_tooltip.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Settings for tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * 
 */
sap.viz.ui5.types.VerticalBar_tooltip = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.VerticalBar_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.VerticalBar_tooltip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Getter for property <code>enabled</code>.
 * Set enabled/disabled tooltip.
 * </p><p>
 * Default value is <code>true</code>
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_tooltip.prototype.getEnabled = function() { return false; };

/**
 * 
 * Setter for property <code>enabled</code>.
 * </p><p>
 * Default value is <code>true</code> 
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.VerticalBar_tooltip} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.viz.ui5.types.VerticalBar_tooltip.prototype.setEnabled = function(bEnabled) { return new sap.viz.ui5.types.VerticalBar_tooltip(); };


// ---- sap.viz.ui5.types.XYContainer --------------------------------------------------------------------------

/**
 * 
 * Constructor for a new ui5/types/XYContainer.
 * </p><p>
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * </p><p>
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 * </p><p>
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 * </p><p>
 * </p><p>
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * @class
 * Module ui5/types/XYContainer
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.15.1-SNAPSHOT
 * @constructor   
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * 
 */
sap.viz.ui5.types.XYContainer = function(sId,mSettings) {};
/**
 * 
 * Creates a new subclass of class sap.viz.ui5.types.XYContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * </p><p>
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * 
 */
sap.viz.ui5.types.XYContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- sap.viz.ui5.types.Area_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Area_drawingEffect
 */
sap.viz.ui5.types.Area_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Area_drawingEffect
 */
sap.viz.ui5.types.Area_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.Area_marker_shape --------------------------------------------------------------------------

/**
 * 
 * Value circle 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.circle = null;

/**
 * 
 * Value cross 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.cross = null;

/**
 * 
 * Value diamond 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.diamond = null;

/**
 * 
 * Value intersection 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.intersection = null;

/**
 * 
 * Value triangleDown 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.triangleDown = null;

/**
 * 
 * Value triangleLeft 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.triangleLeft = null;

/**
 * 
 * Value triangleRight 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.triangleRight = null;

/**
 * 
 * Value triangleUp 
 * @public
 * @memberOf sap.viz.ui5.types.Area_marker_shape
 */
sap.viz.ui5.types.Area_marker_shape.triangleUp = null;


// ---- sap.viz.ui5.types.Area_mode --------------------------------------------------------------------------

/**
 * 
 * Value comparison 
 * @public
 * @memberOf sap.viz.ui5.types.Area_mode
 */
sap.viz.ui5.types.Area_mode.comparison = null;

/**
 * 
 * Value percentage 
 * @public
 * @memberOf sap.viz.ui5.types.Area_mode
 */
sap.viz.ui5.types.Area_mode.percentage = null;


// ---- sap.viz.ui5.types.Area_orientation --------------------------------------------------------------------------

/**
 * 
 * Value horizontal 
 * @public
 * @memberOf sap.viz.ui5.types.Area_orientation
 */
sap.viz.ui5.types.Area_orientation.horizontal = null;

/**
 * 
 * Value vertical 
 * @public
 * @memberOf sap.viz.ui5.types.Area_orientation
 */
sap.viz.ui5.types.Area_orientation.vertical = null;


// ---- sap.viz.ui5.types.Axis_gridline_type --------------------------------------------------------------------------

/**
 * 
 * Value dotted 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_gridline_type
 */
sap.viz.ui5.types.Axis_gridline_type.dotted = null;

/**
 * 
 * Value incised 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_gridline_type
 */
sap.viz.ui5.types.Axis_gridline_type.incised = null;

/**
 * 
 * Value line 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_gridline_type
 */
sap.viz.ui5.types.Axis_gridline_type.line = null;


// ---- sap.viz.ui5.types.Axis_position --------------------------------------------------------------------------

/**
 * 
 * Value bottom 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_position
 */
sap.viz.ui5.types.Axis_position.bottom = null;

/**
 * 
 * Value left 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_position
 */
sap.viz.ui5.types.Axis_position.left = null;

/**
 * 
 * Value right 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_position
 */
sap.viz.ui5.types.Axis_position.right = null;

/**
 * 
 * Value top 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_position
 */
sap.viz.ui5.types.Axis_position.top = null;


// ---- sap.viz.ui5.types.Axis_type --------------------------------------------------------------------------

/**
 * 
 * Value category 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_type
 */
sap.viz.ui5.types.Axis_type.category = null;

/**
 * 
 * Value value 
 * @public
 * @memberOf sap.viz.ui5.types.Axis_type
 */
sap.viz.ui5.types.Axis_type.value = null;


// ---- sap.viz.ui5.types.Background_direction --------------------------------------------------------------------------

/**
 * 
 * Value horizontal 
 * @public
 * @memberOf sap.viz.ui5.types.Background_direction
 */
sap.viz.ui5.types.Background_direction.horizontal = null;

/**
 * 
 * Value vertical 
 * @public
 * @memberOf sap.viz.ui5.types.Background_direction
 */
sap.viz.ui5.types.Background_direction.vertical = null;


// ---- sap.viz.ui5.types.Background_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Background_drawingEffect
 */
sap.viz.ui5.types.Background_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Background_drawingEffect
 */
sap.viz.ui5.types.Background_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.Bar_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Bar_drawingEffect
 */
sap.viz.ui5.types.Bar_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Bar_drawingEffect
 */
sap.viz.ui5.types.Bar_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.Bubble_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Bubble_drawingEffect
 */
sap.viz.ui5.types.Bubble_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Bubble_drawingEffect
 */
sap.viz.ui5.types.Bubble_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.Combination_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Combination_drawingEffect
 */
sap.viz.ui5.types.Combination_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Combination_drawingEffect
 */
sap.viz.ui5.types.Combination_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.controller.Interaction_selectability_mode --------------------------------------------------------------------------

/**
 * 
 * Value multiple 
 * @public
 * @memberOf sap.viz.ui5.types.controller.Interaction_selectability_mode
 */
sap.viz.ui5.types.controller.Interaction_selectability_mode.multiple = null;

/**
 * 
 * Value none 
 * @public
 * @memberOf sap.viz.ui5.types.controller.Interaction_selectability_mode
 */
sap.viz.ui5.types.controller.Interaction_selectability_mode.none = null;

/**
 * 
 * Value single 
 * @public
 * @memberOf sap.viz.ui5.types.controller.Interaction_selectability_mode
 */
sap.viz.ui5.types.controller.Interaction_selectability_mode.single = null;


// ---- sap.viz.ui5.types.Datalabel_orientation --------------------------------------------------------------------------

/**
 * 
 * Value horizontal 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_orientation
 */
sap.viz.ui5.types.Datalabel_orientation.horizontal = null;

/**
 * 
 * Value vertical 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_orientation
 */
sap.viz.ui5.types.Datalabel_orientation.vertical = null;


// ---- sap.viz.ui5.types.Datalabel_outsidePosition --------------------------------------------------------------------------

/**
 * 
 * Value down 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_outsidePosition
 */
sap.viz.ui5.types.Datalabel_outsidePosition.down = null;

/**
 * 
 * Value left 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_outsidePosition
 */
sap.viz.ui5.types.Datalabel_outsidePosition.left = null;

/**
 * 
 * Value right 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_outsidePosition
 */
sap.viz.ui5.types.Datalabel_outsidePosition.right = null;

/**
 * 
 * Value up 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_outsidePosition
 */
sap.viz.ui5.types.Datalabel_outsidePosition.up = null;


// ---- sap.viz.ui5.types.Datalabel_paintingMode --------------------------------------------------------------------------

/**
 * 
 * Value polarCoordinate 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_paintingMode
 */
sap.viz.ui5.types.Datalabel_paintingMode.polarCoordinate = null;

/**
 * 
 * Value rectCoordinate 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_paintingMode
 */
sap.viz.ui5.types.Datalabel_paintingMode.rectCoordinate = null;


// ---- sap.viz.ui5.types.Datalabel_position --------------------------------------------------------------------------

/**
 * 
 * Value inside 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_position
 */
sap.viz.ui5.types.Datalabel_position.inside = null;

/**
 * 
 * Value outside 
 * @public
 * @memberOf sap.viz.ui5.types.Datalabel_position
 */
sap.viz.ui5.types.Datalabel_position.outside = null;


// ---- sap.viz.ui5.types.legend.Common_alignment --------------------------------------------------------------------------

/**
 * 
 * Value end 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_alignment
 */
sap.viz.ui5.types.legend.Common_alignment.end = null;

/**
 * 
 * Value middle 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_alignment
 */
sap.viz.ui5.types.legend.Common_alignment.middle = null;

/**
 * 
 * Value start 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_alignment
 */
sap.viz.ui5.types.legend.Common_alignment.start = null;


// ---- sap.viz.ui5.types.legend.Common_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_drawingEffect
 */
sap.viz.ui5.types.legend.Common_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_drawingEffect
 */
sap.viz.ui5.types.legend.Common_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.legend.Common_position --------------------------------------------------------------------------

/**
 * 
 * Value bottom 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_position
 */
sap.viz.ui5.types.legend.Common_position.bottom = null;

/**
 * 
 * Value left 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_position
 */
sap.viz.ui5.types.legend.Common_position.left = null;

/**
 * 
 * Value right 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_position
 */
sap.viz.ui5.types.legend.Common_position.right = null;

/**
 * 
 * Value top 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_position
 */
sap.viz.ui5.types.legend.Common_position.top = null;


// ---- sap.viz.ui5.types.legend.Common_type --------------------------------------------------------------------------

/**
 * 
 * Value BubbleColorLegend 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_type
 */
sap.viz.ui5.types.legend.Common_type.BubbleColorLegend = null;

/**
 * 
 * Value ColorLegend 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_type
 */
sap.viz.ui5.types.legend.Common_type.ColorLegend = null;

/**
 * 
 * Value MeasureBasedColoringLegend 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_type
 */
sap.viz.ui5.types.legend.Common_type.MeasureBasedColoringLegend = null;

/**
 * 
 * Value SizeLegend 
 * @public
 * @memberOf sap.viz.ui5.types.legend.Common_type
 */
sap.viz.ui5.types.legend.Common_type.SizeLegend = null;


// ---- sap.viz.ui5.types.Legend_layout_position --------------------------------------------------------------------------

/**
 * 
 * Value bottom 
 * @public
 * @memberOf sap.viz.ui5.types.Legend_layout_position
 */
sap.viz.ui5.types.Legend_layout_position.bottom = null;

/**
 * 
 * Value left 
 * @public
 * @memberOf sap.viz.ui5.types.Legend_layout_position
 */
sap.viz.ui5.types.Legend_layout_position.left = null;

/**
 * 
 * Value right 
 * @public
 * @memberOf sap.viz.ui5.types.Legend_layout_position
 */
sap.viz.ui5.types.Legend_layout_position.right = null;

/**
 * 
 * Value top 
 * @public
 * @memberOf sap.viz.ui5.types.Legend_layout_position
 */
sap.viz.ui5.types.Legend_layout_position.top = null;


// ---- sap.viz.ui5.types.Line_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Line_drawingEffect
 */
sap.viz.ui5.types.Line_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Line_drawingEffect
 */
sap.viz.ui5.types.Line_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.Line_marker_shape --------------------------------------------------------------------------

/**
 * 
 * Value circle 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.circle = null;

/**
 * 
 * Value cross 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.cross = null;

/**
 * 
 * Value diamond 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.diamond = null;

/**
 * 
 * Value intersection 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.intersection = null;

/**
 * 
 * Value triangleDown 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.triangleDown = null;

/**
 * 
 * Value triangleLeft 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.triangleLeft = null;

/**
 * 
 * Value triangleRight 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.triangleRight = null;

/**
 * 
 * Value triangleUp 
 * @public
 * @memberOf sap.viz.ui5.types.Line_marker_shape
 */
sap.viz.ui5.types.Line_marker_shape.triangleUp = null;


// ---- sap.viz.ui5.types.Pie_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Pie_drawingEffect
 */
sap.viz.ui5.types.Pie_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Pie_drawingEffect
 */
sap.viz.ui5.types.Pie_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.Pie_valign --------------------------------------------------------------------------

/**
 * 
 * Value center 
 * @public
 * @memberOf sap.viz.ui5.types.Pie_valign
 */
sap.viz.ui5.types.Pie_valign.center = null;

/**
 * 
 * Value top 
 * @public
 * @memberOf sap.viz.ui5.types.Pie_valign
 */
sap.viz.ui5.types.Pie_valign.top = null;


// ---- sap.viz.ui5.types.Scatter_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Scatter_drawingEffect
 */
sap.viz.ui5.types.Scatter_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Scatter_drawingEffect
 */
sap.viz.ui5.types.Scatter_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.StackedVerticalBar_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.StackedVerticalBar_drawingEffect
 */
sap.viz.ui5.types.StackedVerticalBar_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.StackedVerticalBar_drawingEffect
 */
sap.viz.ui5.types.StackedVerticalBar_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.StackedVerticalBar_mode --------------------------------------------------------------------------

/**
 * 
 * Value comparison 
 * @public
 * @memberOf sap.viz.ui5.types.StackedVerticalBar_mode
 */
sap.viz.ui5.types.StackedVerticalBar_mode.comparison = null;

/**
 * 
 * Value percentage 
 * @public
 * @memberOf sap.viz.ui5.types.StackedVerticalBar_mode
 */
sap.viz.ui5.types.StackedVerticalBar_mode.percentage = null;


// ---- sap.viz.ui5.types.Title_alignment --------------------------------------------------------------------------

/**
 * 
 * Value center 
 * @public
 * @memberOf sap.viz.ui5.types.Title_alignment
 */
sap.viz.ui5.types.Title_alignment.center = null;

/**
 * 
 * Value left 
 * @public
 * @memberOf sap.viz.ui5.types.Title_alignment
 */
sap.viz.ui5.types.Title_alignment.left = null;

/**
 * 
 * Value right 
 * @public
 * @memberOf sap.viz.ui5.types.Title_alignment
 */
sap.viz.ui5.types.Title_alignment.right = null;


// ---- sap.viz.ui5.types.Tooltip_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.Tooltip_drawingEffect
 */
sap.viz.ui5.types.Tooltip_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.Tooltip_drawingEffect
 */
sap.viz.ui5.types.Tooltip_drawingEffect.normal = null;


// ---- sap.viz.ui5.types.VerticalBar_drawingEffect --------------------------------------------------------------------------

/**
 * 
 * Value glossy 
 * @public
 * @memberOf sap.viz.ui5.types.VerticalBar_drawingEffect
 */
sap.viz.ui5.types.VerticalBar_drawingEffect.glossy = null;

/**
 * 
 * Value normal 
 * @public
 * @memberOf sap.viz.ui5.types.VerticalBar_drawingEffect
 */
sap.viz.ui5.types.VerticalBar_drawingEffect.normal = null;

