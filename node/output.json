[
  {
    "description": "Returns invalid date value of UI5 according to TimeZone\rYou can use this value to check return value of date parser method",
    "returns": [
      {
        "type": {
          "names": [
            "Date"
          ]
        },
        "description": "JS Date Object ( e.g for Germany new Date(-360000) )"
      }
    ],
    "since": "1.10",
    "memberof": "sap.m",
    "name": "getInvalidDate",
    "longname": "sap.m.getInvalidDate",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.getInvalidDate"
  },
  {
    "description": "Finds default locale settings once and returns always the same.\rWe should not need to create new instance to get same locale settings\rThis method keep the locale instance in the scope and returns the same after first run",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "sap.ui.core.Locale instane"
      }
    ],
    "since": "1.10",
    "memberof": "sap.m",
    "name": "getLocale",
    "longname": "sap.m.getLocale",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.getLocale"
  },
  {
    "description": "Finds default locale data once and returns always the same",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "sap.ui.core.LocaleData instance"
      }
    ],
    "since": "1.10",
    "memberof": "sap.m",
    "name": "getLocaleData",
    "longname": "sap.m.getLocaleData",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.getLocaleData"
  },
  {
    "description": "Checks if the given parameter is a valid JsDate Object",
    "params": [
      {
        "description": "Any variable to test.",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "since": "1.10",
    "memberof": "sap.m",
    "name": "isDate",
    "longname": "sap.m.isDate",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.isDate"
  },
  {
    "description": "Constructor for a new ActionListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ActionListItem should be used to fire actions when tapped.",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "ActionListItem",
    "longname": "sap.m.ActionListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ActionListItem"
  },
  {
    "description": "Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ActionListItem.extend",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "codeName": "sap.m.ActionListItem.extend"
  },
  {
    "description": "Getter for property <code>text</code>.\rText of the action list item.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.ActionListItem#getText",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "codeName": "sap.m.ActionListItem.prototype.getText"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.ActionListItem#setText",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "codeName": "sap.m.ActionListItem.prototype.setText"
  },
  {
    "description": "Constructor for a new ActionSheet.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>\r<li>{@link #getShowCancelButton showCancelButton} : boolean (default: true)</li>\r<li>{@link #getCancelButtonText cancelButtonText} : string</li>\r<li>{@link #getTitle title} : string</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ActionSheet#event:cancelButtonTap cancelButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ActionSheet#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ActionSheet#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ActionSheet#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ActionSheet#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ActionSheet#event:cancelButtonPress cancelButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.9.1",
    "name": "ActionSheet",
    "longname": "sap.m.ActionSheet",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ActionSheet"
  },
  {
    "description": "This event will be fired after the ActionSheet is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterClose",
    "longname": "sap.m.ActionSheet#event:afterClose",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.afterClose"
  },
  {
    "description": "This event will be fired after the ActionSheet is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterOpen",
    "longname": "sap.m.ActionSheet#event:afterOpen",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.afterOpen"
  },
  {
    "description": "This event will be fired before the ActionSheet is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeClose",
    "longname": "sap.m.ActionSheet#event:beforeClose",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.beforeClose"
  },
  {
    "description": "This event will be fired before the ActionSheet is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeOpen",
    "longname": "sap.m.ActionSheet#event:beforeOpen",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.beforeOpen"
  },
  {
    "description": "This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "cancelButtonPress",
    "longname": "sap.m.ActionSheet#event:cancelButtonPress",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.cancelButtonPress"
  },
  {
    "description": "This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "cancelButtonTap",
    "longname": "sap.m.ActionSheet#event:cancelButtonTap",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.cancelButtonTap"
  },
  {
    "description": "Adds some button <code>oButton</code> \rto the aggregation named <code>buttons</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the button to add; if empty, nothing is inserted",
        "name": "oButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addButton",
    "longname": "sap.m.ActionSheet#addButton",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.addButton"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. \r</p><p>\rThis event will be fired after the ActionSheet is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterClose",
    "longname": "sap.m.ActionSheet#attachAfterClose",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.attachAfterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. \r</p><p>\rThis event will be fired after the ActionSheet is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterOpen",
    "longname": "sap.m.ActionSheet#attachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.attachAfterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. \r</p><p>\rThis event will be fired before the ActionSheet is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeClose",
    "longname": "sap.m.ActionSheet#attachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.attachBeforeClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. \r</p><p>\rThis event will be fired before the ActionSheet is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeOpen",
    "longname": "sap.m.ActionSheet#attachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.attachBeforeOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. \r</p><p>\rThis event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachCancelButtonPress",
    "longname": "sap.m.ActionSheet#attachCancelButtonPress",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.attachCancelButtonPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. \r</p><p>\rThis event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachCancelButtonTap",
    "longname": "sap.m.ActionSheet#attachCancelButtonTap",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.attachCancelButtonTap"
  },
  {
    "description": "Calling this method will make the ActionSheet disappear from the screen.",
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "close",
    "longname": "sap.m.ActionSheet#close",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.close"
  },
  {
    "description": "Destroys all the buttons in the aggregation \rnamed <code>buttons</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyButtons",
    "longname": "sap.m.ActionSheet#destroyButtons",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.destroyButtons"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterClose",
    "longname": "sap.m.ActionSheet#detachAfterClose",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.detachAfterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterOpen",
    "longname": "sap.m.ActionSheet#detachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.detachAfterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeClose",
    "longname": "sap.m.ActionSheet#detachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.detachBeforeClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeOpen",
    "longname": "sap.m.ActionSheet#detachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.detachBeforeOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'cancelButtonPress' event of this <code>sap.m.ActionSheet</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachCancelButtonPress",
    "longname": "sap.m.ActionSheet#detachCancelButtonPress",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.detachCancelButtonPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachCancelButtonTap",
    "longname": "sap.m.ActionSheet#detachCancelButtonTap",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.detachCancelButtonTap"
  },
  {
    "description": "Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ActionSheet.extend",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "codeName": "sap.m.ActionSheet.extend"
  },
  {
    "description": "Fire event afterClose to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterClose",
    "longname": "sap.m.ActionSheet#fireAfterClose",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.fireAfterClose"
  },
  {
    "description": "Fire event afterOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterOpen",
    "longname": "sap.m.ActionSheet#fireAfterOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.fireAfterOpen"
  },
  {
    "description": "Fire event beforeClose to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeClose",
    "longname": "sap.m.ActionSheet#fireBeforeClose",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.fireBeforeClose"
  },
  {
    "description": "Fire event beforeOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeOpen",
    "longname": "sap.m.ActionSheet#fireBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.fireBeforeOpen"
  },
  {
    "description": "Fire event cancelButtonPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireCancelButtonPress",
    "longname": "sap.m.ActionSheet#fireCancelButtonPress",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.fireCancelButtonPress"
  },
  {
    "description": "Fire event cancelButtonTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireCancelButtonTap",
    "longname": "sap.m.ActionSheet#fireCancelButtonTap",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.fireCancelButtonTap"
  },
  {
    "description": "Getter for aggregation <code>buttons</code>.<br/>\rThese buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Button>"
          ]
        }
      }
    ],
    "name": "getButtons",
    "longname": "sap.m.ActionSheet#getButtons",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.getButtons"
  },
  {
    "description": "Getter for property <code>cancelButtonText</code>.\rThis is the text displayed in the cancelButton. Default value is \"Cancel\", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>cancelButtonText</code>"
      }
    ],
    "name": "getCancelButtonText",
    "longname": "sap.m.ActionSheet#getCancelButtonText",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.getCancelButtonText"
  },
  {
    "description": "Getter for property <code>placement</code>.\rThe ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Bottom.\r</p><p>\rDefault value is <code>Bottom</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PlacementType"
          ]
        },
        "description": "the value of property <code>placement</code>"
      }
    ],
    "name": "getPlacement",
    "longname": "sap.m.ActionSheet#getPlacement",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.getPlacement"
  },
  {
    "description": "Getter for property <code>showCancelButton</code>.\rIf this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showCancelButton</code>"
      }
    ],
    "name": "getShowCancelButton",
    "longname": "sap.m.ActionSheet#getShowCancelButton",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.getShowCancelButton"
  },
  {
    "description": "Getter for property <code>title</code>.\rTitle will be show in the header area in iPhone and every Android devices. This property will be ignored in iPad.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.ActionSheet#getTitle",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.getTitle"
  },
  {
    "description": "Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the button whose index is looked for.",
        "name": "oButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfButton",
    "longname": "sap.m.ActionSheet#indexOfButton",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.indexOfButton"
  },
  {
    "description": "Inserts a button into the aggregation named <code>buttons</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the button to insert; if empty, nothing is inserted",
        "name": "oButton"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the button should be inserted at; for \r            a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value \r            greater than the current size of the aggregation, the button is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertButton",
    "longname": "sap.m.ActionSheet#insertButton",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.insertButton"
  },
  {
    "description": "The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "name": "isOpen",
    "longname": "sap.m.ActionSheet#isOpen",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.isOpen"
  },
  {
    "description": "Calling this method will make the ActionSheet visible on the screen.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.",
        "name": "oControl"
      }
    ],
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "openBy",
    "longname": "sap.m.ActionSheet#openBy",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.openBy"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>buttons</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Button>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllButtons",
    "longname": "sap.m.ActionSheet#removeAllButtons",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.removeAllButtons"
  },
  {
    "description": "Removes an button from the aggregation named <code>buttons</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.Button"
          ]
        },
        "description": "the button to remove or its index or id",
        "name": "vButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the removed button or null"
      }
    ],
    "name": "removeButton",
    "longname": "sap.m.ActionSheet#removeButton",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.removeButton"
  },
  {
    "description": "Setter for property <code>cancelButtonText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>cancelButtonText</code>",
        "name": "sCancelButtonText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCancelButtonText",
    "longname": "sap.m.ActionSheet#setCancelButtonText",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.setCancelButtonText"
  },
  {
    "description": "Setter for property <code>placement</code>.\r</p><p>\rDefault value is <code>Bottom</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.PlacementType"
          ]
        },
        "description": "new value for property <code>placement</code>",
        "name": "oPlacement"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlacement",
    "longname": "sap.m.ActionSheet#setPlacement",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.setPlacement"
  },
  {
    "description": "Setter for property <code>showCancelButton</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showCancelButton</code>",
        "name": "bShowCancelButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowCancelButton",
    "longname": "sap.m.ActionSheet#setShowCancelButton",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.setShowCancelButton"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ActionSheet"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.ActionSheet#setTitle",
    "kind": "function",
    "memberof": "sap.m.ActionSheet",
    "scope": "instance",
    "codeName": "sap.m.ActionSheet.prototype.setTitle"
  },
  {
    "description": "Constructor for a new App.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getHomeIcon homeIcon} : any</li>\r<li>{@link #getBackgroundColor backgroundColor} : string</li>\r<li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>\r<li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>\r<li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.App#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.\rIt also adds certain header tags to the HTML page which are considered useful for mobile apps.",
    "augments": [
      "sap.m.NavContainer"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "App",
    "longname": "sap.m.App",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.App"
  },
  {
    "description": "Fired when the orientation (portrait/landscape) of the device is changed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the device is in landscape orientation.",
        "name": "oControlEvent.getParameters.landscape"
      }
    ],
    "name": "orientationChange",
    "longname": "sap.m.App#event:orientationChange",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.orientationChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.App</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.App</code>.<br/> itself. \r</p><p>\rFired when the orientation (portrait/landscape) of the device is changed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.App</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachOrientationChange",
    "longname": "sap.m.App#attachOrientationChange",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.attachOrientationChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.App</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachOrientationChange",
    "longname": "sap.m.App#detachOrientationChange",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.detachOrientationChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.App with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.App.extend",
    "kind": "function",
    "memberof": "sap.m.App",
    "codeName": "sap.m.App.extend"
  },
  {
    "description": "Fire event orientationChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'landscape' of type <code>boolean</code> Whether the device is in landscape orientation.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireOrientationChange",
    "longname": "sap.m.App#fireOrientationChange",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.fireOrientationChange"
  },
  {
    "description": "Getter for property <code>backgroundColor</code>.\rBackground color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.\rAny configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>backgroundColor</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundColor",
    "longname": "sap.m.App#getBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.getBackgroundColor"
  },
  {
    "description": "Getter for property <code>backgroundImage</code>.\rBackground image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.\rThis background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>backgroundImage</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundImage",
    "longname": "sap.m.App#getBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.getBackgroundImage"
  },
  {
    "description": "Getter for property <code>backgroundOpacity</code>.\rOpacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).\rThis can be used to make the application content better readable by making the background image partly transparent.\r</p><p>\rDefault value is <code>1</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>backgroundOpacity</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundOpacity",
    "longname": "sap.m.App#getBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.getBackgroundOpacity"
  },
  {
    "description": "Getter for property <code>backgroundRepeat</code>.\rWhether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>backgroundRepeat</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundRepeat",
    "longname": "sap.m.App#getBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.getBackgroundRepeat"
  },
  {
    "description": "Getter for property <code>homeIcon</code>.\rThe icon to be displayed on the home screen of iOS devices after the user does \"add to home screen\".\r</p><p>\rNote that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.\r</p><p>\rThis icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.\r</p><p>\rA desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the \"icon\" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.\r</p><p>\rOne example is:\r</p><p>\rapp.setHomeIcon({\r'phone':'phone-icon.png',\r'phone@2':'phone-retina.png',\r'tablet':'tablet-icon.png',\r'tablet@2':'tablet-retina.png',\r'icon':'desktop.ico'\r});\r</p><p>\rThe respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.\rIf an object is given but one of the sizes is not given, the largest given icon will be used for this size.\r</p><p>\rOn Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with \"-precomposed.png\" and setting the \"homeIconPrecomposed\" property to \"true\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value of property <code>homeIcon</code>"
      }
    ],
    "name": "getHomeIcon",
    "longname": "sap.m.App#getHomeIcon",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.getHomeIcon"
  },
  {
    "description": "Setter for property <code>backgroundColor</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>backgroundColor</code>",
        "name": "sBackgroundColor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundColor",
    "longname": "sap.m.App#setBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.setBackgroundColor"
  },
  {
    "description": "Setter for property <code>backgroundImage</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>backgroundImage</code>",
        "name": "sBackgroundImage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundImage",
    "longname": "sap.m.App#setBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.setBackgroundImage"
  },
  {
    "description": "Setter for property <code>backgroundOpacity</code>.\r</p><p>\rDefault value is <code>1</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>backgroundOpacity</code>",
        "name": "fBackgroundOpacity"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundOpacity",
    "longname": "sap.m.App#setBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.setBackgroundOpacity"
  },
  {
    "description": "Setter for property <code>backgroundRepeat</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>backgroundRepeat</code>",
        "name": "bBackgroundRepeat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundRepeat",
    "longname": "sap.m.App#setBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.setBackgroundRepeat"
  },
  {
    "description": "Setter for property <code>homeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "new value for property <code>homeIcon</code>",
        "name": "oHomeIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.App"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHomeIcon",
    "longname": "sap.m.App#setHomeIcon",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "codeName": "sap.m.App.prototype.setHomeIcon"
  },
  {
    "description": "Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.\rTo be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.RenderManager"
          ]
        },
        "description": "the RenderManager",
        "name": "rm"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "a configured custom background color for the control, if any",
        "name": "sBgColor"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "optional": true,
        "description": "the configured custom background image for the control, if any",
        "name": "sBgImgUrl"
      }
    ],
    "returns": [
      null
    ],
    "access": "protected",
    "memberof": "sap.m.BackgroundHelper",
    "name": "addBackgroundColorStyles",
    "longname": "sap.m.BackgroundHelper.addBackgroundColorStyles",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.BackgroundHelper.addBackgroundColorStyles"
  },
  {
    "description": "Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.\rShould be called right after the opening root tag has been completed, so this is the first child element inside the control.",
    "params": [
      {
        "description": "the RenderManager",
        "name": "rm"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the control within which the tag will be rendered; its ID will be used to generate the element ID",
        "name": "oControl"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "a css class to add to the element",
        "name": "sCssClass"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "optional": true,
        "description": "the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.",
        "name": "sBgImgUrl"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "whether the background image should be repeated/tiled (or stretched)",
        "name": "bRepeat"
      },
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "optional": true,
        "description": "the background image opacity, if any",
        "name": "fOpacity"
      }
    ],
    "returns": [
      null
    ],
    "access": "protected",
    "memberof": "sap.m.BackgroundHelper",
    "name": "renderBackgroundImageTag",
    "longname": "sap.m.BackgroundHelper.renderBackgroundImageTag",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.BackgroundHelper.renderBackgroundImageTag"
  },
  {
    "description": "Constructor for a new Bar.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li>\r<li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>\r<li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>\r<li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A bar that is usually used on top of pages",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Bar",
    "longname": "sap.m.Bar",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Bar"
  },
  {
    "description": "Adds some contentLeft <code>oContentLeft</code> \rto the aggregation named <code>contentLeft</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentLeft to add; if empty, nothing is inserted",
        "name": "oContentLeft"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContentLeft",
    "longname": "sap.m.Bar#addContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.addContentLeft"
  },
  {
    "description": "Adds some contentMiddle <code>oContentMiddle</code> \rto the aggregation named <code>contentMiddle</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentMiddle to add; if empty, nothing is inserted",
        "name": "oContentMiddle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContentMiddle",
    "longname": "sap.m.Bar#addContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.addContentMiddle"
  },
  {
    "description": "Adds some contentRight <code>oContentRight</code> \rto the aggregation named <code>contentRight</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentRight to add; if empty, nothing is inserted",
        "name": "oContentRight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContentRight",
    "longname": "sap.m.Bar#addContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.addContentRight"
  },
  {
    "description": "Destroys all the contentLeft in the aggregation \rnamed <code>contentLeft</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContentLeft",
    "longname": "sap.m.Bar#destroyContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.destroyContentLeft"
  },
  {
    "description": "Destroys all the contentMiddle in the aggregation \rnamed <code>contentMiddle</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContentMiddle",
    "longname": "sap.m.Bar#destroyContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.destroyContentMiddle"
  },
  {
    "description": "Destroys all the contentRight in the aggregation \rnamed <code>contentRight</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContentRight",
    "longname": "sap.m.Bar#destroyContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.destroyContentRight"
  },
  {
    "description": "Creates a new subclass of class sap.m.Bar with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Bar.extend",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "codeName": "sap.m.Bar.extend"
  },
  {
    "description": "Getter for aggregation <code>contentLeft</code>.<br/>\rthis is the left content area, usually containing button or App Icon",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContentLeft",
    "longname": "sap.m.Bar#getContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.getContentLeft"
  },
  {
    "description": "Getter for aggregation <code>contentMiddle</code>.<br/>\rThis is the middle content area. Controls such as label, segmented buttons, Select should be placed here. Content that are placed here will always be centrally positioned",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContentMiddle",
    "longname": "sap.m.Bar#getContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.getContentMiddle"
  },
  {
    "description": "Getter for aggregation <code>contentRight</code>.<br/>\rthis is the right content area. Controls such as Action buttons or Search field could be placed here.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContentRight",
    "longname": "sap.m.Bar#getContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.getContentRight"
  },
  {
    "description": "Getter for property <code>enableFlexBox</code>.\rIf this flag is set to true, ContentMiddle will be rendered as a HBox and layoutData can be used to allocate available space\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enableFlexBox</code>"
      }
    ],
    "deprecated": "Since version 1.16. \r</p><p>\rThis property is no longer supported, instead, ContentMiddle will always occupy 100% width when no ContentLeft and ContentRight are being set.",
    "name": "getEnableFlexBox",
    "longname": "sap.m.Bar#getEnableFlexBox",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.getEnableFlexBox"
  },
  {
    "description": "Getter for property <code>translucent</code>.\rA boolean value indicating whether the bar is partially translucent.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>translucent</code>"
      }
    ],
    "since": "1.12",
    "name": "getTranslucent",
    "longname": "sap.m.Bar#getTranslucent",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.getTranslucent"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentLeft</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentLeft whose index is looked for.",
        "name": "oContentLeft"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContentLeft",
    "longname": "sap.m.Bar#indexOfContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.indexOfContentLeft"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentMiddle</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentMiddle whose index is looked for.",
        "name": "oContentMiddle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContentMiddle",
    "longname": "sap.m.Bar#indexOfContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.indexOfContentMiddle"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentRight</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentRight whose index is looked for.",
        "name": "oContentRight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContentRight",
    "longname": "sap.m.Bar#indexOfContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.indexOfContentRight"
  },
  {
    "description": "Inserts a contentLeft into the aggregation named <code>contentLeft</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentLeft to insert; if empty, nothing is inserted",
        "name": "oContentLeft"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the contentLeft should be inserted at; for \r            a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value \r            greater than the current size of the aggregation, the contentLeft is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContentLeft",
    "longname": "sap.m.Bar#insertContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.insertContentLeft"
  },
  {
    "description": "Inserts a contentMiddle into the aggregation named <code>contentMiddle</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentMiddle to insert; if empty, nothing is inserted",
        "name": "oContentMiddle"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the contentMiddle should be inserted at; for \r            a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value \r            greater than the current size of the aggregation, the contentMiddle is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContentMiddle",
    "longname": "sap.m.Bar#insertContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.insertContentMiddle"
  },
  {
    "description": "Inserts a contentRight into the aggregation named <code>contentRight</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentRight to insert; if empty, nothing is inserted",
        "name": "oContentRight"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the contentRight should be inserted at; for \r            a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value \r            greater than the current size of the aggregation, the contentRight is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContentRight",
    "longname": "sap.m.Bar#insertContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.insertContentRight"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>contentLeft</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContentLeft",
    "longname": "sap.m.Bar#removeAllContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.removeAllContentLeft"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>contentMiddle</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContentMiddle",
    "longname": "sap.m.Bar#removeAllContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.removeAllContentMiddle"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>contentRight</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContentRight",
    "longname": "sap.m.Bar#removeAllContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.removeAllContentRight"
  },
  {
    "description": "Removes an contentLeft from the aggregation named <code>contentLeft</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentLeft to remove or its index or id",
        "name": "vContentLeft"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed contentLeft or null"
      }
    ],
    "name": "removeContentLeft",
    "longname": "sap.m.Bar#removeContentLeft",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.removeContentLeft"
  },
  {
    "description": "Removes an contentMiddle from the aggregation named <code>contentMiddle</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentMiddle to remove or its index or id",
        "name": "vContentMiddle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed contentMiddle or null"
      }
    ],
    "name": "removeContentMiddle",
    "longname": "sap.m.Bar#removeContentMiddle",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.removeContentMiddle"
  },
  {
    "description": "Removes an contentRight from the aggregation named <code>contentRight</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the contentRight to remove or its index or id",
        "name": "vContentRight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed contentRight or null"
      }
    ],
    "name": "removeContentRight",
    "longname": "sap.m.Bar#removeContentRight",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.removeContentRight"
  },
  {
    "description": "Setter for property <code>enableFlexBox</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enableFlexBox</code>",
        "name": "bEnableFlexBox"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \r</p><p>\rThis property is no longer supported, instead, ContentMiddle will always occupy 100% width when no ContentLeft and ContentRight are being set.",
    "name": "setEnableFlexBox",
    "longname": "sap.m.Bar#setEnableFlexBox",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.setEnableFlexBox"
  },
  {
    "description": "Setter for property <code>translucent</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>translucent</code>",
        "name": "bTranslucent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12",
    "name": "setTranslucent",
    "longname": "sap.m.Bar#setTranslucent",
    "kind": "function",
    "memberof": "sap.m.Bar",
    "scope": "instance",
    "codeName": "sap.m.Bar.prototype.setTranslucent"
  },
  {
    "description": "Constructor for a new BusyDialog.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string</li>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>\r<li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>\r<li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>\r<li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: \"30px\")</li>\r<li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: \"44px\")</li>\r<li>{@link #getCancelButtonText cancelButtonText} : string</li>\r<li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.BusyDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Busy Dialog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "BusyDialog",
    "longname": "sap.m.BusyDialog",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.BusyDialog"
  },
  {
    "description": "This event will be fired when the busy dialog is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "close",
    "longname": "sap.m.BusyDialog#event:close",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.close"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.BusyDialog</code>.<br/> itself. \r</p><p>\rThis event will be fired when the busy dialog is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachClose",
    "longname": "sap.m.BusyDialog#attachClose",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.attachClose"
  },
  {
    "description": "Closes the dialog",
    "name": "close",
    "longname": "sap.m.BusyDialog#close",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.close"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachClose",
    "longname": "sap.m.BusyDialog#detachClose",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.detachClose"
  },
  {
    "description": "Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.BusyDialog.extend",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "codeName": "sap.m.BusyDialog.extend"
  },
  {
    "description": "Fire event close to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireClose",
    "longname": "sap.m.BusyDialog#fireClose",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.fireClose"
  },
  {
    "description": "Getter for property <code>cancelButtonText</code>.\rThe text of the cancel button. The default text is \"Cancel\" (translated to the respective language).\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>cancelButtonText</code>"
      }
    ],
    "name": "getCancelButtonText",
    "longname": "sap.m.BusyDialog#getCancelButtonText",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getCancelButtonText"
  },
  {
    "description": "Getter for property <code>customIcon</code>.\rIcon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>customIcon</code>"
      }
    ],
    "name": "getCustomIcon",
    "longname": "sap.m.BusyDialog#getCustomIcon",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getCustomIcon"
  },
  {
    "description": "Getter for property <code>customIconDensityAware</code>.\rIf this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.\r</p><p>\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>customIconDensityAware</code>"
      }
    ],
    "name": "getCustomIconDensityAware",
    "longname": "sap.m.BusyDialog#getCustomIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getCustomIconDensityAware"
  },
  {
    "description": "Getter for property <code>customIconHeight</code>.\rHeight of the provided icon. By default 44px are used.\r</p><p>\rDefault value is <code>\"44px\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>customIconHeight</code>"
      }
    ],
    "name": "getCustomIconHeight",
    "longname": "sap.m.BusyDialog#getCustomIconHeight",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getCustomIconHeight"
  },
  {
    "description": "Getter for property <code>customIconRotationSpeed</code>.\rDefines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.\r</p><p>\rDefault value is <code>1000</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>customIconRotationSpeed</code>"
      }
    ],
    "name": "getCustomIconRotationSpeed",
    "longname": "sap.m.BusyDialog#getCustomIconRotationSpeed",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getCustomIconRotationSpeed"
  },
  {
    "description": "Getter for property <code>customIconWidth</code>.\rWidth of the provided icon. By default 44px are used.\r</p><p>\rDefault value is <code>\"30px\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>customIconWidth</code>"
      }
    ],
    "name": "getCustomIconWidth",
    "longname": "sap.m.BusyDialog#getCustomIconWidth",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getCustomIconWidth"
  },
  {
    "description": "Getter for property <code>showCancelButton</code>.\rA cancel button will be rendered inside the busy dialog if this property is set to true.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showCancelButton</code>"
      }
    ],
    "name": "getShowCancelButton",
    "longname": "sap.m.BusyDialog#getShowCancelButton",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getShowCancelButton"
  },
  {
    "description": "Getter for property <code>text</code>.\rOptional text shown inside the popup.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.BusyDialog#getText",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getText"
  },
  {
    "description": "Getter for property <code>title</code>.\rSets a title to the busy dialog. Default is no title.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.BusyDialog#getTitle",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.getTitle"
  },
  {
    "description": "Opens the dialog",
    "name": "open",
    "longname": "sap.m.BusyDialog#open",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.open"
  },
  {
    "description": "Setter for property <code>cancelButtonText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>cancelButtonText</code>",
        "name": "sCancelButtonText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCancelButtonText",
    "longname": "sap.m.BusyDialog#setCancelButtonText",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setCancelButtonText"
  },
  {
    "description": "Setter for property <code>customIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>customIcon</code>",
        "name": "sCustomIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIcon",
    "longname": "sap.m.BusyDialog#setCustomIcon",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setCustomIcon"
  },
  {
    "description": "Setter for property <code>customIconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>customIconDensityAware</code>",
        "name": "bCustomIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconDensityAware",
    "longname": "sap.m.BusyDialog#setCustomIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setCustomIconDensityAware"
  },
  {
    "description": "Setter for property <code>customIconHeight</code>.\r</p><p>\rDefault value is <code>\"44px\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>customIconHeight</code>",
        "name": "sCustomIconHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconHeight",
    "longname": "sap.m.BusyDialog#setCustomIconHeight",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setCustomIconHeight"
  },
  {
    "description": "Setter for property <code>customIconRotationSpeed</code>.\r</p><p>\rDefault value is <code>1000</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>customIconRotationSpeed</code>",
        "name": "iCustomIconRotationSpeed"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconRotationSpeed",
    "longname": "sap.m.BusyDialog#setCustomIconRotationSpeed",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setCustomIconRotationSpeed"
  },
  {
    "description": "Setter for property <code>customIconWidth</code>.\r</p><p>\rDefault value is <code>\"30px\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>customIconWidth</code>",
        "name": "sCustomIconWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconWidth",
    "longname": "sap.m.BusyDialog#setCustomIconWidth",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setCustomIconWidth"
  },
  {
    "description": "Setter for property <code>showCancelButton</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showCancelButton</code>",
        "name": "bShowCancelButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowCancelButton",
    "longname": "sap.m.BusyDialog#setShowCancelButton",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setShowCancelButton"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.BusyDialog#setText",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setText"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.BusyDialog#setTitle",
    "kind": "function",
    "memberof": "sap.m.BusyDialog",
    "scope": "instance",
    "codeName": "sap.m.BusyDialog.prototype.setTitle"
  },
  {
    "description": "Constructor for a new BusyIndicator.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string</li>\r<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>\r<li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>\r<li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>\r<li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: \"44px\")</li>\r<li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: \"44px\")</li>\r<li>{@link #getSize size} : sap.ui.core.CSSSize</li>\r<li>{@link #getDesign design} : string (default: 'auto')</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Control to indicate that the system is busy with some task and the user has to wait. When no image or gif is provided, the control renders the platforms native indicator using css.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "BusyIndicator",
    "longname": "sap.m.BusyIndicator",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.BusyIndicator"
  },
  {
    "description": "Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.BusyIndicator.extend",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "codeName": "sap.m.BusyIndicator.extend"
  },
  {
    "description": "Getter for property <code>customIcon</code>.\rIcon url if an icon is used as the busy indicator.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>customIcon</code>"
      }
    ],
    "name": "getCustomIcon",
    "longname": "sap.m.BusyIndicator#getCustomIcon",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getCustomIcon"
  },
  {
    "description": "Getter for property <code>customIconDensityAware</code>.\rIf this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.\r</p><p>\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>customIconDensityAware</code>"
      }
    ],
    "name": "getCustomIconDensityAware",
    "longname": "sap.m.BusyIndicator#getCustomIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getCustomIconDensityAware"
  },
  {
    "description": "Getter for property <code>customIconHeight</code>.\rHeight of the provided icon. By default 44px are used.\r</p><p>\rDefault value is <code>\"44px\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>customIconHeight</code>"
      }
    ],
    "name": "getCustomIconHeight",
    "longname": "sap.m.BusyIndicator#getCustomIconHeight",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getCustomIconHeight"
  },
  {
    "description": "Getter for property <code>customIconRotationSpeed</code>.\rDefines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.\r</p><p>\rDefault value is <code>1000</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>customIconRotationSpeed</code>"
      }
    ],
    "name": "getCustomIconRotationSpeed",
    "longname": "sap.m.BusyIndicator#getCustomIconRotationSpeed",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getCustomIconRotationSpeed"
  },
  {
    "description": "Getter for property <code>customIconWidth</code>.\rWidth of the provided icon. By default 44px are used.\r</p><p>\rDefault value is <code>\"44px\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>customIconWidth</code>"
      }
    ],
    "name": "getCustomIconWidth",
    "longname": "sap.m.BusyIndicator#getCustomIconWidth",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getCustomIconWidth"
  },
  {
    "description": "Getter for property <code>design</code>.\rThe design defines how the BusyIndicator should look like. There are 3 possiblities:\rauto: automatically sets the design according to the context\rdark: dark theme, useful within a light context\rlight: light theme, useful within a dark context\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>design</code>"
      }
    ],
    "name": "getDesign",
    "longname": "sap.m.BusyIndicator#getDesign",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getDesign"
  },
  {
    "description": "Getter for property <code>size</code>.\rDefines the size of the busy indicator.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>size</code>"
      }
    ],
    "name": "getSize",
    "longname": "sap.m.BusyIndicator#getSize",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getSize"
  },
  {
    "description": "Getter for property <code>text</code>.\rDefines the text displayed next to the busy indicator (optional)\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.BusyIndicator#getText",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getText"
  },
  {
    "description": "Getter for property <code>textDirection</code>.\rOptions for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "the value of property <code>textDirection</code>"
      }
    ],
    "name": "getTextDirection",
    "longname": "sap.m.BusyIndicator#getTextDirection",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getTextDirection"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible control is not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.BusyIndicator#getVisible",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.getVisible"
  },
  {
    "description": "Setter for property <code>customIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>customIcon</code>",
        "name": "sCustomIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIcon",
    "longname": "sap.m.BusyIndicator#setCustomIcon",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setCustomIcon"
  },
  {
    "description": "Setter for property <code>customIconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>customIconDensityAware</code>",
        "name": "bCustomIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconDensityAware",
    "longname": "sap.m.BusyIndicator#setCustomIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setCustomIconDensityAware"
  },
  {
    "description": "Setter for property <code>customIconHeight</code>.\r</p><p>\rDefault value is <code>\"44px\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>customIconHeight</code>",
        "name": "sCustomIconHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconHeight",
    "longname": "sap.m.BusyIndicator#setCustomIconHeight",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setCustomIconHeight"
  },
  {
    "description": "Setter for property <code>customIconRotationSpeed</code>.\r</p><p>\rDefault value is <code>1000</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>customIconRotationSpeed</code>",
        "name": "iCustomIconRotationSpeed"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconRotationSpeed",
    "longname": "sap.m.BusyIndicator#setCustomIconRotationSpeed",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed"
  },
  {
    "description": "Setter for property <code>customIconWidth</code>.\r</p><p>\rDefault value is <code>\"44px\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>customIconWidth</code>",
        "name": "sCustomIconWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIconWidth",
    "longname": "sap.m.BusyIndicator#setCustomIconWidth",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setCustomIconWidth"
  },
  {
    "description": "Setter for property <code>design</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>design</code>",
        "name": "sDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDesign",
    "longname": "sap.m.BusyIndicator#setDesign",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setDesign"
  },
  {
    "description": "Setter for property <code>size</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>size</code>",
        "name": "sSize"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSize",
    "longname": "sap.m.BusyIndicator#setSize",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setSize"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.BusyIndicator#setText",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setText"
  },
  {
    "description": "Setter for property <code>textDirection</code>.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "new value for property <code>textDirection</code>",
        "name": "oTextDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextDirection",
    "longname": "sap.m.BusyIndicator#setTextDirection",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setTextDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BusyIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.BusyIndicator#setVisible",
    "kind": "function",
    "memberof": "sap.m.BusyIndicator",
    "scope": "instance",
    "codeName": "sap.m.BusyIndicator.prototype.setVisible"
  },
  {
    "description": "Constructor for a new Button.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string</li>\r<li>{@link #getType type} : sap.m.ButtonType (default: sap.m.ButtonType.Default)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>\r<li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Button#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Button#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Button",
    "longname": "sap.m.Button",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Button"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.Button#event:press",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.press"
  },
  {
    "description": "Event is fired when the user taps the control. (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.Button#event:tap",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Button</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Button</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.Button#attachPress",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Button</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Button</code>.<br/> itself. \r</p><p>\rEvent is fired when the user taps the control. (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.Button#attachTap",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Button</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.Button#detachPress",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Button</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.Button#detachTap",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.detachTap"
  },
  {
    "description": "Creates a new subclass of class sap.m.Button with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Button.extend",
    "kind": "function",
    "memberof": "sap.m.Button",
    "codeName": "sap.m.Button.extend"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.Button#firePress",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.Button#fireTap",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>activeIcon</code>.\rThe source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>activeIcon</code>"
      }
    ],
    "name": "getActiveIcon",
    "longname": "sap.m.Button#getActiveIcon",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getActiveIcon"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.Button#getEnabled",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>icon</code>.\rIcon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.Button#getIcon",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.Button#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>iconFirst</code>.\rIf set to true (default), the display sequence is 1. icon 2. control text\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconFirst</code>"
      }
    ],
    "name": "getIconFirst",
    "longname": "sap.m.Button#getIconFirst",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getIconFirst"
  },
  {
    "description": "Getter for property <code>text</code>.\rButton text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.Button#getText",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getText"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of a button (e.g. default, accept, reject, back, icon, etc.)\r</p><p>\rDefault value is <code>Default</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ButtonType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.Button#getType",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible buttons are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Button#getVisible",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the button.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Button#getWidth",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>activeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>activeIcon</code>",
        "name": "sActiveIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveIcon",
    "longname": "sap.m.Button#setActiveIcon",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setActiveIcon"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.Button#setEnabled",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.Button#setIcon",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.Button#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>iconFirst</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconFirst</code>",
        "name": "bIconFirst"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconFirst",
    "longname": "sap.m.Button#setIconFirst",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setIconFirst"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.Button#setText",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setText"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Default</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ButtonType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.Button#setType",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Button#setVisible",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Button#setWidth",
    "kind": "function",
    "memberof": "sap.m.Button",
    "scope": "instance",
    "codeName": "sap.m.Button.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Carousel.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getLoop loop} : boolean (default: false)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>\r<li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>\r<li>{@link #getShowBusyIndicator showBusyIndicator} : boolean (default: true)</li>\r<li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.CSSSize (default: '6em')</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getActivePage activePage} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Carousel#event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Carousel#event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Carousel#event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list.\r</p><p>\rThis carousel implementation always renders three controls: the one which is currently active, the one to the right and the one to the left. After a swipe, these pages are exchanged accordingly, the next control in the list is loaded, the control which is out of scope is released.\r</p><p>\rSimilar to the NavContainer control, the carousel triggers events on it pages, when flipping through them. These events are:\r- 'BeforeFirstShow': triggered, when a page is rendered for the first time wthin the carousel\r- 'BeforeShow': triggered whenever a page is rendered (analogous to 'loadPage event)\r- 'AfterHide': triggered when the page is discarded from the carousel's 'viewport' (analogous to 'unloadPage event)\r</p><p>\rNote: The Carousel works on all platforms supported by sap.m except for Internet Explorer.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Carousel",
    "longname": "sap.m.Carousel",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Carousel"
  },
  {
    "description": "Carousel requires a new page to be loaded. This event may be used to fill the content of that page",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the page which is will be loaded",
        "name": "oControlEvent.getParameters.pageId"
      }
    ],
    "name": "loadPage",
    "longname": "sap.m.Carousel#event:loadPage",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.loadPage"
  },
  {
    "description": "This event is thrown after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the page which was active before the page change.",
        "name": "oControlEvent.getParameters.oldActivePageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the page which is active after the page change.",
        "name": "oControlEvent.getParameters.newActivePageId"
      }
    ],
    "name": "pageChanged",
    "longname": "sap.m.Carousel#event:pageChanged",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.pageChanged"
  },
  {
    "description": "Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the page which is will be unloaded",
        "name": "oControlEvent.getParameters.pageId"
      }
    ],
    "name": "unloadPage",
    "longname": "sap.m.Carousel#event:unloadPage",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.unloadPage"
  },
  {
    "description": "API method to add a control to the list of pages which is \rdisplayed in the carousel.",
    "params": [
      {
        "description": "page which is added to the list of pages to be \r\t\tdisplayed in the carousel",
        "name": "oPage"
      }
    ],
    "name": "addPage",
    "longname": "sap.m.Carousel#addPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.addPage"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Carousel</code>.<br/> itself. \r</p><p>\rCarousel requires a new page to be loaded. This event may be used to fill the content of that page",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachLoadPage",
    "longname": "sap.m.Carousel#attachLoadPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.attachLoadPage"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Carousel</code>.<br/> itself. \r</p><p>\rThis event is thrown after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPageChanged",
    "longname": "sap.m.Carousel#attachPageChanged",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.attachPageChanged"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Carousel</code>.<br/> itself. \r</p><p>\rCarousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachUnloadPage",
    "longname": "sap.m.Carousel#attachUnloadPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.attachUnloadPage"
  },
  {
    "description": "API method to remove and destroy all pages which are displayed in the carousel.\rThese pages can not be re-used afterwards.",
    "params": [
      {
        "description": "page which shall be removed from the list of pages to be \r\t\tdisplayed in the carousel",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "description": "sap.m.Carousel the Carousel instance for method chaining"
      }
    ],
    "name": "destroyPages",
    "longname": "sap.m.Carousel#destroyPages",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.destroyPages"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachLoadPage",
    "longname": "sap.m.Carousel#detachLoadPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.detachLoadPage"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPageChanged",
    "longname": "sap.m.Carousel#detachPageChanged",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.detachPageChanged"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachUnloadPage",
    "longname": "sap.m.Carousel#detachUnloadPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.detachUnloadPage"
  },
  {
    "description": "Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Carousel.extend",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "codeName": "sap.m.Carousel.extend"
  },
  {
    "description": "Fire event loadPage to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'pageId' of type <code>string</code> Id of the page which is will be loaded</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireLoadPage",
    "longname": "sap.m.Carousel#fireLoadPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.fireLoadPage"
  },
  {
    "description": "Fire event pageChanged to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'oldActivePageId' of type <code>string</code> Id of the page which was active before the page change.</li>\r<li>'newActivePageId' of type <code>string</code> Id of the page which is active after the page change.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePageChanged",
    "longname": "sap.m.Carousel#firePageChanged",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.firePageChanged"
  },
  {
    "description": "Fire event unloadPage to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'pageId' of type <code>string</code> Id of the page which is will be unloaded</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireUnloadPage",
    "longname": "sap.m.Carousel#fireUnloadPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.fireUnloadPage"
  },
  {
    "description": "Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.\rThe getter will return the control id",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>activePage</code> association, or null"
      }
    ],
    "name": "getActivePage",
    "longname": "sap.m.Carousel#getActivePage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getActivePage"
  },
  {
    "description": "Getter for property <code>busyIndicatorSize</code>.\rSize of the busy indicators which can be displayed in the carousel, when loading pages after swipe.\r</p><p>\rDefault value is <code>6em</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>busyIndicatorSize</code>"
      }
    ],
    "name": "getBusyIndicatorSize",
    "longname": "sap.m.Carousel#getBusyIndicatorSize",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getBusyIndicatorSize"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the carousel. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.Carousel#getHeight",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getHeight"
  },
  {
    "description": "Getter for property <code>loop</code>.\rDefines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>loop</code>"
      }
    ],
    "name": "getLoop",
    "longname": "sap.m.Carousel#getLoop",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getLoop"
  },
  {
    "description": "Getter for property <code>pageIndicatorPlacement</code>.\rThis is the information about where the carousel's page indicator shall be displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.\r</p><p>\rDefault value is <code>Bottom</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PlacementType"
          ]
        },
        "description": "the value of property <code>pageIndicatorPlacement</code>"
      }
    ],
    "name": "getPageIndicatorPlacement",
    "longname": "sap.m.Carousel#getPageIndicatorPlacement",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getPageIndicatorPlacement"
  },
  {
    "description": "Getter for aggregation <code>pages</code>.<br/>\rThe content entities between which this Carousel navigates.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getPages",
    "longname": "sap.m.Carousel#getPages",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getPages"
  },
  {
    "description": "Getter for property <code>showBusyIndicator</code>.\rShow or hide a busy indicator in the carousel when loading pages after swipe. These busy indicators are part of the can be swiped as well: they do not block the carousel.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showBusyIndicator</code>"
      }
    ],
    "name": "getShowBusyIndicator",
    "longname": "sap.m.Carousel#getShowBusyIndicator",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getShowBusyIndicator"
  },
  {
    "description": "Getter for property <code>showPageIndicator</code>.\rShow or hide carousel's page indicator.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showPageIndicator</code>"
      }
    ],
    "name": "getShowPageIndicator",
    "longname": "sap.m.Carousel#getShowPageIndicator",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getShowPageIndicator"
  },
  {
    "description": "Getter for property <code>visible</code>.\rHide carousel. Actually, it is not even rendered anymore if it is not 'visible'\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Carousel#getVisible",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the carousel. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Carousel#getWidth",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page whose index is looked for.",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfPage",
    "longname": "sap.m.Carousel#indexOfPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.indexOfPage"
  },
  {
    "description": "API method to insert a control at a certain position to the list of\rpages which is displayed in the carousel.",
    "params": [
      {
        "description": "page which is added to the list of pages to be \r\t\tdisplayed in the carousel",
        "name": "oPage"
      },
      {
        "description": "position at which oPage shall be added",
        "name": "iIndex"
      }
    ],
    "name": "insertPage",
    "longname": "sap.m.Carousel#insertPage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.insertPage"
  },
  {
    "description": "API method to show the previous page in the page list.",
    "name": "next",
    "longname": "sap.m.Carousel#next",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.next"
  },
  {
    "description": "API method to show the next page in the page list.",
    "name": "previous",
    "longname": "sap.m.Carousel#previous",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.previous"
  },
  {
    "description": "API method to remove all pages which are displayed in the carousel.\rThese pages can be re-used afterwards though, as opposed to \r'destroyPages'.",
    "params": [
      {
        "description": "page which shall be removed from the list of pages to be \r\t\tdisplayed in the carousel",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "description": "an array of the removed pages (might be empty)"
      }
    ],
    "name": "removeAllPages",
    "longname": "sap.m.Carousel#removeAllPages",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.removeAllPages"
  },
  {
    "description": "API method to remove all pages which are displayed in the carousel.\rThese pages can be re-used afterwards though, as opposed to \r'destroyPages'.",
    "params": [
      {
        "description": "page which shall be removed from the list of pages to be \r\t\tdisplayed in the carousel",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "description": "sap.m.Carousel the Carousel instance for method chaining"
      }
    ],
    "name": "removePage",
    "longname": "sap.m.Carousel#removePage",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.removePage"
  },
  {
    "description": "API method to set whether the carousel's busy indicator's.",
    "params": [
      {
        "description": "thet new size. Should be a CSS size, for example '1em' or '24px'.",
        "name": "sBusyIndicatorSize"
      }
    ],
    "name": "setBusyIndicatorSize",
    "longname": "sap.m.Carousel#setBusyIndicatorSize",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setBusyIndicatorSize"
  },
  {
    "description": "API method to set the carousel's height",
    "params": [
      {
        "description": "the new height as CSSSize",
        "name": "oHeight"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.Carousel#setHeight",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setHeight"
  },
  {
    "description": "API method to set whether the carousel should loop, i.e\rshow the first page after the last page is reached and vice \rversa.",
    "params": [
      {
        "description": "the new loop property",
        "name": "bLoop"
      }
    ],
    "name": "setLoop",
    "longname": "sap.m.Carousel#setLoop",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setLoop"
  },
  {
    "description": "API method to place the page inidicator.",
    "params": [
      {
        "description": "either sap.m.PlacementType.Top or sap.m.PlacementType.Bottom",
        "name": "oPlacement"
      }
    ],
    "name": "setPageIndicatorPlacement",
    "longname": "sap.m.Carousel#setPageIndicatorPlacement",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setPageIndicatorPlacement"
  },
  {
    "description": "API method to set whether the carousel should display the busy indicators",
    "params": [
      {
        "description": "the new loop property",
        "name": "bShowBusyIndicator"
      }
    ],
    "name": "setShowBusyIndicator",
    "longname": "sap.m.Carousel#setShowBusyIndicator",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setShowBusyIndicator"
  },
  {
    "description": "API method to set whether the carousel should display the page indicator",
    "params": [
      {
        "description": "the new show property",
        "name": "bShowPageIndicator"
      }
    ],
    "name": "setShowPageIndicator",
    "longname": "sap.m.Carousel#setShowPageIndicator",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setShowPageIndicator"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Carousel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Carousel#setVisible",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setVisible"
  },
  {
    "description": "API method to set the carousel's width",
    "params": [
      {
        "description": "the new width as CSSSize",
        "name": "oWidth"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Carousel#setWidth",
    "kind": "function",
    "memberof": "sap.m.Carousel",
    "scope": "instance",
    "codeName": "sap.m.Carousel.prototype.setWidth"
  },
  {
    "description": "Constructor for a new CheckBox.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getSelected selected} : boolean (default: false)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getName name} : string</li>\r<li>{@link #getText text} : string</li>\r<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>\r<li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.CheckBox#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "CheckBox control",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "CheckBox",
    "longname": "sap.m.CheckBox",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.CheckBox"
  },
  {
    "description": "Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Checks whether the CheckBox is flagged or not flagged.",
        "name": "oControlEvent.getParameters.selected"
      }
    ],
    "name": "select",
    "longname": "sap.m.CheckBox#event:select",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.select"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.CheckBox</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.CheckBox</code>.<br/> itself. \r</p><p>\rEvent is triggered when the control status is changed by the user by selecting or deselecting the checkbox.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.CheckBox#attachSelect",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.attachSelect"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.CheckBox</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.CheckBox#detachSelect",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.detachSelect"
  },
  {
    "description": "Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.CheckBox.extend",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "codeName": "sap.m.CheckBox.extend"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'selected' of type <code>boolean</code> Checks whether the CheckBox is flagged or not flagged.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.CheckBox#fireSelect",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.fireSelect"
  },
  {
    "description": "Getter for property <code>activeHandling</code>.\rthis is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>activeHandling</code>"
      }
    ],
    "name": "getActiveHandling",
    "longname": "sap.m.CheckBox#getActiveHandling",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getActiveHandling"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rUsing this property, the control could be disabled, if required.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.CheckBox#getEnabled",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.CheckBox#getName",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getName"
  },
  {
    "description": "Getter for property <code>selected</code>.\rContains the state of the control whether it is flagged with a check mark, or not\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.CheckBox#getSelected",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>text</code>.\rDefines the text displayed next to the check box\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.CheckBox#getText",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getText"
  },
  {
    "description": "Getter for property <code>textDirection</code>.\rOptions for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "the value of property <code>textDirection</code>"
      }
    ],
    "name": "getTextDirection",
    "longname": "sap.m.CheckBox#getTextDirection",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getTextDirection"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible control is not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.CheckBox#getVisible",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rWidth of Label\r</p><p>\rDefault value is <code>''</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.CheckBox#getWidth",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>activeHandling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>activeHandling</code>",
        "name": "bActiveHandling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveHandling",
    "longname": "sap.m.CheckBox#setActiveHandling",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setActiveHandling"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.CheckBox#setEnabled",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.CheckBox#setName",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setName"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.CheckBox#setSelected",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.CheckBox#setText",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setText"
  },
  {
    "description": "Setter for property <code>textDirection</code>.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "new value for property <code>textDirection</code>",
        "name": "oTextDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextDirection",
    "longname": "sap.m.CheckBox#setTextDirection",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setTextDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.CheckBox#setVisible",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>''</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CheckBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.CheckBox#setWidth",
    "kind": "function",
    "memberof": "sap.m.CheckBox",
    "scope": "instance",
    "codeName": "sap.m.CheckBox.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Column.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getHAlign hAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>\r<li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: sap.ui.core.VerticalAlign.Inherit)</li>\r<li>{@link #getStyleClass styleClass} : string</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getMinScreenWidth minScreenWidth} : string</li>\r<li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>\r<li>{@link #getPopinHAlign popinHAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>\r<li>{@link #getPopinDisplay popinDisplay} : sap.m.PopinDisplay (default: sap.m.PopinDisplay.Block)</li>\r<li>{@link #getMergeDuplicates mergeDuplicates} : boolean (default: false)</li>\r<li>{@link #getMergeFunctionName mergeFunctionName} : string (default: 'getText')</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getHeader header} : sap.ui.core.Control</li>\r<li>{@link #getFooter footer} : sap.ui.core.Control</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The column allows to define column specific properties that will be applied when rendering the List.",
    "augments": [
      "sap.ui.core.Element"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "Column",
    "longname": "sap.m.Column",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Column"
  },
  {
    "description": "Apply alignment of the Column to Text or Label\rAlso set width to 100% to support wrapping",
    "access": "protected",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "List control",
        "name": "oControl"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "TextAlign enumeration",
        "name": "sAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "oControl"
      }
    ],
    "name": "applyAlignTo",
    "longname": "sap.m.Column#applyAlignTo",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.applyAlignTo"
  },
  {
    "description": "Destroys the footer in the aggregation \rnamed <code>footer</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyFooter",
    "longname": "sap.m.Column#destroyFooter",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.destroyFooter"
  },
  {
    "description": "Destroys the header in the aggregation \rnamed <code>header</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyHeader",
    "longname": "sap.m.Column#destroyHeader",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.destroyHeader"
  },
  {
    "description": "Creates a new subclass of class sap.m.Column with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Column.extend",
    "kind": "function",
    "memberof": "sap.m.Column",
    "codeName": "sap.m.Column.extend"
  },
  {
    "description": "Returns CSS alignment according to column hAlign setting or given parameter\rfor Begin/End values checks the locale settings",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "TextAlign enumeration",
        "name": "sAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "left|center|right"
      }
    ],
    "access": "protected",
    "name": "getCssAlign",
    "longname": "sap.m.Column#getCssAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getCssAlign"
  },
  {
    "description": "Getter for property <code>demandPopin</code>.\rAccording to your minScreenWidth settings, the column can be hidden in different screen sizes.\rSetting this property to true, shows this column as pop-in instead of hiding it.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>demandPopin</code>"
      }
    ],
    "name": "getDemandPopin",
    "longname": "sap.m.Column#getDemandPopin",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getDemandPopin"
  },
  {
    "description": "Getter for aggregation <code>footer</code>.<br/>\rControl to be displayed in the column footer.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getFooter",
    "longname": "sap.m.Column#getFooter",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getFooter"
  },
  {
    "description": "Getter for property <code>hAlign</code>.\rHorizontal alignment of the column content. Available alignment settings are \"Begin\", \"Center\", \"End\", \"Left\", and \"Right\".\r</p><p>\rNOTE: Controls with a text align do not inherit the horizontal alignment. You have to set the text align directly on the control.\r</p><p>\rDefault value is <code>Begin</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "the value of property <code>hAlign</code>"
      }
    ],
    "name": "getHAlign",
    "longname": "sap.m.Column#getHAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getHAlign"
  },
  {
    "description": "Getter for aggregation <code>header</code>.<br/>\rControl to be displayed in the column header.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getHeader",
    "longname": "sap.m.Column#getHeader",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getHeader"
  },
  {
    "description": "Gets the initial order of the column",
    "returns": [
      {
        "type": {
          "names": [
            "Int"
          ]
        },
        "description": "initial order of the column"
      }
    ],
    "access": "protected",
    "name": "getInitialOrder",
    "longname": "sap.m.Column#getInitialOrder",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getInitialOrder"
  },
  {
    "description": "Gets the last value of the column",
    "since": "1.16",
    "access": "protected",
    "name": "getLastValue",
    "longname": "sap.m.Column#getLastValue",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getLastValue"
  },
  {
    "description": "Getter for property <code>mergeDuplicates</code>.\rSet \"true\" to merge repeating cells(duplicates) into one.\rAlso see \"mergeFunctionName\" property to customize.\rNote: this property gets disabled if any column is in pop-in!\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>mergeDuplicates</code>"
      }
    ],
    "since": "1.16",
    "name": "getMergeDuplicates",
    "longname": "sap.m.Column#getMergeDuplicates",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getMergeDuplicates"
  },
  {
    "description": "Getter for property <code>mergeFunctionName</code>.\rDefines the value getter(serialization) function if \"mergeDuplicates\" property is set \"true\"\rControl itself uses this function to compare values of two repeating cells.\rDefault value \"getText\" is suitable for Label and Text control.\re.g. For \"Icon\" control \"getSrc\" can be used.\r</p><p>\rDefault value is <code>getText</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>mergeFunctionName</code>"
      }
    ],
    "since": "1.16",
    "name": "getMergeFunctionName",
    "longname": "sap.m.Column#getMergeFunctionName",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getMergeFunctionName"
  },
  {
    "description": "Getter for property <code>minScreenWidth</code>.\rBy default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.\rAs you can give specific CSS sizes(e.g: \"480px\" or \"40em\"), you can also use sap.m.ScreenSize enumeration(e.g: \"Phone\", \"Tablet\", \"Desktop\", \"Small\", \"Medium\", \"Large\", ....).\r</p><p>\rsap.m.Column.MediaQuery1->Range1 = 199\r</p><p>\rThis property can be used for responsive design. e.g: \"40em\"(or \"640px\" or \"Tablet\") setting shows this column in iPad(and Desktop) but hides in iPhone.\rPlease also see \"demandPopin\" property\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>minScreenWidth</code>"
      }
    ],
    "name": "getMinScreenWidth",
    "longname": "sap.m.Column#getMinScreenWidth",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getMinScreenWidth"
  },
  {
    "description": "Gets the order of the column",
    "returns": [
      {
        "type": {
          "names": [
            "Int"
          ]
        },
        "description": "nOrder order of the column"
      }
    ],
    "access": "protected",
    "name": "getOrder",
    "longname": "sap.m.Column#getOrder",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getOrder"
  },
  {
    "description": "Getter for property <code>popinDisplay</code>.\rDefines the display options of pop-in.\rPossible values are\r1 - \"Block\"(Header is displayed in first line and value field in next line.)\r2 - \"Inline\" (Value field is displayed next to the header in same line.)\r</p><p>\rDefault value is <code>sap.m.PopinDisplay.Block</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PopinDisplay"
          ]
        },
        "description": "the value of property <code>popinDisplay</code>"
      }
    ],
    "since": "1.13.2",
    "name": "getPopinDisplay",
    "longname": "sap.m.Column#getPopinDisplay",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getPopinDisplay"
  },
  {
    "description": "Getter for property <code>popinHAlign</code>.\rHorizontal alignment of the pop-in content. Available alignment settings are \"Begin\", \"Center\", \"End\", \"Left\", and \"Right\".\r</p><p>\rNOTE: Controls with a text align do not inherit the horizontal alignment.\r</p><p>\rDefault value is <code>Begin</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "the value of property <code>popinHAlign</code>"
      }
    ],
    "deprecated": "Since version 1.14. \rUse popinDisplay property instead.",
    "name": "getPopinHAlign",
    "longname": "sap.m.Column#getPopinHAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getPopinHAlign"
  },
  {
    "description": "Getter for property <code>styleClass</code>.\rCSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>styleClass</code>"
      }
    ],
    "name": "getStyleClass",
    "longname": "sap.m.Column#getStyleClass",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getStyleClass"
  },
  {
    "description": "Getter for property <code>vAlign</code>.\rVertical alignment of the cells in a column. Possible values are \"Inherit\", \"Top\", \"Middle\", \"Bottom\"\rThis property does not affect the vertical alignment of header and footer.\r</p><p>\rDefault value is <code>Inherit</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.VerticalAlign"
          ]
        },
        "description": "the value of property <code>vAlign</code>"
      }
    ],
    "name": "getVAlign",
    "longname": "sap.m.Column#getVAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getVAlign"
  },
  {
    "description": "Getter for property <code>visible</code>.\rSpecifies whether or not the column is visible. Invisible columns are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Column#getVisible",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rWidth of the column.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Column#getWidth",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.getWidth"
  },
  {
    "description": "Checks if box-sizing border-box works for columns\rMost of the browser does not respect this CSS property, even buggy\rhttps://bugs.webkit.org/show_bug.cgi?id=18565",
    "scope": "static",
    "name": "hasBorderBoxSupport",
    "longname": "sap.m.Column.hasBorderBoxSupport",
    "kind": "function",
    "memberof": "sap.m.Column",
    "codeName": "sap.m.Column.hasBorderBoxSupport"
  },
  {
    "description": "Checks the column will be hidden",
    "access": "protected",
    "name": "isHidden",
    "longname": "sap.m.Column#isHidden",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.isHidden"
  },
  {
    "description": "Returns visible probability of the column",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Whether return cache or new result",
        "name": "bReturnCache"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "access": "protected",
    "name": "isNeverVisible",
    "longname": "sap.m.Column#isNeverVisible",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.isNeverVisible"
  },
  {
    "description": "Checks the column will be shown as pop-in",
    "access": "protected",
    "name": "isPopin",
    "longname": "sap.m.Column#isPopin",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.isPopin"
  },
  {
    "description": "This method is called after all cells in column is rendered from parent",
    "params": [
      {
        "type": {
          "names": [
            "jQuery"
          ]
        },
        "description": "Table jQuery reference",
        "name": "$table"
      }
    ],
    "access": "protected",
    "name": "onColumnRendered",
    "longname": "sap.m.Column#onColumnRendered",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.onColumnRendered"
  },
  {
    "description": "Calls from Table to notify all items are removed",
    "since": "1.16",
    "access": "protected",
    "name": "onItemsRemoved",
    "longname": "sap.m.Column#onItemsRemoved",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.onItemsRemoved"
  },
  {
    "description": "Setter for property <code>demandPopin</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>demandPopin</code>",
        "name": "bDemandPopin"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDemandPopin",
    "longname": "sap.m.Column#setDemandPopin",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setDemandPopin"
  },
  {
    "description": "Display or hide the column from given table\rThis does not set the visibility property of the column",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Table DOM reference",
        "name": "oTableDomRef"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "whether visible or not",
        "name": "bDisplay"
      }
    ],
    "access": "protected",
    "name": "setDisplay",
    "longname": "sap.m.Column#setDisplay",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setDisplay"
  },
  {
    "description": "Display or hide the column from given table via checking media query changes",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Table DOM reference",
        "name": "oTableDomRef"
      }
    ],
    "access": "protected",
    "name": "setDisplayViaMedia",
    "longname": "sap.m.Column#setDisplayViaMedia",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setDisplayViaMedia"
  },
  {
    "description": "Setter for the aggregated <code>footer</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oFooter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooter",
    "longname": "sap.m.Column#setFooter",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setFooter"
  },
  {
    "description": "Setter for property <code>hAlign</code>.\r</p><p>\rDefault value is <code>Begin</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "new value for property <code>hAlign</code>",
        "name": "oHAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHAlign",
    "longname": "sap.m.Column#setHAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setHAlign"
  },
  {
    "description": "Setter for the aggregated <code>header</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeader",
    "longname": "sap.m.Column#setHeader",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setHeader"
  },
  {
    "description": "Sets the visible column index\rNegative index values can be used to clear",
    "params": [
      {
        "type": {
          "names": [
            "Int"
          ]
        },
        "description": "index of the visible column",
        "name": "nIndex"
      }
    ],
    "access": "protected",
    "name": "setIndex",
    "longname": "sap.m.Column#setIndex",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setIndex"
  },
  {
    "description": "Sets the initial order of the column",
    "params": [
      {
        "type": {
          "names": [
            "Int"
          ]
        },
        "description": "initial order of the column",
        "name": "nOrder"
      }
    ],
    "access": "protected",
    "name": "setInitialOrder",
    "longname": "sap.m.Column#setInitialOrder",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setInitialOrder"
  },
  {
    "description": "Sets the last value of the column if mergeDuplicates property is true",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "Any Value",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        }
      }
    ],
    "since": "1.16",
    "access": "protected",
    "name": "setLastValue",
    "longname": "sap.m.Column#setLastValue",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setLastValue"
  },
  {
    "description": "Setter for property <code>mergeDuplicates</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>mergeDuplicates</code>",
        "name": "bMergeDuplicates"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setMergeDuplicates",
    "longname": "sap.m.Column#setMergeDuplicates",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setMergeDuplicates"
  },
  {
    "description": "Setter for property <code>mergeFunctionName</code>.\r</p><p>\rDefault value is <code>getText</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>mergeFunctionName</code>",
        "name": "sMergeFunctionName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setMergeFunctionName",
    "longname": "sap.m.Column#setMergeFunctionName",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setMergeFunctionName"
  },
  {
    "description": "Setter for property <code>minScreenWidth</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>minScreenWidth</code>",
        "name": "sMinScreenWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMinScreenWidth",
    "longname": "sap.m.Column#setMinScreenWidth",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setMinScreenWidth"
  },
  {
    "description": "Sets the order of the column\rDoes not do the visual effect\rTable should be invalidate to re-render",
    "params": [
      {
        "type": {
          "names": [
            "Int"
          ]
        },
        "description": "order of the column",
        "name": "nOrder"
      }
    ],
    "access": "protected",
    "name": "setOrder",
    "longname": "sap.m.Column#setOrder",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setOrder"
  },
  {
    "description": "Setter for property <code>popinDisplay</code>.\r</p><p>\rDefault value is <code>sap.m.PopinDisplay.Block</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.PopinDisplay"
          ]
        },
        "description": "new value for property <code>popinDisplay</code>",
        "name": "oPopinDisplay"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.13.2",
    "name": "setPopinDisplay",
    "longname": "sap.m.Column#setPopinDisplay",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setPopinDisplay"
  },
  {
    "description": "Setter for property <code>popinHAlign</code>.\r</p><p>\rDefault value is <code>Begin</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "new value for property <code>popinHAlign</code>",
        "name": "oPopinHAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.14. \rUse popinDisplay property instead.",
    "name": "setPopinHAlign",
    "longname": "sap.m.Column#setPopinHAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setPopinHAlign"
  },
  {
    "description": "Setter for property <code>styleClass</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>styleClass</code>",
        "name": "sStyleClass"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setStyleClass",
    "longname": "sap.m.Column#setStyleClass",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setStyleClass"
  },
  {
    "description": "Setter for property <code>vAlign</code>.\r</p><p>\rDefault value is <code>Inherit</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.VerticalAlign"
          ]
        },
        "description": "new value for property <code>vAlign</code>",
        "name": "oVAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVAlign",
    "longname": "sap.m.Column#setVAlign",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setVAlign"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Column#setVisible",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Column#setWidth",
    "kind": "function",
    "memberof": "sap.m.Column",
    "scope": "instance",
    "codeName": "sap.m.Column.prototype.setWidth"
  },
  {
    "description": "Constructor for a new ColumnListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getCells cells} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ColumnListItem can be used to create columns inside the List like Table.",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "ColumnListItem",
    "longname": "sap.m.ColumnListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ColumnListItem"
  },
  {
    "description": "Adds some cell <code>oCell</code> \rto the aggregation named <code>cells</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the cell to add; if empty, nothing is inserted",
        "name": "oCell"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ColumnListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addCell",
    "longname": "sap.m.ColumnListItem#addCell",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.addCell"
  },
  {
    "description": "Binder for aggregation <code>cells</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ColumnListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindCells",
    "longname": "sap.m.ColumnListItem#bindCells",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.bindCells"
  },
  {
    "description": "Destroys all the cells in the aggregation \rnamed <code>cells</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ColumnListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyCells",
    "longname": "sap.m.ColumnListItem#destroyCells",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.destroyCells"
  },
  {
    "description": "Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ColumnListItem.extend",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "codeName": "sap.m.ColumnListItem.extend"
  },
  {
    "description": "Getter for aggregation <code>cells</code>.<br/>\rEvery item inside the cells aggregation defines one column of the row.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getCells",
    "longname": "sap.m.ColumnListItem#getCells",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.getCells"
  },
  {
    "description": "Handles event delegation for pop-ins",
    "scope": "static",
    "access": "protected",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "jQuery event object",
        "name": "oEvent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "event name to map",
        "name": "sEventName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "max parent element to search in DOM to find pop-in",
        "name": "oContainerDomRef"
      }
    ],
    "name": "handleEvents",
    "longname": "sap.m.ColumnListItem.handleEvents",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "codeName": "sap.m.ColumnListItem.handleEvents"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>cells</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the cell whose index is looked for.",
        "name": "oCell"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfCell",
    "longname": "sap.m.ColumnListItem#indexOfCell",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.indexOfCell"
  },
  {
    "description": "Inserts a cell into the aggregation named <code>cells</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the cell to insert; if empty, nothing is inserted",
        "name": "oCell"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the cell should be inserted at; for \r            a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value \r            greater than the current size of the aggregation, the cell is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ColumnListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertCell",
    "longname": "sap.m.ColumnListItem#insertCell",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.insertCell"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>cells</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllCells",
    "longname": "sap.m.ColumnListItem#removeAllCells",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.removeAllCells"
  },
  {
    "description": "Removes an cell from the aggregation named <code>cells</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the cell to remove or its index or id",
        "name": "vCell"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed cell or null"
      }
    ],
    "name": "removeCell",
    "longname": "sap.m.ColumnListItem#removeCell",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.removeCell"
  },
  {
    "description": "Unbinder for aggregation <code>cells</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ColumnListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindCells",
    "longname": "sap.m.ColumnListItem#unbindCells",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "codeName": "sap.m.ColumnListItem.prototype.unbindCells"
  },
  {
    "description": "Constructor for a new CustomListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "sap.m.CustomListItem Control",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "CustomListItem",
    "longname": "sap.m.CustomListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.CustomListItem"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.CustomListItem#addContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.addContent"
  },
  {
    "description": "Binder for aggregation <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindContent",
    "longname": "sap.m.CustomListItem#bindContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.bindContent"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.CustomListItem#destroyContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.destroyContent"
  },
  {
    "description": "Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.CustomListItem.extend",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "codeName": "sap.m.CustomListItem.extend"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe content of this list item",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.CustomListItem#getContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.getContent"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.CustomListItem#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.CustomListItem#insertContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.insertContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.CustomListItem#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.CustomListItem#removeContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.removeContent"
  },
  {
    "description": "Unbinder for aggregation <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindContent",
    "longname": "sap.m.CustomListItem#unbindContent",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "codeName": "sap.m.CustomListItem.prototype.unbindContent"
  },
  {
    "description": "Constructor for a new CustomTile.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Use the Custom Tile to show a application specific content in the tile.\rThe tile width is 8.5em and height is 10em",
    "augments": [
      "sap.m.Tile"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "CustomTile",
    "longname": "sap.m.CustomTile",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.CustomTile"
  },
  {
    "description": "Destroys the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.CustomTile#destroyContent",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "codeName": "sap.m.CustomTile.prototype.destroyContent"
  },
  {
    "description": "Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.CustomTile.extend",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "codeName": "sap.m.CustomTile.extend"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rDefines the Content of the CustomTile",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.CustomTile#getContent",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "codeName": "sap.m.CustomTile.prototype.getContent"
  },
  {
    "description": "Setter for the aggregated <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.CustomTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setContent",
    "longname": "sap.m.CustomTile#setContent",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "codeName": "sap.m.CustomTile.prototype.setContent"
  },
  {
    "description": "Constructor for a new DateTimeInput.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getType type} : sap.m.DateTimeInputType (default: sap.m.DateTimeInputType.Date)</li>\r<li>{@link #getDisplayFormat displayFormat} : string</li>\r<li>{@link #getValueFormat valueFormat} : string</li>\r<li>{@link #getDateValue dateValue} : object</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.DateTimeInput#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Allows end users to interact with date and/or time and select from a date and/or time pad.",
    "augments": [
      "sap.m.InputBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.9.1",
    "name": "DateTimeInput",
    "longname": "sap.m.DateTimeInput",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.DateTimeInput"
  },
  {
    "description": "This event gets fired when the selection has finished and the value has changed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The new string value of the control in given valueFormat(or locale format).",
        "name": "oControlEvent.getParameters.newValue"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The new value of control as JavaScript Date Object or null if value is empty.",
        "name": "oControlEvent.getParameters.newDateValue"
      }
    ],
    "name": "change",
    "longname": "sap.m.DateTimeInput#event:change",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.change"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.DateTimeInput</code>.<br/> itself. \r</p><p>\rThis event gets fired when the selection has finished and the value has changed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.DateTimeInput#attachChange",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.attachChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.DateTimeInput#detachChange",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.detachChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.DateTimeInput with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.DateTimeInput.extend",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "codeName": "sap.m.DateTimeInput.extend"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'newValue' of type <code>string</code> The new string value of the control in given valueFormat(or locale format).</li>\r<li>'newDateValue' of type <code>object</code> The new value of control as JavaScript Date Object or null if value is empty.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.DateTimeInput#fireChange",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.fireChange"
  },
  {
    "description": "Return assigned dateValue property or converts value to JS Date Object.\rReturns null for empty values",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "name": "getDateValue",
    "longname": "sap.m.DateTimeInput#getDateValue",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.getDateValue"
  },
  {
    "description": "Getter for property <code>displayFormat</code>.\rDisplays date value in this given format in text field. Default value is taken from locale settings.\rIf you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.\rIf user browser supports native picker then this property is overwritten by browser with locale settings.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>displayFormat</code>"
      }
    ],
    "name": "getDisplayFormat",
    "longname": "sap.m.DateTimeInput#getDisplayFormat",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.getDisplayFormat"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of DateTimeInput (e.g. Date, Time, DateTime)\r</p><p>\rDefault value is <code>Date</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInputType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.DateTimeInput#getType",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.getType"
  },
  {
    "description": "Getter for property <code>valueFormat</code>.\rGiven value property should match with valueFormat to parse date. Default value is taken from locale settings.\rYou can set and get value in this format.\rIf you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>valueFormat</code>"
      }
    ],
    "name": "getValueFormat",
    "longname": "sap.m.DateTimeInput#getValueFormat",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.getValueFormat"
  },
  {
    "description": "Setter for property <code>dateValue</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "new value for property <code>dateValue</code>",
        "name": "oDateValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDateValue",
    "longname": "sap.m.DateTimeInput#setDateValue",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.setDateValue"
  },
  {
    "description": "Setter for property <code>displayFormat</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>displayFormat</code>",
        "name": "sDisplayFormat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDisplayFormat",
    "longname": "sap.m.DateTimeInput#setDisplayFormat",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.setDisplayFormat"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Date</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInputType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.DateTimeInput#setType",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.setType"
  },
  {
    "description": "This function can be used  to assign new value and this is relevant with valueFormat property(see valueFormat) but independent from what is going to display on the field(see displayFormat).\rAnother way to assign new value is using dateValue property in JsView(see dateValue).\rIf you use both at the same time, latter wins.\r</p><p>\rAlso \"Now\" literal can be assigned as a parameter to show the current date and/or time.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "sValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        }
      }
    ],
    "name": "setValue",
    "longname": "sap.m.DateTimeInput#setValue",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.setValue"
  },
  {
    "description": "Setter for property <code>valueFormat</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>valueFormat</code>",
        "name": "sValueFormat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DateTimeInput"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValueFormat",
    "longname": "sap.m.DateTimeInput#setValueFormat",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.setValueFormat"
  },
  {
    "description": "Defines the width of the input. Default value is 100%",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "sWidth"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.DateTimeInput#setWidth",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "codeName": "sap.m.DateTimeInput.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Dialog.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getShowHeader showHeader} : boolean (default: true)</li>\r<li>{@link #getType type} : sap.m.DialogType (default: sap.m.DialogType.Standard)</li>\r<li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>\r<li>{@link #getStretchOnPhone stretchOnPhone} : boolean (default: false)</li>\r<li>{@link #getStretch stretch} : boolean (default: false)</li>\r<li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>\r<li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>\r<li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>\r<li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li>\r<li>{@link #getSubHeader subHeader} : sap.m.Bar</li>\r<li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>\r<li>{@link #getBeginButton beginButton} : sap.m.Button</li>\r<li>{@link #getEndButton endButton} : sap.m.Button</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>\r<li>{@link #getRightButton rightButton} : string | sap.m.Button</li>\r<li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Dialog#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Dialog#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Dialog#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Dialog#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Dialog",
    "longname": "sap.m.Dialog",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Dialog"
  },
  {
    "description": "This event will be fired after the dialog is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.",
        "name": "oControlEvent.getParameters.origin"
      }
    ],
    "name": "afterClose",
    "longname": "sap.m.Dialog#event:afterClose",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.afterClose"
  },
  {
    "description": "This event will be fired after the dialog is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterOpen",
    "longname": "sap.m.Dialog#event:afterOpen",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.afterOpen"
  },
  {
    "description": "This event will be fired before the dialog is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.",
        "name": "oControlEvent.getParameters.origin"
      }
    ],
    "name": "beforeClose",
    "longname": "sap.m.Dialog#event:beforeClose",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.beforeClose"
  },
  {
    "description": "This event will be fired before the dialog is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeOpen",
    "longname": "sap.m.Dialog#event:beforeOpen",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.beforeOpen"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.Dialog#addContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.addContent"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Dialog</code>.<br/> itself. \r</p><p>\rThis event will be fired after the dialog is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterClose",
    "longname": "sap.m.Dialog#attachAfterClose",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.attachAfterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Dialog</code>.<br/> itself. \r</p><p>\rThis event will be fired after the dialog is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterOpen",
    "longname": "sap.m.Dialog#attachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.attachAfterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Dialog</code>.<br/> itself. \r</p><p>\rThis event will be fired before the dialog is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeClose",
    "longname": "sap.m.Dialog#attachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.attachBeforeClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Dialog</code>.<br/> itself. \r</p><p>\rThis event will be fired before the dialog is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeOpen",
    "longname": "sap.m.Dialog#attachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.attachBeforeOpen"
  },
  {
    "description": "Close the dialog.",
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "close",
    "longname": "sap.m.Dialog#close",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.close"
  },
  {
    "description": "Destroys the beginButton in the aggregation \rnamed <code>beginButton</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "destroyBeginButton",
    "longname": "sap.m.Dialog#destroyBeginButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.destroyBeginButton"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.Dialog#destroyContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.destroyContent"
  },
  {
    "description": "Destroys the customHeader in the aggregation \rnamed <code>customHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "destroyCustomHeader",
    "longname": "sap.m.Dialog#destroyCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.destroyCustomHeader"
  },
  {
    "description": "Destroys the endButton in the aggregation \rnamed <code>endButton</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "destroyEndButton",
    "longname": "sap.m.Dialog#destroyEndButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.destroyEndButton"
  },
  {
    "description": "Destroys the subHeader in the aggregation \rnamed <code>subHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.2",
    "name": "destroySubHeader",
    "longname": "sap.m.Dialog#destroySubHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.destroySubHeader"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterClose",
    "longname": "sap.m.Dialog#detachAfterClose",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.detachAfterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterOpen",
    "longname": "sap.m.Dialog#detachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.detachAfterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeClose",
    "longname": "sap.m.Dialog#detachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.detachBeforeClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeOpen",
    "longname": "sap.m.Dialog#detachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.detachBeforeOpen"
  },
  {
    "description": "Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Dialog.extend",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "codeName": "sap.m.Dialog.extend"
  },
  {
    "description": "Fire event afterClose to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterClose",
    "longname": "sap.m.Dialog#fireAfterClose",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.fireAfterClose"
  },
  {
    "description": "Fire event afterOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterOpen",
    "longname": "sap.m.Dialog#fireAfterOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.fireAfterOpen"
  },
  {
    "description": "Fire event beforeClose to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeClose",
    "longname": "sap.m.Dialog#fireBeforeClose",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.fireBeforeClose"
  },
  {
    "description": "Fire event beforeOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeOpen",
    "longname": "sap.m.Dialog#fireBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.fireBeforeOpen"
  },
  {
    "description": "Getter for aggregation <code>beginButton</code>.<br/>\rThe button which is rendered on the left side (right side in RTL mode) inside the dialog.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        }
      }
    ],
    "since": "1.15.1",
    "name": "getBeginButton",
    "longname": "sap.m.Dialog#getBeginButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getBeginButton"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe content inside the dialog.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.Dialog#getContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getContent"
  },
  {
    "description": "Getter for property <code>contentHeight</code>.\rPreferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>contentHeight</code>"
      }
    ],
    "since": "1.12.1",
    "name": "getContentHeight",
    "longname": "sap.m.Dialog#getContentHeight",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getContentHeight"
  },
  {
    "description": "Getter for property <code>contentWidth</code>.\rPreferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width when runs on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>contentWidth</code>"
      }
    ],
    "since": "1.12.1",
    "name": "getContentWidth",
    "longname": "sap.m.Dialog#getContentWidth",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getContentWidth"
  },
  {
    "description": "Getter for aggregation <code>customHeader</code>.<br/>\rCustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "since": "1.15.1",
    "name": "getCustomHeader",
    "longname": "sap.m.Dialog#getCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getCustomHeader"
  },
  {
    "description": "Getter for aggregation <code>endButton</code>.<br/>\rThe button which is rendered on the right side (left side in RTL mode) inside the dialog.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        }
      }
    ],
    "since": "1.15.1",
    "name": "getEndButton",
    "longname": "sap.m.Dialog#getEndButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getEndButton"
  },
  {
    "description": "Getter for property <code>horizontalScrolling</code>.\rThis property indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.\rDialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>horizontalScrolling</code>"
      }
    ],
    "since": "1.15.1",
    "name": "getHorizontalScrolling",
    "longname": "sap.m.Dialog#getHorizontalScrolling",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getHorizontalScrolling"
  },
  {
    "description": "Getter for property <code>icon</code>.\rIcon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.Dialog#getIcon",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getIcon"
  },
  {
    "description": "Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialFocus</code> association, or null"
      }
    ],
    "since": "1.15.0",
    "name": "getInitialFocus",
    "longname": "sap.m.Dialog#getInitialFocus",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getInitialFocus"
  },
  {
    "description": "LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>leftButton</code> association, or null"
      }
    ],
    "deprecated": "Since version 1.15.1. \r</p><p>\rLeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.",
    "name": "getLeftButton",
    "longname": "sap.m.Dialog#getLeftButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getLeftButton"
  },
  {
    "description": "RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>rightButton</code> association, or null"
      }
    ],
    "deprecated": "Since version 7.20.0. \r</p><p>\rRightButton has benn deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.",
    "name": "getRightButton",
    "longname": "sap.m.Dialog#getRightButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getRightButton"
  },
  {
    "description": "Getter for property <code>showHeader</code>.\rThis property decides whether the header is shown inside the dialog. This property doesn't take effect for Standard type dialog in iOS platform in theme sap_mvi. If this property is set to true, the text and icon property are ignored. This property has a default value true.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showHeader</code>"
      }
    ],
    "since": "1.15.1",
    "name": "getShowHeader",
    "longname": "sap.m.Dialog#getShowHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getShowHeader"
  },
  {
    "description": "Getter for property <code>state</code>.\rState affects the icon and the title color. If other than None is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is None which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>state</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getState",
    "longname": "sap.m.Dialog#getState",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getState"
  },
  {
    "description": "Getter for property <code>stretch</code>.\rWhen this property is set to true, the dialog is stretched to a full screen display. This property is only applicable to standard dialog and message type dialog ignores this property.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>stretch</code>"
      }
    ],
    "since": "1.13.1",
    "name": "getStretch",
    "longname": "sap.m.Dialog#getStretch",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getStretch"
  },
  {
    "description": "Getter for property <code>stretchOnPhone</code>.\rWhen it's set to true, the dialog will be full screen when it runs on a phone.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>stretchOnPhone</code>"
      }
    ],
    "since": "1.11.2",
    "deprecated": "Since version 1.13.1. \rPlease use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.",
    "name": "getStretchOnPhone",
    "longname": "sap.m.Dialog#getStretchOnPhone",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getStretchOnPhone"
  },
  {
    "description": "Getter for aggregation <code>subHeader</code>.<br/>\rWhen subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "since": "1.12.2",
    "name": "getSubHeader",
    "longname": "sap.m.Dialog#getSubHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getSubHeader"
  },
  {
    "description": "Getter for property <code>title</code>.\rTitle text appears in the dialog header.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.Dialog#getTitle",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>type</code>.\rThe type of the dialog. In theme sap_mvi, it only affects the look and feel in iOS platform, type message is with button at the bottom inside of in the header. In theme sap_bluecrystal, the type message will limit the dialog's width within 480px when runs on tablet and desktop.\r</p><p>\rDefault value is <code>Standard</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DialogType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.Dialog#getType",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getType"
  },
  {
    "description": "Getter for property <code>verticalScrolling</code>.\rThis property indicates if user can scroll vertically inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.\rDialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>verticalScrolling</code>"
      }
    ],
    "since": "1.15.1",
    "name": "getVerticalScrolling",
    "longname": "sap.m.Dialog#getVerticalScrolling",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.getVerticalScrolling"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.Dialog#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.Dialog#insertContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.insertContent"
  },
  {
    "description": "The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "since": "1.9.1",
    "name": "isOpen",
    "longname": "sap.m.Dialog#isOpen",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.isOpen"
  },
  {
    "description": "Open the dialog.",
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "open",
    "longname": "sap.m.Dialog#open",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.open"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.Dialog#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.Dialog#removeContent",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.removeContent"
  },
  {
    "description": "Setter for the aggregated <code>beginButton</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "name": "oBeginButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setBeginButton",
    "longname": "sap.m.Dialog#setBeginButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setBeginButton"
  },
  {
    "description": "Setter for property <code>contentHeight</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>contentHeight</code>",
        "name": "sContentHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.1",
    "name": "setContentHeight",
    "longname": "sap.m.Dialog#setContentHeight",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setContentHeight"
  },
  {
    "description": "Setter for property <code>contentWidth</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>contentWidth</code>",
        "name": "sContentWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.1",
    "name": "setContentWidth",
    "longname": "sap.m.Dialog#setContentWidth",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setContentWidth"
  },
  {
    "description": "Setter for the aggregated <code>customHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oCustomHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setCustomHeader",
    "longname": "sap.m.Dialog#setCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setCustomHeader"
  },
  {
    "description": "Setter for the aggregated <code>endButton</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "name": "oEndButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setEndButton",
    "longname": "sap.m.Dialog#setEndButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setEndButton"
  },
  {
    "description": "Setter for property <code>horizontalScrolling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>horizontalScrolling</code>",
        "name": "bHorizontalScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setHorizontalScrolling",
    "longname": "sap.m.Dialog#setHorizontalScrolling",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setHorizontalScrolling"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.Dialog#setIcon",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setIcon"
  },
  {
    "description": "Focus is set to the dialog in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialFocus</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialFocus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setInitialFocus",
    "longname": "sap.m.Dialog#setInitialFocus",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setInitialFocus"
  },
  {
    "description": "LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting leftButton will also set the beginButton internally.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.m.Button"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>leftButton</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vLeftButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.15.1. \r</p><p>\rLeftButton has benn deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.",
    "name": "setLeftButton",
    "longname": "sap.m.Dialog#setLeftButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setLeftButton"
  },
  {
    "description": "RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored. Setting rightButton will also set the endButton internally.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.m.Button"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>rightButton</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vRightButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 7.20.0. \r</p><p>\rRightButton has benn deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.",
    "name": "setRightButton",
    "longname": "sap.m.Dialog#setRightButton",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setRightButton"
  },
  {
    "description": "Setter for property <code>showHeader</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showHeader</code>",
        "name": "bShowHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setShowHeader",
    "longname": "sap.m.Dialog#setShowHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setShowHeader"
  },
  {
    "description": "Setter for property <code>state</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>state</code>",
        "name": "oState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setState",
    "longname": "sap.m.Dialog#setState",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setState"
  },
  {
    "description": "Setter for property <code>stretch</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>stretch</code>",
        "name": "bStretch"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.13.1",
    "name": "setStretch",
    "longname": "sap.m.Dialog#setStretch",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setStretch"
  },
  {
    "description": "Setter for property <code>stretchOnPhone</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>stretchOnPhone</code>",
        "name": "bStretchOnPhone"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "deprecated": "Since version 1.13.1. \rPlease use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.",
    "name": "setStretchOnPhone",
    "longname": "sap.m.Dialog#setStretchOnPhone",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setStretchOnPhone"
  },
  {
    "description": "Setter for the aggregated <code>subHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oSubHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.2",
    "name": "setSubHeader",
    "longname": "sap.m.Dialog#setSubHeader",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setSubHeader"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.Dialog#setTitle",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Standard</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.DialogType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.Dialog#setType",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setType"
  },
  {
    "description": "Setter for property <code>verticalScrolling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>verticalScrolling</code>",
        "name": "bVerticalScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setVerticalScrolling",
    "longname": "sap.m.Dialog#setVerticalScrolling",
    "kind": "function",
    "memberof": "sap.m.Dialog",
    "scope": "instance",
    "codeName": "sap.m.Dialog.prototype.setVerticalScrolling"
  },
  {
    "description": "Constructor for a new DisplayListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getLabel label} : string</li>\r<li>{@link #getValue value} : string</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The display list item consists of a label and a value.",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "DisplayListItem",
    "longname": "sap.m.DisplayListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.DisplayListItem"
  },
  {
    "description": "Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.DisplayListItem.extend",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "codeName": "sap.m.DisplayListItem.extend"
  },
  {
    "description": "Getter for property <code>label</code>.\rList item label\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>label</code>"
      }
    ],
    "name": "getLabel",
    "longname": "sap.m.DisplayListItem#getLabel",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "codeName": "sap.m.DisplayListItem.prototype.getLabel"
  },
  {
    "description": "Getter for property <code>value</code>.\rList item value\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.DisplayListItem#getValue",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "codeName": "sap.m.DisplayListItem.prototype.getValue"
  },
  {
    "description": "Setter for property <code>label</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>label</code>",
        "name": "sLabel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DisplayListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setLabel",
    "longname": "sap.m.DisplayListItem#setLabel",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "codeName": "sap.m.DisplayListItem.prototype.setLabel"
  },
  {
    "description": "Setter for property <code>value</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>value</code>",
        "name": "sValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.DisplayListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValue",
    "longname": "sap.m.DisplayListItem#setValue",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "codeName": "sap.m.DisplayListItem.prototype.setValue"
  },
  {
    "description": "Constructor for a new FacetFilter.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getType type} : sap.m.FacetFilterType (default: sap.m.FacetFilterType.Simple)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getFacets facets} : sap.m.FacetFilterList[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "FacetFilter is used to provide filtering functionality with multiple parameters.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16.0",
    "name": "FacetFilter",
    "longname": "sap.m.FacetFilter",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.FacetFilter"
  },
  {
    "description": "Adds some facet <code>oFacet</code> \rto the aggregation named <code>facets</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "the facet to add; if empty, nothing is inserted",
        "name": "oFacet"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addFacet",
    "longname": "sap.m.FacetFilter#addFacet",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.addFacet"
  },
  {
    "description": "Destroys all the facets in the aggregation \rnamed <code>facets</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyFacets",
    "longname": "sap.m.FacetFilter#destroyFacets",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.destroyFacets"
  },
  {
    "description": "Creates a new subclass of class sap.m.FacetFilter with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.FacetFilter.extend",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "codeName": "sap.m.FacetFilter.extend"
  },
  {
    "description": "Getter for aggregation <code>facets</code>.<br/>\rA collection of facet filter lists. Each list contains a collection of filter values.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.FacetFilterList>"
          ]
        }
      }
    ],
    "name": "getFacets",
    "longname": "sap.m.FacetFilter#getFacets",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.getFacets"
  },
  {
    "description": "Getter for property <code>type</code>.\rThis property defines the default appearance of the FacetFilter on the device.\r</p><p>\r</p><p>\rDefault value is <code>Simple</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.FacetFilter#getType",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.getType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible facet filters are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.FacetFilter#getVisible",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.getVisible"
  },
  {
    "description": "Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation named <code>facets</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "the facet whose index is looked for.",
        "name": "oFacet"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfFacet",
    "longname": "sap.m.FacetFilter#indexOfFacet",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.indexOfFacet"
  },
  {
    "description": "Inserts a facet into the aggregation named <code>facets</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "the facet to insert; if empty, nothing is inserted",
        "name": "oFacet"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the facet should be inserted at; for \r            a negative value of <code>iIndex</code>, the facet is inserted at position 0; for a value \r            greater than the current size of the aggregation, the facet is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertFacet",
    "longname": "sap.m.FacetFilter#insertFacet",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.insertFacet"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>facets</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.FacetFilterList>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllFacets",
    "longname": "sap.m.FacetFilter#removeAllFacets",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.removeAllFacets"
  },
  {
    "description": "Removes an facet from the aggregation named <code>facets</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.FacetFilterList"
          ]
        },
        "description": "the facet to remove or its index or id",
        "name": "vFacet"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "the removed facet or null"
      }
    ],
    "name": "removeFacet",
    "longname": "sap.m.FacetFilter#removeFacet",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.removeFacet"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Simple</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.FacetFilter#setType",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.setType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.FacetFilter#setVisible",
    "kind": "function",
    "memberof": "sap.m.FacetFilter",
    "scope": "instance",
    "codeName": "sap.m.FacetFilter.prototype.setVisible"
  },
  {
    "description": "Constructor for a new FacetFilterItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getSelected selected} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Represents a value for the FacetFilterList control.",
    "augments": [
      "sap.ui.core.Item"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16.0",
    "name": "FacetFilterItem",
    "longname": "sap.m.FacetFilterItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.FacetFilterItem"
  },
  {
    "description": "Creates a new subclass of class sap.m.FacetFilterItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.FacetFilterItem.extend",
    "kind": "function",
    "memberof": "sap.m.FacetFilterItem",
    "codeName": "sap.m.FacetFilterItem.extend"
  },
  {
    "description": "Getter for property <code>selected</code>.\rIndicated that this value is selected in the FacetFilterList.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.FacetFilterItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.FacetFilterItem",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterItem.prototype.getSelected"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.FacetFilterItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.FacetFilterItem",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterItem.prototype.setSelected"
  },
  {
    "description": "Constructor for a new FacetFilterList.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getActive active} : boolean (default: true)</li>\r<li>{@link #getTitle title} : string</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.m.FacetFilterItem[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "FacetFilterList represents a list of values for the FacetFilter control.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16.0",
    "name": "FacetFilterList",
    "longname": "sap.m.FacetFilterList",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.FacetFilterList"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterItem"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.FacetFilterList#addItem",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.addItem"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.FacetFilterList#destroyItems",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.destroyItems"
  },
  {
    "description": "Creates a new subclass of class sap.m.FacetFilterList with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.FacetFilterList.extend",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "codeName": "sap.m.FacetFilterList.extend"
  },
  {
    "description": "Getter for property <code>active</code>.\rIndicated that the facet is active.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>active</code>"
      }
    ],
    "name": "getActive",
    "longname": "sap.m.FacetFilterList#getActive",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.getActive"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rA list of items for the facet.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.FacetFilterItem>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.FacetFilterList#getItems",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.getItems"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe title of the facet.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.FacetFilterList#getTitle",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.getTitle"
  },
  {
    "description": "Checks for the provided <code>sap.m.FacetFilterItem</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterItem"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.FacetFilterList#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterItem"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.FacetFilterList#insertItem",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.FacetFilterItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.FacetFilterList#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.FacetFilterItem"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterItem"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.FacetFilterList#removeItem",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.removeItem"
  },
  {
    "description": "Setter for property <code>active</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>active</code>",
        "name": "bActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActive",
    "longname": "sap.m.FacetFilterList#setActive",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.setActive"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FacetFilterList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.FacetFilterList#setTitle",
    "kind": "function",
    "memberof": "sap.m.FacetFilterList",
    "scope": "instance",
    "codeName": "sap.m.FacetFilterList.prototype.setTitle"
  },
  {
    "description": "Constructor for a new FeedListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>\r<li>{@link #getSender sender} : string</li>\r<li>{@link #getText text} : string</li>\r<li>{@link #getInfo info} : string</li>\r<li>{@link #getTimestamp timestamp} : string</li>\r<li>{@link #getSenderActive senderActive} : boolean (default: true)</li>\r<li>{@link #getIconActive iconActive} : boolean (default: true)</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>\r<li>{@link #getShowIcon showIcon} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.FeedListItem#event:senderPress senderPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.FeedListItem#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The control provides a set of properties for text, sender information, time stamp",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "FeedListItem",
    "longname": "sap.m.FeedListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.FeedListItem"
  },
  {
    "description": "Event is fired when the icon is pressed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Dom reference of the feed item's icon to be used for positioning.",
        "name": "oControlEvent.getParameters.domRef"
      }
    ],
    "name": "iconPress",
    "longname": "sap.m.FeedListItem#event:iconPress",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.iconPress"
  },
  {
    "description": "Event is fired when name of the sender is pressed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Dom reference of the feed item's sender string to be used for positioning.",
        "name": "oControlEvent.getParameters.domRef"
      }
    ],
    "name": "senderPress",
    "longname": "sap.m.FeedListItem#event:senderPress",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.senderPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. \r</p><p>\rEvent is fired when the icon is pressed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachIconPress",
    "longname": "sap.m.FeedListItem#attachIconPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.attachIconPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. \r</p><p>\rEvent is fired when name of the sender is pressed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSenderPress",
    "longname": "sap.m.FeedListItem#attachSenderPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.attachSenderPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachIconPress",
    "longname": "sap.m.FeedListItem#detachIconPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.detachIconPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSenderPress",
    "longname": "sap.m.FeedListItem#detachSenderPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.detachSenderPress"
  },
  {
    "description": "Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.FeedListItem.extend",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "codeName": "sap.m.FeedListItem.extend"
  },
  {
    "description": "Fire event iconPress to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'domRef' of type <code>string</code> Dom reference of the feed item's icon to be used for positioning.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireIconPress",
    "longname": "sap.m.FeedListItem#fireIconPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.fireIconPress"
  },
  {
    "description": "Fire event senderPress to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'domRef' of type <code>string</code> Dom reference of the feed item's sender string to be used for positioning.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSenderPress",
    "longname": "sap.m.FeedListItem#fireSenderPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.fireSenderPress"
  },
  {
    "description": "Getter for property <code>activeIcon</code>.\rIcon displayed when the list item is active.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>activeIcon</code>"
      }
    ],
    "name": "getActiveIcon",
    "longname": "sap.m.FeedListItem#getActiveIcon",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getActiveIcon"
  },
  {
    "description": "Getter for property <code>icon</code>.\rIcon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.FeedListItem#getIcon",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconActive</code>.\rIf true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconActive</code>"
      }
    ],
    "name": "getIconActive",
    "longname": "sap.m.FeedListItem#getIconActive",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getIconActive"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.FeedListItem#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>info</code>.\rThe Info text.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>info</code>"
      }
    ],
    "name": "getInfo",
    "longname": "sap.m.FeedListItem#getInfo",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getInfo"
  },
  {
    "description": "Getter for property <code>sender</code>.\rSender of the chunk\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>sender</code>"
      }
    ],
    "name": "getSender",
    "longname": "sap.m.FeedListItem#getSender",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getSender"
  },
  {
    "description": "Getter for property <code>senderActive</code>.\rIf true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>senderActive</code>"
      }
    ],
    "name": "getSenderActive",
    "longname": "sap.m.FeedListItem#getSenderActive",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getSenderActive"
  },
  {
    "description": "Getter for property <code>showIcon</code>.\rIf set to \"true\" (default), icons will be displayed, if set to false icons are hidden\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showIcon</code>"
      }
    ],
    "name": "getShowIcon",
    "longname": "sap.m.FeedListItem#getShowIcon",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getShowIcon"
  },
  {
    "description": "Getter for property <code>text</code>.\rThe FeedListItem text.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.FeedListItem#getText",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getText"
  },
  {
    "description": "Getter for property <code>timestamp</code>.\rThis chunks timestamp\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>timestamp</code>"
      }
    ],
    "name": "getTimestamp",
    "longname": "sap.m.FeedListItem#getTimestamp",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.getTimestamp"
  },
  {
    "description": "Setter for property <code>activeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>activeIcon</code>",
        "name": "sActiveIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveIcon",
    "longname": "sap.m.FeedListItem#setActiveIcon",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setActiveIcon"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.FeedListItem#setIcon",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconActive</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconActive</code>",
        "name": "bIconActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconActive",
    "longname": "sap.m.FeedListItem#setIconActive",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setIconActive"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.FeedListItem#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>info</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>info</code>",
        "name": "sInfo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfo",
    "longname": "sap.m.FeedListItem#setInfo",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setInfo"
  },
  {
    "description": "Setter for property <code>sender</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>sender</code>",
        "name": "sSender"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSender",
    "longname": "sap.m.FeedListItem#setSender",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setSender"
  },
  {
    "description": "Setter for property <code>senderActive</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>senderActive</code>",
        "name": "bSenderActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSenderActive",
    "longname": "sap.m.FeedListItem#setSenderActive",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setSenderActive"
  },
  {
    "description": "Setter for property <code>showIcon</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showIcon</code>",
        "name": "bShowIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowIcon",
    "longname": "sap.m.FeedListItem#setShowIcon",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setShowIcon"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.FeedListItem#setText",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setText"
  },
  {
    "description": "Setter for property <code>timestamp</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>timestamp</code>",
        "name": "sTimestamp"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FeedListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTimestamp",
    "longname": "sap.m.FeedListItem#setTimestamp",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "codeName": "sap.m.FeedListItem.prototype.setTimestamp"
  },
  {
    "description": "Constructor for a new FlexBox.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>\r<li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>\r<li>{@link #getDirection direction} : sap.m.FlexDirection (default: sap.m.FlexDirection.Row)</li>\r<li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>\r<li>{@link #getRenderType renderType} : sap.m.FlexRendertype (default: sap.m.FlexRendertype.Div)</li>\r<li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent (default: sap.m.FlexJustifyContent.Start)</li>\r<li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems (default: sap.m.FlexAlignItems.Stretch)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The FlexBox control builds the container for a flexible box layout.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "FlexBox",
    "longname": "sap.m.FlexBox",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.FlexBox"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.FlexBox#addItem",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.addItem"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.FlexBox#destroyItems",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.destroyItems"
  },
  {
    "description": "Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.FlexBox.extend",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "codeName": "sap.m.FlexBox.extend"
  },
  {
    "description": "Getter for property <code>alignItems</code>.\rDetermines the layout behavior of items along the cross-axis. \"Baseline\" is not supported in Internet Explorer <10.\r</p><p>\rDefault value is <code>Stretch</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignItems"
          ]
        },
        "description": "the value of property <code>alignItems</code>"
      }
    ],
    "name": "getAlignItems",
    "longname": "sap.m.FlexBox#getAlignItems",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getAlignItems"
  },
  {
    "description": "Getter for property <code>direction</code>.\rDetermines the direction of the layout of child elements\r</p><p>\rDefault value is <code>Row</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexDirection"
          ]
        },
        "description": "the value of property <code>direction</code>"
      }
    ],
    "name": "getDirection",
    "longname": "sap.m.FlexBox#getDirection",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getDirection"
  },
  {
    "description": "Getter for property <code>displayInline</code>.\rDetermines whether the flexbox is in block or inline mode\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>displayInline</code>"
      }
    ],
    "name": "getDisplayInline",
    "longname": "sap.m.FlexBox#getDisplayInline",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getDisplayInline"
  },
  {
    "description": "Getter for property <code>fitContainer</code>.\rDetermines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>fitContainer</code>"
      }
    ],
    "name": "getFitContainer",
    "longname": "sap.m.FlexBox#getFitContainer",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getFitContainer"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "since": "1.9.1",
    "name": "getHeight",
    "longname": "sap.m.FlexBox#getHeight",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getHeight"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rFlex items within the FlexBox layout",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.FlexBox#getItems",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getItems"
  },
  {
    "description": "Getter for property <code>justifyContent</code>.\rDetermines the layout behavior along the main axis. \"SpaceAround\" is currently not supported in most non-Webkit browsers.\r</p><p>\rDefault value is <code>Start</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexJustifyContent"
          ]
        },
        "description": "the value of property <code>justifyContent</code>"
      }
    ],
    "name": "getJustifyContent",
    "longname": "sap.m.FlexBox#getJustifyContent",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getJustifyContent"
  },
  {
    "description": "Getter for property <code>renderType</code>.\rDetermines whether the layout is rendered as a series of divs or as an unordered list (ul)\r</p><p>\rDefault value is <code>Div</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexRendertype"
          ]
        },
        "description": "the value of property <code>renderType</code>"
      }
    ],
    "name": "getRenderType",
    "longname": "sap.m.FlexBox#getRenderType",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getRenderType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rIs the control visible\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.FlexBox#getVisible",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "since": "1.9.1",
    "name": "getWidth",
    "longname": "sap.m.FlexBox#getWidth",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.FlexBox#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.FlexBox#insertItem",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.FlexBox#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.FlexBox#removeItem",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.removeItem"
  },
  {
    "description": "Setter for property <code>alignItems</code>.\r</p><p>\rDefault value is <code>Stretch</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignItems"
          ]
        },
        "description": "new value for property <code>alignItems</code>",
        "name": "oAlignItems"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAlignItems",
    "longname": "sap.m.FlexBox#setAlignItems",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setAlignItems"
  },
  {
    "description": "Setter for property <code>direction</code>.\r</p><p>\rDefault value is <code>Row</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexDirection"
          ]
        },
        "description": "new value for property <code>direction</code>",
        "name": "oDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDirection",
    "longname": "sap.m.FlexBox#setDirection",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setDirection"
  },
  {
    "description": "Setter for property <code>displayInline</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>displayInline</code>",
        "name": "bDisplayInline"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDisplayInline",
    "longname": "sap.m.FlexBox#setDisplayInline",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setDisplayInline"
  },
  {
    "description": "Setter for property <code>fitContainer</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>fitContainer</code>",
        "name": "bFitContainer"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFitContainer",
    "longname": "sap.m.FlexBox#setFitContainer",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setFitContainer"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "setHeight",
    "longname": "sap.m.FlexBox#setHeight",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>justifyContent</code>.\r</p><p>\rDefault value is <code>Start</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexJustifyContent"
          ]
        },
        "description": "new value for property <code>justifyContent</code>",
        "name": "oJustifyContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setJustifyContent",
    "longname": "sap.m.FlexBox#setJustifyContent",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setJustifyContent"
  },
  {
    "description": "Setter for property <code>renderType</code>.\r</p><p>\rDefault value is <code>Div</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexRendertype"
          ]
        },
        "description": "new value for property <code>renderType</code>",
        "name": "oRenderType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRenderType",
    "longname": "sap.m.FlexBox#setRenderType",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setRenderType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.FlexBox#setVisible",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "setWidth",
    "longname": "sap.m.FlexBox#setWidth",
    "kind": "function",
    "memberof": "sap.m.FlexBox",
    "scope": "instance",
    "codeName": "sap.m.FlexBox.prototype.setWidth"
  },
  {
    "description": "Constructor for a new FlexItemData.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf (default: sap.m.FlexAlignSelf.Auto)</li>\r<li>{@link #getOrder order} : int (default: 0)</li>\r<li>{@link #getGrowFactor growFactor} : float (default: 0)</li>\r<li>{@link #getStyleClass styleClass} : string (default: '')</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Holds layout data for a FlexBox",
    "augments": [
      "sap.ui.core.LayoutData"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "FlexItemData",
    "longname": "sap.m.FlexItemData",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.FlexItemData"
  },
  {
    "description": "Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.FlexItemData.extend",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "codeName": "sap.m.FlexItemData.extend"
  },
  {
    "description": "Getter for property <code>alignSelf</code>.\rDetermines cross-axis alignment of individual element (not currently supported in Internet Explorer)\r</p><p>\rDefault value is <code>Auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignSelf"
          ]
        },
        "description": "the value of property <code>alignSelf</code>"
      }
    ],
    "name": "getAlignSelf",
    "longname": "sap.m.FlexItemData#getAlignSelf",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.getAlignSelf"
  },
  {
    "description": "Getter for property <code>growFactor</code>.\rDetermines the flexibility of the flex item when allocatable space is remaining.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>growFactor</code>"
      }
    ],
    "name": "getGrowFactor",
    "longname": "sap.m.FlexItemData#getGrowFactor",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.getGrowFactor"
  },
  {
    "description": "Getter for property <code>order</code>.\rDetermines the display order of flex items independent of their source code order.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>order</code>"
      }
    ],
    "name": "getOrder",
    "longname": "sap.m.FlexItemData#getOrder",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.getOrder"
  },
  {
    "description": "Getter for property <code>styleClass</code>.\rThe style class will be applied to the flex item and can be used for CSS selectors\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>styleClass</code>"
      }
    ],
    "deprecated": "Since version 1.11.2. \rGeneric addStyleClass method is available on the control",
    "name": "getStyleClass",
    "longname": "sap.m.FlexItemData#getStyleClass",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.getStyleClass"
  },
  {
    "description": "Setter for property <code>alignSelf</code>.\r</p><p>\rDefault value is <code>Auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignSelf"
          ]
        },
        "description": "new value for property <code>alignSelf</code>",
        "name": "oAlignSelf"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexItemData"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAlignSelf",
    "longname": "sap.m.FlexItemData#setAlignSelf",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.setAlignSelf"
  },
  {
    "description": "Setter for property <code>growFactor</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>growFactor</code>",
        "name": "fGrowFactor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexItemData"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setGrowFactor",
    "longname": "sap.m.FlexItemData#setGrowFactor",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.setGrowFactor"
  },
  {
    "description": "Setter for property <code>order</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>order</code>",
        "name": "iOrder"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexItemData"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setOrder",
    "longname": "sap.m.FlexItemData#setOrder",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.setOrder"
  },
  {
    "description": "Setter for property <code>styleClass</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>styleClass</code>",
        "name": "sStyleClass"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexItemData"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.11.2. \rGeneric addStyleClass method is available on the control",
    "name": "setStyleClass",
    "longname": "sap.m.FlexItemData#setStyleClass",
    "kind": "function",
    "memberof": "sap.m.FlexItemData",
    "scope": "instance",
    "codeName": "sap.m.FlexItemData.prototype.setStyleClass"
  },
  {
    "description": "Constructor for a new GroupHeaderListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getCount count} : string</li>\r<li>{@link #getUpperCase upperCase} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The group header list item is used to display the title of a group and act as separator between groups in Lists.\r</p><p>\rThere are several API parts inherited from ListItemBase which do not apply here:\rThe properties \"type\", \"unread\", \"selected\" and \"counter\" are currently ignored.\rTap events will not be fired.",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "GroupHeaderListItem",
    "longname": "sap.m.GroupHeaderListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.GroupHeaderListItem"
  },
  {
    "description": "Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.GroupHeaderListItem.extend",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "codeName": "sap.m.GroupHeaderListItem.extend"
  },
  {
    "description": "Getter for property <code>count</code>.\rA text to be displayed in the group header in brackets next to the group title. Usually the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.\rWill not be displayed if not set.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>count</code>"
      }
    ],
    "name": "getCount",
    "longname": "sap.m.GroupHeaderListItem#getCount",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "codeName": "sap.m.GroupHeaderListItem.prototype.getCount"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe title of the group header.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.GroupHeaderListItem#getTitle",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "codeName": "sap.m.GroupHeaderListItem.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>upperCase</code>.\rTitle will be put to capital letters by default, otherwise set this property to 'false'\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>upperCase</code>"
      }
    ],
    "since": "1.13.2",
    "name": "getUpperCase",
    "longname": "sap.m.GroupHeaderListItem#getUpperCase",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "codeName": "sap.m.GroupHeaderListItem.prototype.getUpperCase"
  },
  {
    "description": "Setter for property <code>count</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>count</code>",
        "name": "sCount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.GroupHeaderListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCount",
    "longname": "sap.m.GroupHeaderListItem#setCount",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "codeName": "sap.m.GroupHeaderListItem.prototype.setCount"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.GroupHeaderListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.GroupHeaderListItem#setTitle",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "codeName": "sap.m.GroupHeaderListItem.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>upperCase</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>upperCase</code>",
        "name": "bUpperCase"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.GroupHeaderListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.13.2",
    "name": "setUpperCase",
    "longname": "sap.m.GroupHeaderListItem#setUpperCase",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "codeName": "sap.m.GroupHeaderListItem.prototype.setUpperCase"
  },
  {
    "description": "Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities for growing",
    "augments": [
      "sap.ui.base.Object"
    ],
    "tags": [
      {
        "originalTitle": "experimental",
        "title": "experimental",
        "text": "Since 1.16. This class is experimental and provides only limited functionality. Also the API might be changed in future.",
        "value": "Since 1.16. This class is experimental and provides only limited functionality. Also the API might be changed in future."
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "the ListBase control of which this Growing is the delegate",
        "name": "oControl"
      }
    ],
    "kind": "class",
    "access": "protected",
    "name": "GrowingEnablement",
    "longname": "sap.m.GrowingEnablement",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.GrowingEnablement"
  },
  {
    "description": "Constructor for a new GrowingList.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getThreshold threshold} : int (default: 20)</li>\r<li>{@link #getTriggerText triggerText} : string</li>\r<li>{@link #getScrollToLoad scrollToLoad} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.",
    "augments": [
      "sap.m.List"
    ],
    "version": "1.15.1-SNAPSHOT",
    "deprecated": "Since version 1.16. \rInstead use \"List\" or \"Table\" control with setting \"growing\" property to \"true\"",
    "name": "GrowingList",
    "longname": "sap.m.GrowingList",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.GrowingList"
  },
  {
    "description": "Creates a new subclass of class sap.m.GrowingList with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.GrowingList.extend",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "codeName": "sap.m.GrowingList.extend"
  },
  {
    "description": "Getter for property <code>scrollToLoad</code>.\rIf you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.\rNOTE: This property can be set true, if growing property is set \"true\" and if you only have one instance of this control inside the scroll container(e.g Page).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>scrollToLoad</code>"
      }
    ],
    "since": "1.16",
    "name": "getScrollToLoad",
    "longname": "sap.m.GrowingList#getScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "codeName": "sap.m.GrowingList.prototype.getScrollToLoad"
  },
  {
    "description": "Getter for property <code>threshold</code>.\rNumber of items requested from the server. To activate this you should set growing property to \"true\"\r</p><p>\rDefault value is <code>20</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>threshold</code>"
      }
    ],
    "since": "1.16",
    "name": "getThreshold",
    "longname": "sap.m.GrowingList#getThreshold",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "codeName": "sap.m.GrowingList.prototype.getThreshold"
  },
  {
    "description": "Getter for property <code>triggerText</code>.\rText which is displayed on the trigger at the end of the list. The default is a translated text (\"Load More Data\") coming from the messagebundle properties.\rThis property can be used only if growing property is set \"true\" and scrollToLoad property is set \"false\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>triggerText</code>"
      }
    ],
    "since": "1.16",
    "name": "getTriggerText",
    "longname": "sap.m.GrowingList#getTriggerText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "codeName": "sap.m.GrowingList.prototype.getTriggerText"
  },
  {
    "description": "Setter for property <code>scrollToLoad</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>scrollToLoad</code>",
        "name": "bScrollToLoad"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.GrowingList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setScrollToLoad",
    "longname": "sap.m.GrowingList#setScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "codeName": "sap.m.GrowingList.prototype.setScrollToLoad"
  },
  {
    "description": "Setter for property <code>threshold</code>.\r</p><p>\rDefault value is <code>20</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>threshold</code>",
        "name": "iThreshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.GrowingList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setThreshold",
    "longname": "sap.m.GrowingList#setThreshold",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "codeName": "sap.m.GrowingList.prototype.setThreshold"
  },
  {
    "description": "Setter for property <code>triggerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>triggerText</code>",
        "name": "sTriggerText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.GrowingList"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setTriggerText",
    "longname": "sap.m.GrowingList#setTriggerText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "codeName": "sap.m.GrowingList.prototype.setTriggerText"
  },
  {
    "description": "Constructor for a new HBox.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.",
    "augments": [
      "sap.m.FlexBox"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "HBox",
    "longname": "sap.m.HBox",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.HBox"
  },
  {
    "description": "Creates a new subclass of class sap.m.HBox with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.HBox.extend",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "codeName": "sap.m.HBox.extend"
  },
  {
    "description": "Constructor for a new IconTabBar.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getShowSelection showSelection} : boolean (default: true)</li>\r<li>{@link #getExpandable expandable} : boolean (default: true)</li>\r<li>{@link #getExpanded expanded} : boolean (default: true)</li>\r<li>{@link #getSelectedKey selectedKey} : string</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.m.IconTab[]</li>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.IconTabBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.IconTabBar#event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A tab bar with large icons",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "IconTabBar",
    "longname": "sap.m.IconTabBar",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.IconTabBar"
  },
  {
    "description": "Indicates that the tab will expand or collapse",
    "kind": "event",
    "since": "1.15.0",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "If the tab will expand, this is true.",
        "name": "oControlEvent.getParameters.expand"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "If the tab will collapse, this is true.",
        "name": "oControlEvent.getParameters.collapse"
      }
    ],
    "name": "expand",
    "longname": "sap.m.IconTabBar#event:expand",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.expand"
  },
  {
    "description": "This event will be fired when an item is selected.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "The selected item.",
        "name": "oControlEvent.getParameters.item"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the selected item.",
        "name": "oControlEvent.getParameters.key"
      },
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "This parameter is deprecated since 1.15.0! Please use parameter \"item\" instead.",
        "name": "oControlEvent.getParameters.selectedItem"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "This parameter is deprecated since 1.15.0! Please use parameter \"key\" instead.",
        "name": "oControlEvent.getParameters.selectedKey"
      }
    ],
    "name": "select",
    "longname": "sap.m.IconTabBar#event:select",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.select"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.IconTabBar#addContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.addContent"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.IconTab"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.IconTabBar#addItem",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. \r</p><p>\rIndicates that the tab will expand or collapse",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "attachExpand",
    "longname": "sap.m.IconTabBar#attachExpand",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.attachExpand"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. \r</p><p>\rThis event will be fired when an item is selected.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.IconTabBar#attachSelect",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.attachSelect"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.IconTabBar#destroyContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.destroyContent"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.IconTabBar#destroyItems",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.destroyItems"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'expand' event of this <code>sap.m.IconTabBar</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "detachExpand",
    "longname": "sap.m.IconTabBar#detachExpand",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.detachExpand"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.IconTabBar#detachSelect",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.detachSelect"
  },
  {
    "description": "Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.IconTabBar.extend",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "codeName": "sap.m.IconTabBar.extend"
  },
  {
    "description": "Fire event expand to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'expand' of type <code>boolean</code> If the tab will expand, this is true.</li>\r<li>'collapse' of type <code>boolean</code> If the tab will collapse, this is true.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "since": "1.15.0",
    "name": "fireExpand",
    "longname": "sap.m.IconTabBar#fireExpand",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.fireExpand"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'item' of type <code>sap.m.IconTabFilter</code> The selected item.</li>\r<li>'key' of type <code>string</code> The key of the selected item.</li>\r<li>'selectedItem' of type <code>sap.m.IconTabFilter</code> This parameter is deprecated since 1.15.0! Please use parameter \"item\" instead.</li>\r<li>'selectedKey' of type <code>string</code> This parameter is deprecated since 1.15.0! Please use parameter \"key\" instead.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.IconTabBar#fireSelect",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.fireSelect"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe contents displayed below the IconTabBar.\rIf there are multiple contents, they are rendered after each other. The developer has to manage to display the right one or use the content aggregation inside the IconTabFilter (which will be displayed instead if it is set).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.IconTabBar#getContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getContent"
  },
  {
    "description": "Getter for property <code>expandable</code>.\rDefines if the tabs can be collapsed and expanded\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>expandable</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getExpandable",
    "longname": "sap.m.IconTabBar#getExpandable",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getExpandable"
  },
  {
    "description": "Getter for property <code>expanded</code>.\rIndicates if the actual tab is expanded or not\r</p><p>\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>expanded</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getExpanded",
    "longname": "sap.m.IconTabBar#getExpanded",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getExpanded"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rThe items displayed in the IconTabBar",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.IconTab>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.IconTabBar#getItems",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getItems"
  },
  {
    "description": "Getter for property <code>selectedKey</code>.\rKey of the selected item.\r</p><p>\rIf the key has no corresponding aggregated item, no changes will apply.\rIf duplicate keys exists the first item matching the key is used.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>selectedKey</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getSelectedKey",
    "longname": "sap.m.IconTabBar#getSelectedKey",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getSelectedKey"
  },
  {
    "description": "Getter for property <code>showSelection</code>.\rDefines whether the current selection should be visualized\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showSelection</code>"
      }
    ],
    "deprecated": "Since version 1.15.0. \rRegarding to changes of this control this property is not needed anymore.",
    "name": "getShowSelection",
    "longname": "sap.m.IconTabBar#getShowSelection",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getShowSelection"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible controls are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getVisible",
    "longname": "sap.m.IconTabBar#getVisible",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.getVisible"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.IconTabBar#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.indexOfContent"
  },
  {
    "description": "Checks for the provided <code>sap.m.IconTab</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.IconTab"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.IconTabBar#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.indexOfItem"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.IconTabBar#insertContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.insertContent"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.IconTab"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.IconTabBar#insertItem",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.IconTabBar#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.removeAllContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.IconTab>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.IconTabBar#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.removeAllItems"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.IconTabBar#removeContent",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.removeContent"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.IconTab"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTab"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.IconTabBar#removeItem",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.removeItem"
  },
  {
    "description": "Setter for property <code>expandable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>expandable</code>",
        "name": "bExpandable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setExpandable",
    "longname": "sap.m.IconTabBar#setExpandable",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.setExpandable"
  },
  {
    "description": "Setter for property <code>expanded</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>expanded</code>",
        "name": "bExpanded"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setExpanded",
    "longname": "sap.m.IconTabBar#setExpanded",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.setExpanded"
  },
  {
    "description": "Setter for property <code>selectedKey</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>selectedKey</code>",
        "name": "sSelectedKey"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setSelectedKey",
    "longname": "sap.m.IconTabBar#setSelectedKey",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.setSelectedKey"
  },
  {
    "description": "Setter for property <code>showSelection</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showSelection</code>",
        "name": "bShowSelection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.15.0. \rRegarding to changes of this control this property is not needed anymore.",
    "name": "setShowSelection",
    "longname": "sap.m.IconTabBar#setShowSelection",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.setShowSelection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setVisible",
    "longname": "sap.m.IconTabBar#setVisible",
    "kind": "function",
    "memberof": "sap.m.IconTabBar",
    "scope": "instance",
    "codeName": "sap.m.IconTabBar.prototype.setVisible"
  },
  {
    "description": "Constructor for a new IconTabFilter.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getCount count} : string (default: '')</li>\r<li>{@link #getShowAll showAll} : boolean (default: false)</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>\r<li>{@link #getIconColor iconColor} : sap.ui.core.IconColor (default: sap.ui.core.IconColor.Default)</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The filter item class",
    "augments": [
      "sap.ui.core.Item"
    ],
    "tags": [
      {
        "originalTitle": "implements",
        "title": "implements",
        "text": "sap.m.IconTab",
        "value": "sap.m.IconTab"
      }
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "IconTabFilter",
    "longname": "sap.m.IconTabFilter",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.IconTabFilter"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "addContent",
    "longname": "sap.m.IconTabFilter#addContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.addContent"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "destroyContent",
    "longname": "sap.m.IconTabFilter#destroyContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.destroyContent"
  },
  {
    "description": "Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.IconTabFilter.extend",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "codeName": "sap.m.IconTabFilter.extend"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe content to show for this item (optional).\rIf this content is set, it will be displayed instead of the general content inside the IconTabBar.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "since": "1.15.0",
    "name": "getContent",
    "longname": "sap.m.IconTabFilter#getContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.getContent"
  },
  {
    "description": "Getter for property <code>count</code>.\rThe number of available items if this filter is applied\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>count</code>"
      }
    ],
    "name": "getCount",
    "longname": "sap.m.IconTabFilter#getCount",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.getCount"
  },
  {
    "description": "Getter for property <code>icon</code>.\rThe icon to display for this item.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.IconTabFilter#getIcon",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconColor</code>.\rIf an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).\rPossible semantic colors are: Neutral, Positive, Critical, Negative.\rInstead of the semantic icon color the brand color can be used, this is named Default.\rSemantic colors and brand colors should not be mixed up inside one IconTabBar.\r</p><p>\rDefault value is <code>Default</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.IconColor"
          ]
        },
        "description": "the value of property <code>iconColor</code>"
      }
    ],
    "name": "getIconColor",
    "longname": "sap.m.IconTabFilter#getIconColor",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.getIconColor"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.IconTabFilter#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>showAll</code>.\rEnables special visualization for disabled filter (show all items)\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showAll</code>"
      }
    ],
    "name": "getShowAll",
    "longname": "sap.m.IconTabFilter#getShowAll",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.getShowAll"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "since": "1.15.0",
    "name": "indexOfContent",
    "longname": "sap.m.IconTabFilter#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "insertContent",
    "longname": "sap.m.IconTabFilter#insertContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.insertContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "since": "1.15.0",
    "name": "removeAllContent",
    "longname": "sap.m.IconTabFilter#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "since": "1.15.0",
    "name": "removeContent",
    "longname": "sap.m.IconTabFilter#removeContent",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.removeContent"
  },
  {
    "description": "Setter for property <code>count</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>count</code>",
        "name": "sCount"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCount",
    "longname": "sap.m.IconTabFilter#setCount",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.setCount"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.IconTabFilter#setIcon",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconColor</code>.\r</p><p>\rDefault value is <code>Default</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.IconColor"
          ]
        },
        "description": "new value for property <code>iconColor</code>",
        "name": "oIconColor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconColor",
    "longname": "sap.m.IconTabFilter#setIconColor",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.setIconColor"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.IconTabFilter#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>showAll</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showAll</code>",
        "name": "bShowAll"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabFilter"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowAll",
    "longname": "sap.m.IconTabFilter#setShowAll",
    "kind": "function",
    "memberof": "sap.m.IconTabFilter",
    "scope": "instance",
    "codeName": "sap.m.IconTabFilter.prototype.setShowAll"
  },
  {
    "description": "Constructor for a new IconTabSeparator.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A tab separator item class",
    "augments": [
      "sap.ui.core.Element"
    ],
    "tags": [
      {
        "originalTitle": "implements",
        "title": "implements",
        "text": "sap.m.IconTab",
        "value": "sap.m.IconTab"
      }
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "IconTabSeparator",
    "longname": "sap.m.IconTabSeparator",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.IconTabSeparator"
  },
  {
    "description": "Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.IconTabSeparator.extend",
    "kind": "function",
    "memberof": "sap.m.IconTabSeparator",
    "codeName": "sap.m.IconTabSeparator.extend"
  },
  {
    "description": "Getter for property <code>icon</code>.\rThe icon to display for this separator. If no icon is given, a separator line will be used instead.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.IconTabSeparator#getIcon",
    "kind": "function",
    "memberof": "sap.m.IconTabSeparator",
    "scope": "instance",
    "codeName": "sap.m.IconTabSeparator.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.IconTabSeparator#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.IconTabSeparator",
    "scope": "instance",
    "codeName": "sap.m.IconTabSeparator.prototype.getIconDensityAware"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabSeparator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.IconTabSeparator#setIcon",
    "kind": "function",
    "memberof": "sap.m.IconTabSeparator",
    "scope": "instance",
    "codeName": "sap.m.IconTabSeparator.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.IconTabSeparator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.IconTabSeparator#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.IconTabSeparator",
    "scope": "instance",
    "codeName": "sap.m.IconTabSeparator.prototype.setIconDensityAware"
  },
  {
    "description": "Constructor for a new Image.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getSrc src} : sap.ui.core.URI</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize</li>\r<li>{@link #getDecorative decorative} : boolean (default: true)</li>\r<li>{@link #getAlt alt} : string</li>\r<li>{@link #getUseMap useMap} : string</li>\r<li>{@link #getDensityAware densityAware} : boolean (default: true)</li>\r<li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: \"\")</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Image#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Image#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A wrapper around the IMG tag. The image can be loaded from a remote or local server.\r</p><p>\rDensity related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.\r</p><p>\rThere are various size setting options available, and the images can be combined with actions.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Image",
    "longname": "sap.m.Image",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Image"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.Image#event:press",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.press"
  },
  {
    "description": "Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.Image#event:tap",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Image</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Image</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.Image#attachPress",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Image</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Image</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control. (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.Image#attachTap",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Image</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.Image#detachPress",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Image</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.Image#detachTap",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.detachTap"
  },
  {
    "description": "Creates a new subclass of class sap.m.Image with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Image.extend",
    "kind": "function",
    "memberof": "sap.m.Image",
    "codeName": "sap.m.Image.extend"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.Image#firePress",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.Image#fireTap",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>activeSrc</code>.\rThe source property when this image is tapped.\r</p><p>\rDefault value is <code>\"\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>activeSrc</code>"
      }
    ],
    "name": "getActiveSrc",
    "longname": "sap.m.Image#getActiveSrc",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getActiveSrc"
  },
  {
    "description": "Getter for property <code>alt</code>.\rThe alternative text that is displayed in case the Image is not available, or cannot be displayed.\rIf the image is set to decorative this property is ignored.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>alt</code>"
      }
    ],
    "name": "getAlt",
    "longname": "sap.m.Image#getAlt",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getAlt"
  },
  {
    "description": "Getter for property <code>decorative</code>.\rA decorative image is included for design reasons. Accessibility tools will ignore decorative images.\r</p><p>\rNote: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).\rA decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>decorative</code>"
      }
    ],
    "name": "getDecorative",
    "longname": "sap.m.Image#getDecorative",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getDecorative"
  },
  {
    "description": "Getter for property <code>densityAware</code>.\rIf this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.\r</p><p>\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>densityAware</code>"
      }
    ],
    "name": "getDensityAware",
    "longname": "sap.m.Image#getDensityAware",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getDensityAware"
  },
  {
    "description": "Getter for property <code>height</code>.\rWhen the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.Image#getHeight",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getHeight"
  },
  {
    "description": "Getter for property <code>src</code>.\rRelative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>src</code>"
      }
    ],
    "name": "getSrc",
    "longname": "sap.m.Image#getSrc",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getSrc"
  },
  {
    "description": "Getter for property <code>useMap</code>.\rThe name of the image map that defines the clickable areas\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>useMap</code>"
      }
    ],
    "name": "getUseMap",
    "longname": "sap.m.Image#getUseMap",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getUseMap"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible images are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Image#getVisible",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rWhen the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Image#getWidth",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.getWidth"
  },
  {
    "description": "This overrides the default setter of the activeSrc property in order to avoid the rerendering.",
    "name": "setActiveSrc",
    "longname": "sap.m.Image#setActiveSrc",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setActiveSrc"
  },
  {
    "description": "Setter for property <code>alt</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>alt</code>",
        "name": "sAlt"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAlt",
    "longname": "sap.m.Image#setAlt",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setAlt"
  },
  {
    "description": "Setter for property <code>decorative</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>decorative</code>",
        "name": "bDecorative"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDecorative",
    "longname": "sap.m.Image#setDecorative",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setDecorative"
  },
  {
    "description": "Setter for property <code>densityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>densityAware</code>",
        "name": "bDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDensityAware",
    "longname": "sap.m.Image#setDensityAware",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setDensityAware"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.Image#setHeight",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setHeight"
  },
  {
    "description": "This overrides the default setter of the iconDensityAware property in order to avoid the rerendering.",
    "name": "setIconDensityAware",
    "longname": "sap.m.Image#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setIconDensityAware"
  },
  {
    "description": "This overrides the default setter of the src property and update the dom node.",
    "name": "setSrc",
    "longname": "sap.m.Image#setSrc",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setSrc"
  },
  {
    "description": "Setter for property <code>useMap</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>useMap</code>",
        "name": "sUseMap"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUseMap",
    "longname": "sap.m.Image#setUseMap",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setUseMap"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Image#setVisible",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Image#setWidth",
    "kind": "function",
    "memberof": "sap.m.Image",
    "scope": "instance",
    "codeName": "sap.m.Image.prototype.setWidth"
  },
  {
    "description": "Creates or updates an image control.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "id of the image to be dealt with.",
        "name": "sImgId"
      },
      {
        "type": {
          "names": [
            "sap.m.Image"
          ]
        },
        "description": "the image to update. If undefined, a new image will be created.",
        "name": "oImageControl"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "oImageControl's parentControl.",
        "name": "oParent"
      },
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "description": "map object that contains key value pairs if image propeties. The 'src' property\rMUST be contained. Also the map's keys must be names of image properties",
        "name": "mProperties"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of css classes which will be added if the image needs to be created.",
        "name": "aCssClassesToAdd"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "all css clases that oImageControl has and which are contained in this array\rare removed bevore adding the css classes listed in aCssClassesToAdd.",
        "name": "aCssClassesToRemove"
      }
    ],
    "returns": [
      {
        "description": "the new or updated image control"
      }
    ],
    "access": "protected",
    "memberof": "sap.m.ImageHelper",
    "name": "getImageControl",
    "longname": "sap.m.ImageHelper.getImageControl",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.ImageHelper.getImageControl"
  },
  {
    "description": "Constructor for a new InfoBar.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string (default: '')</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getActive active} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.InfoBar#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "InfoBar displays extra information to the user and allows to interact with press event.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "InfoBar",
    "longname": "sap.m.InfoBar",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.InfoBar"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.InfoBar#event:press",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.press"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.InfoBar</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.InfoBar</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.InfoBar</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.InfoBar#attachPress",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.attachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.InfoBar</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.InfoBar#detachPress",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.detachPress"
  },
  {
    "description": "Creates a new subclass of class sap.m.InfoBar with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.InfoBar.extend",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "codeName": "sap.m.InfoBar.extend"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.InfoBar#firePress",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.firePress"
  },
  {
    "description": "Getter for property <code>active</code>.\rIndicates that the control is clickable.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>active</code>"
      }
    ],
    "name": "getActive",
    "longname": "sap.m.InfoBar#getActive",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.getActive"
  },
  {
    "description": "Getter for property <code>text</code>.\rThe information text to be shown.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.InfoBar#getText",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.getText"
  },
  {
    "description": "Getter for property <code>visible</code>.\rSets the visibility of the control.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.InfoBar#getVisible",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the control.\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.InfoBar#getWidth",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>active</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>active</code>",
        "name": "bActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActive",
    "longname": "sap.m.InfoBar#setActive",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.setActive"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.InfoBar#setText",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.setText"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.InfoBar#setVisible",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>100%</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.InfoBar#setWidth",
    "kind": "function",
    "memberof": "sap.m.InfoBar",
    "scope": "instance",
    "codeName": "sap.m.InfoBar.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Input.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getType type} : sap.m.InputType (default: sap.m.InputType.Text)</li>\r<li>{@link #getMaxLength maxLength} : int (default: 0)</li>\r<li>{@link #getValueStateText valueStateText} : string</li>\r<li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>\r<li>{@link #getDateFormat dateFormat} : string (default: 'YYYY-MM-dd')</li>\r<li>{@link #getShowValueHelp showValueHelp} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Input#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Input#event:valueHelpRequest valueHelpRequest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Enables users to input data.",
    "augments": [
      "sap.m.InputBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Input",
    "longname": "sap.m.Input",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Input"
  },
  {
    "description": "This event is fired when the value of the input is changed - e.g. at each keypress",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The new value of the input.",
        "name": "oControlEvent.getParameters.newValue"
      }
    ],
    "name": "liveChange",
    "longname": "sap.m.Input#event:liveChange",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.liveChange"
  },
  {
    "description": "When the value help indicator is clicked, this event will be fired.",
    "kind": "event",
    "since": "1.16",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "valueHelpRequest",
    "longname": "sap.m.Input#event:valueHelpRequest",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.valueHelpRequest"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Input</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Input</code>.<br/> itself. \r</p><p>\rThis event is fired when the value of the input is changed - e.g. at each keypress",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachLiveChange",
    "longname": "sap.m.Input#attachLiveChange",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.attachLiveChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Input</code>.<br/> itself. \r</p><p>\rWhen the value help indicator is clicked, this event will be fired.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "attachValueHelpRequest",
    "longname": "sap.m.Input#attachValueHelpRequest",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.attachValueHelpRequest"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Input</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachLiveChange",
    "longname": "sap.m.Input#detachLiveChange",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.detachLiveChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'valueHelpRequest' event of this <code>sap.m.Input</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "detachValueHelpRequest",
    "longname": "sap.m.Input#detachValueHelpRequest",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.detachValueHelpRequest"
  },
  {
    "description": "Creates a new subclass of class sap.m.Input with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Input.extend",
    "kind": "function",
    "memberof": "sap.m.Input",
    "codeName": "sap.m.Input.extend"
  },
  {
    "description": "Fire event liveChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'newValue' of type <code>string</code> The new value of the input.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireLiveChange",
    "longname": "sap.m.Input#fireLiveChange",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.fireLiveChange"
  },
  {
    "description": "Fire event valueHelpRequest to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "since": "1.16",
    "name": "fireValueHelpRequest",
    "longname": "sap.m.Input#fireValueHelpRequest",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.fireValueHelpRequest"
  },
  {
    "description": "Getter for property <code>dateFormat</code>.\rOnly used if type=date and no datepicker is available.\rThe data is displayed and the user input is parsed according to this format.\rNOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).\r</p><p>\rDefault value is <code>YYYY-MM-dd</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>dateFormat</code>"
      }
    ],
    "deprecated": "Since version 1.9.1. \rsap.m.DateTimeInput should be used for date/time inputs and formating.",
    "name": "getDateFormat",
    "longname": "sap.m.Input#getDateFormat",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.getDateFormat"
  },
  {
    "description": "Getter for property <code>maxLength</code>.\rMaximum number of characters. Value '0' means the feature is switched off.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>maxLength</code>"
      }
    ],
    "name": "getMaxLength",
    "longname": "sap.m.Input#getMaxLength",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.getMaxLength"
  },
  {
    "description": "Getter for property <code>showValueHelp</code>.\rIf set to true, a value help indicator will be displayed inside the control. When clicked the event \"valueHelpRequest\" will be fired.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showValueHelp</code>"
      }
    ],
    "since": "1.16",
    "name": "getShowValueHelp",
    "longname": "sap.m.Input#getShowValueHelp",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.getShowValueHelp"
  },
  {
    "description": "Getter for property <code>showValueStateMessage</code>.\rWhether the value state message should be shown.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showValueStateMessage</code>"
      }
    ],
    "name": "getShowValueStateMessage",
    "longname": "sap.m.Input#getShowValueStateMessage",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.getShowValueStateMessage"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of input (e.g. Text, Number, Email, Phone)\r</p><p>\rDefault value is <code>Text</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.Input#getType",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.getType"
  },
  {
    "description": "Getter for property <code>valueStateText</code>.\rThe text which is shown in the value state message popup. If not specfied a default text is shown.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>valueStateText</code>"
      }
    ],
    "name": "getValueStateText",
    "longname": "sap.m.Input#getValueStateText",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.getValueStateText"
  },
  {
    "description": "Setter for property <code>dateFormat</code>.\r</p><p>\rDefault value is <code>YYYY-MM-dd</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>dateFormat</code>",
        "name": "sDateFormat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.9.1. \rsap.m.DateTimeInput should be used for date/time inputs and formating.",
    "name": "setDateFormat",
    "longname": "sap.m.Input#setDateFormat",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setDateFormat"
  },
  {
    "description": "Setter for property <code>maxLength</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>maxLength</code>",
        "name": "iMaxLength"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMaxLength",
    "longname": "sap.m.Input#setMaxLength",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setMaxLength"
  },
  {
    "description": "Setter for property <code>showValueHelp</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showValueHelp</code>",
        "name": "bShowValueHelp"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setShowValueHelp",
    "longname": "sap.m.Input#setShowValueHelp",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setShowValueHelp"
  },
  {
    "description": "Setter for property <code>showValueStateMessage</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showValueStateMessage</code>",
        "name": "bShowValueStateMessage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowValueStateMessage",
    "longname": "sap.m.Input#setShowValueStateMessage",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setShowValueStateMessage"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Text</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.InputType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.Input#setType",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setType"
  },
  {
    "description": "Setter for property <code>valueStateText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>valueStateText</code>",
        "name": "sValueStateText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Input"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValueStateText",
    "longname": "sap.m.Input#setValueStateText",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setValueStateText"
  },
  {
    "description": "Defines the width of the input. Default value is 100%",
    "params": [
      {
        "name": "sWidth"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Input#setWidth",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "codeName": "sap.m.Input.prototype.setWidth"
  },
  {
    "description": "Constructor for a new InputBase.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getValue value} : string</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>\r<li>{@link #getName name} : string</li>\r<li>{@link #getPlaceholder placeholder} : string</li>\r<li>{@link #getEditable editable} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.InputBase#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Base control for Input fields.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12.0",
    "name": "InputBase",
    "longname": "sap.m.InputBase",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.InputBase"
  },
  {
    "description": "This event gets fired when the input operation has finished and the value has changed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The new value of the input",
        "name": "oControlEvent.getParameters.newValue"
      }
    ],
    "name": "change",
    "longname": "sap.m.InputBase#event:change",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.change"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.InputBase</code>.<br/> itself. \r</p><p>\rThis event gets fired when the input operation has finished and the value has changed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.InputBase#attachChange",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.attachChange"
  },
  {
    "description": "Binder for property <code>value</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindValue",
    "longname": "sap.m.InputBase#bindValue",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.bindValue"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.InputBase#detachChange",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.detachChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.InputBase.extend",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "codeName": "sap.m.InputBase.extend"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'newValue' of type <code>string</code> The new value of the input</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.InputBase#fireChange",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.fireChange"
  },
  {
    "description": "Getter for property <code>editable</code>.\rControls if a user can change the value.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>editable</code>"
      }
    ],
    "since": "1.12.0",
    "name": "getEditable",
    "longname": "sap.m.InputBase#getEditable",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getEditable"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the control (default is true).\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.InputBase#getEnabled",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.InputBase#getName",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getName"
  },
  {
    "description": "Getter for property <code>placeholder</code>.\rtext shown when no value available\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>placeholder</code>"
      }
    ],
    "name": "getPlaceholder",
    "longname": "sap.m.InputBase#getPlaceholder",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getPlaceholder"
  },
  {
    "description": "Getter for property <code>value</code>.\rInput Value\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.InputBase#getValue",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getValue"
  },
  {
    "description": "Getter for property <code>valueState</code>.\rVisualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>valueState</code>"
      }
    ],
    "name": "getValueState",
    "longname": "sap.m.InputBase#getValueState",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getValueState"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible inputs are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.InputBase#getVisible",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the input.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.InputBase#getWidth",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>editable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>editable</code>",
        "name": "bEditable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.0",
    "name": "setEditable",
    "longname": "sap.m.InputBase#setEditable",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setEditable"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.InputBase#setEnabled",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.InputBase#setName",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setName"
  },
  {
    "description": "Setter for property <code>placeholder</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>placeholder</code>",
        "name": "sPlaceholder"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlaceholder",
    "longname": "sap.m.InputBase#setPlaceholder",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setPlaceholder"
  },
  {
    "description": "Setter for property <code>value</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>value</code>",
        "name": "sValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValue",
    "longname": "sap.m.InputBase#setValue",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setValue"
  },
  {
    "description": "Setter for property <code>valueState</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>valueState</code>",
        "name": "oValueState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValueState",
    "longname": "sap.m.InputBase#setValueState",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setValueState"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.InputBase#setVisible",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.InputBase#setWidth",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.setWidth"
  },
  {
    "description": "Unbinder for property <code>value</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindValue",
    "longname": "sap.m.InputBase#unbindValue",
    "kind": "function",
    "memberof": "sap.m.InputBase",
    "scope": "instance",
    "codeName": "sap.m.InputBase.prototype.unbindValue"
  },
  {
    "description": "Constructor for a new InputListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getLabel label} : string</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "List item should be used for a label and an input field.",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "InputListItem",
    "longname": "sap.m.InputListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.InputListItem"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.InputListItem#addContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.addContent"
  },
  {
    "description": "Binder for aggregation <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindContent",
    "longname": "sap.m.InputListItem#bindContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.bindContent"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.InputListItem#destroyContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.destroyContent"
  },
  {
    "description": "Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.InputListItem.extend",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "codeName": "sap.m.InputListItem.extend"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rContent controls can be added",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.InputListItem#getContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.getContent"
  },
  {
    "description": "Getter for property <code>label</code>.\rLabel of the list item\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>label</code>"
      }
    ],
    "name": "getLabel",
    "longname": "sap.m.InputListItem#getLabel",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.getLabel"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.InputListItem#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.InputListItem#insertContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.insertContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.InputListItem#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.InputListItem#removeContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.removeContent"
  },
  {
    "description": "Setter for property <code>label</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>label</code>",
        "name": "sLabel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setLabel",
    "longname": "sap.m.InputListItem#setLabel",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.setLabel"
  },
  {
    "description": "Unbinder for aggregation <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindContent",
    "longname": "sap.m.InputListItem#unbindContent",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "codeName": "sap.m.InputListItem.prototype.unbindContent"
  },
  {
    "description": "Adds a control to predefined dialog category in instance manager.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Dialog to be added to instance manager. Dialog which doesn't inherit from sap.m.Dialog can also be added as long as it has a close method.",
        "name": "oDialog"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InstanceManager"
          ]
        },
        "description": "Enable method chaining."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "addDialogInstance",
    "longname": "sap.m.InstanceManager.addDialogInstance",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.addDialogInstance"
  },
  {
    "description": "Adds an instance to the given category.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The category's id.",
        "name": "sCategoryId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The instance that will be added to the given category.",
        "name": "oInstance"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InstanceManager"
          ]
        },
        "description": "Enable method chaining."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "addInstance",
    "longname": "sap.m.InstanceManager.addInstance",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.addInstance"
  },
  {
    "description": "Adds a control to predefined popover category in instance manager.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Popover to be added to instance manager. Custom popover which doesn't inherit from sap.m.Popover can also be added as long as it has a close method.",
        "name": "oPopover"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InstanceManager"
          ]
        },
        "description": "Enable method chaining."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "addPopoverInstance",
    "longname": "sap.m.InstanceManager.addPopoverInstance",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.addPopoverInstance"
  },
  {
    "description": "Closes all of the open dialogs.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InstanceManager"
          ]
        },
        "description": "Enable method chaining."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "closeAllDialogs",
    "longname": "sap.m.InstanceManager.closeAllDialogs",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.closeAllDialogs"
  },
  {
    "description": "Closes all open popovers.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InstanceManager"
          ]
        },
        "description": "Enable method chaining."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "closeAllPopovers",
    "longname": "sap.m.InstanceManager.closeAllPopovers",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.closeAllPopovers"
  },
  {
    "description": "Returns an array of managed instances in the given category.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The category's id.",
        "name": "sCategoryId"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Managed instances in the given category."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "getInstancesByCategoryId",
    "longname": "sap.m.InstanceManager.getInstancesByCategoryId",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.getInstancesByCategoryId"
  },
  {
    "description": "Gets all of the open dialogs. If there's no dialog open, it returns an empty array.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "The open dialogs."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "getOpenDialogs",
    "longname": "sap.m.InstanceManager.getOpenDialogs",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.getOpenDialogs"
  },
  {
    "description": "Gets all of the open popovers. If there's no popover open, it returns an empty array.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "The open popovers."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "getOpenPopovers",
    "longname": "sap.m.InstanceManager.getOpenPopovers",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.getOpenPopovers"
  },
  {
    "description": "Returns true if there's dialog(s) managed in predefined dialog category, otherwise it returns false.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether there's dialog(s) open."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "hasOpenDialog",
    "longname": "sap.m.InstanceManager.hasOpenDialog",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.hasOpenDialog"
  },
  {
    "description": "Returns true if there's popover(s) managed in predefined popover category, otherwise it returns false.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether there's popover(s) open."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "hasOpenPopover",
    "longname": "sap.m.InstanceManager.hasOpenPopover",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.hasOpenPopover"
  },
  {
    "description": "Returns if there's no managed instance in the given category.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The category's id.",
        "name": "sCategoryId"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the category is empty."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "isCategoryEmpty",
    "longname": "sap.m.InstanceManager.isCategoryEmpty",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.isCategoryEmpty"
  },
  {
    "description": "Check if the given dialog instance is managed under the dialog category.\rFor dialog instances, managed means the dialog is open.\r</p><p>\rThis function is specially provided for customized controls which doesn't have the possibility to check whether it's open.\rIf the given dialog is an instance of sap.m.Dialog, sap.m.ActionSheet, the isOpen() method on the instance is \rpreferred to be called than this function.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The dialog that is checked for the openness.",
        "name": "oDialog"
      }
    ],
    "returns": [
      {
        "description": "Whether the given dialog is open."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "isDialogOpen",
    "longname": "sap.m.InstanceManager.isDialogOpen",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.isDialogOpen"
  },
  {
    "description": "Checks if an instance is managed under the given category.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The category that the instance is supposed to be in.",
        "name": "sCategoryId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The instance that needs to be checked.",
        "name": "oInstance"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the instance is managed in the given category."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "isInstanceManaged",
    "longname": "sap.m.InstanceManager.isInstanceManaged",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.isInstanceManaged"
  },
  {
    "description": "Check if the given popover instance is managed under the popover category.\rFor popover instances, managed means the popover is open.\r</p><p>\rThis function is specially provided for customized controls which doesn't have the possibility to check whether it's open. \rIf the given popover is an instance of sap.m.Popover, sap.m.ActionSheet, the isOpen() method on the instance is \rpreferred to be called than this function.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The popover that is checked for the openness.",
        "name": "oPopover"
      }
    ],
    "returns": [
      {
        "description": "Whether the given popover is open."
      }
    ],
    "memberof": "sap.m.InstanceManager",
    "name": "isPopoverOpen",
    "longname": "sap.m.InstanceManager.isPopoverOpen",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.isPopoverOpen"
  },
  {
    "description": "Removes control from predefined dialog category in instance manager.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "to be removed from instance manager.",
        "name": "Dialog"
      }
    ],
    "returns": [
      {
        "description": "The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "removeDialogInstance",
    "longname": "sap.m.InstanceManager.removeDialogInstance",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.removeDialogInstance"
  },
  {
    "description": "Removes a managed instance from the given category.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The category's id.",
        "name": "sCategoryId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The instance that will be removed from the given category.",
        "name": "oInstance"
      }
    ],
    "returns": [
      {
        "description": "The removed instance or null. If the instance isn't managed, this method returns null instead of the instance object."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "removeInstance",
    "longname": "sap.m.InstanceManager.removeInstance",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.removeInstance"
  },
  {
    "description": "Removes control from predefined popover category in instance manager.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "to be removed from instance manager.",
        "name": "Popover"
      }
    ],
    "returns": [
      {
        "description": "The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover."
      }
    ],
    "access": "protected",
    "memberof": "sap.m.InstanceManager",
    "name": "removePopoverInstance",
    "longname": "sap.m.InstanceManager.removePopoverInstance",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.InstanceManager.removePopoverInstance"
  },
  {
    "description": "Constructor for a new Label.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getDesign design} : sap.m.LabelDesign (default: sap.m.LabelDesign.Standard)</li>\r<li>{@link #getText text} : string</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>\r<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>\r<li>{@link #getRequired required} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getLabelFor labelFor} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "tags": [
      {
        "originalTitle": "implements",
        "title": "implements",
        "text": "sap.ui.core.Label",
        "value": "sap.ui.core.Label"
      }
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Label",
    "longname": "sap.m.Label",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Label"
  },
  {
    "description": "Creates a new subclass of class sap.m.Label with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Label.extend",
    "kind": "function",
    "memberof": "sap.m.Label",
    "codeName": "sap.m.Label.extend"
  },
  {
    "description": "Getter for property <code>design</code>.\rset design of a label to either Standard or Bold\r</p><p>\rDefault value is <code>sap.m.LabelDesign.Standard</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.LabelDesign"
          ]
        },
        "description": "the value of property <code>design</code>"
      }
    ],
    "name": "getDesign",
    "longname": "sap.m.Label#getDesign",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getDesign"
  },
  {
    "description": "Association to the labeled control.\rBy default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>labelFor</code> association, or null"
      }
    ],
    "name": "getLabelFor",
    "longname": "sap.m.Label#getLabelFor",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getLabelFor"
  },
  {
    "description": "Getter for property <code>required</code>.\rIndicates that user input is required in the input this label labels.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>required</code>"
      }
    ],
    "name": "getRequired",
    "longname": "sap.m.Label#getRequired",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getRequired"
  },
  {
    "description": "Getter for property <code>text</code>.\rLabel Text to be displayed\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.Label#getText",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getText"
  },
  {
    "description": "Getter for property <code>textAlign</code>.\rAvailable alignment settings are \"Begin\", \"Center\", \"End\", \"Left\", and \"Right\".\r</p><p>\rDefault value is <code>sap.ui.core.TextAlign.Begin</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "the value of property <code>textAlign</code>"
      }
    ],
    "name": "getTextAlign",
    "longname": "sap.m.Label#getTextAlign",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getTextAlign"
  },
  {
    "description": "Getter for property <code>textDirection</code>.\rOptions for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "the value of property <code>textDirection</code>"
      }
    ],
    "name": "getTextDirection",
    "longname": "sap.m.Label#getTextDirection",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getTextDirection"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible labels are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Label#getVisible",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rWidth of Label\r</p><p>\rDefault value is <code>''</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Label#getWidth",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>design</code>.\r</p><p>\rDefault value is <code>sap.m.LabelDesign.Standard</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.LabelDesign"
          ]
        },
        "description": "new value for property <code>design</code>",
        "name": "oDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDesign",
    "longname": "sap.m.Label#setDesign",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setDesign"
  },
  {
    "description": "Association to the labeled control.\rBy default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>labelFor</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vLabelFor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setLabelFor",
    "longname": "sap.m.Label#setLabelFor",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setLabelFor"
  },
  {
    "description": "Setter for property <code>required</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>required</code>",
        "name": "bRequired"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRequired",
    "longname": "sap.m.Label#setRequired",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setRequired"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.Label#setText",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setText"
  },
  {
    "description": "Setter for property <code>textAlign</code>.\r</p><p>\rDefault value is <code>sap.ui.core.TextAlign.Begin</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "new value for property <code>textAlign</code>",
        "name": "oTextAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextAlign",
    "longname": "sap.m.Label#setTextAlign",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setTextAlign"
  },
  {
    "description": "Setter for property <code>textDirection</code>.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "new value for property <code>textDirection</code>",
        "name": "oTextDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextDirection",
    "longname": "sap.m.Label#setTextDirection",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setTextDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Label#setVisible",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>''</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Label"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Label#setWidth",
    "kind": "function",
    "memberof": "sap.m.Label",
    "scope": "instance",
    "codeName": "sap.m.Label.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Link.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string (default: '')</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getTarget target} : string</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getHref href} : sap.ui.core.URI</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Link#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "Link",
    "longname": "sap.m.Link",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Link"
  },
  {
    "description": "Event is fired when the user triggers the link control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.Link#event:press",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.press"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Link</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Link</code>.<br/> itself. \r</p><p>\rEvent is fired when the user triggers the link control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Link</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.Link#attachPress",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.attachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Link</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.Link#detachPress",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.detachPress"
  },
  {
    "description": "Creates a new subclass of class sap.m.Link with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Link.extend",
    "kind": "function",
    "memberof": "sap.m.Link",
    "codeName": "sap.m.Link.extend"
  },
  {
    "description": "Fire event press to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.Link#firePress",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.firePress"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rWhether the link can be triggered by the user.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.Link#getEnabled",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>href</code>.\rThe link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the \"press\" event should be registered.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>href</code>"
      }
    ],
    "name": "getHref",
    "longname": "sap.m.Link#getHref",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.getHref"
  },
  {
    "description": "Getter for property <code>target</code>.\rOptions are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>target</code>"
      }
    ],
    "name": "getTarget",
    "longname": "sap.m.Link#getTarget",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.getTarget"
  },
  {
    "description": "Getter for property <code>text</code>.\rLink text to be displayed.\r</p><p>\rDefault value is <code>''</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.Link#getText",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.getText"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible links are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Link#getVisible",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rWidth of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Link#getWidth",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.Link#setEnabled",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>href</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>href</code>",
        "name": "sHref"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHref",
    "longname": "sap.m.Link#setHref",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.setHref"
  },
  {
    "description": "Setter for property <code>target</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>target</code>",
        "name": "sTarget"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTarget",
    "longname": "sap.m.Link#setTarget",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.setTarget"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is <code>''</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.Link#setText",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.setText"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Link#setVisible",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Link"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Link#setWidth",
    "kind": "function",
    "memberof": "sap.m.Link",
    "scope": "instance",
    "codeName": "sap.m.Link.prototype.setWidth"
  },
  {
    "description": "Constructor for a new List.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign (default: sap.m.ListHeaderDesign.Standard)</li>\r<li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Solid)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getColumns columns} : sap.m.Column[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "List control provides a container for all type of list items.",
    "augments": [
      "sap.m.ListBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "List",
    "longname": "sap.m.List",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.List"
  },
  {
    "description": "Adds some column <code>oColumn</code> \rto the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column to add; if empty, nothing is inserted",
        "name": "oColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "addColumn",
    "longname": "sap.m.List#addColumn",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.addColumn"
  },
  {
    "description": "Destroys all the columns in the aggregation \rnamed <code>columns</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "destroyColumns",
    "longname": "sap.m.List#destroyColumns",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.destroyColumns"
  },
  {
    "description": "Creates a new subclass of class sap.m.List with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.List.extend",
    "kind": "function",
    "memberof": "sap.m.List",
    "codeName": "sap.m.List.extend"
  },
  {
    "description": "Getter for property <code>backgroundDesign</code>.\rThis property is used to set the background color of the list. Depending on the theme you can change the state of the background from \"Solid\" over \"Translucent\" to \"Transparent\".\r</p><p>\rDefault value is <code>Solid</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BackgroundDesign"
          ]
        },
        "description": "the value of property <code>backgroundDesign</code>"
      }
    ],
    "since": "1.14",
    "name": "getBackgroundDesign",
    "longname": "sap.m.List#getBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.getBackgroundDesign"
  },
  {
    "description": "Getter for aggregation <code>columns</code>.<br/>\rColumns",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Column>"
          ]
        }
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "getColumns",
    "longname": "sap.m.List#getColumns",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.getColumns"
  },
  {
    "description": "Getter for property <code>headerDesign</code>.\rList header style. Possible vales are \"Standard\" and \"Plain\"\r</p><p>\rDefault value is <code>Standard</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListHeaderDesign"
          ]
        },
        "description": "the value of property <code>headerDesign</code>"
      }
    ],
    "since": "1.14",
    "name": "getHeaderDesign",
    "longname": "sap.m.List#getHeaderDesign",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.getHeaderDesign"
  },
  {
    "description": "Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column whose index is looked for.",
        "name": "oColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "indexOfColumn",
    "longname": "sap.m.List#indexOfColumn",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.indexOfColumn"
  },
  {
    "description": "Inserts a column into the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column to insert; if empty, nothing is inserted",
        "name": "oColumn"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the column should be inserted at; for \r            a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value \r            greater than the current size of the aggregation, the column is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "insertColumn",
    "longname": "sap.m.List#insertColumn",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.insertColumn"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>columns</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Column>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "removeAllColumns",
    "longname": "sap.m.List#removeAllColumns",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.removeAllColumns"
  },
  {
    "description": "Removes an column from the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.Column"
          ]
        },
        "description": "the column to remove or its index or id",
        "name": "vColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the removed column or null"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "removeColumn",
    "longname": "sap.m.List#removeColumn",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.removeColumn"
  },
  {
    "description": "Setter for property <code>backgroundDesign</code>.\r</p><p>\rDefault value is <code>Solid</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.BackgroundDesign"
          ]
        },
        "description": "new value for property <code>backgroundDesign</code>",
        "name": "oBackgroundDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.14",
    "name": "setBackgroundDesign",
    "longname": "sap.m.List#setBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.setBackgroundDesign"
  },
  {
    "description": "Setter for property <code>headerDesign</code>.\r</p><p>\rDefault value is <code>Standard</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListHeaderDesign"
          ]
        },
        "description": "new value for property <code>headerDesign</code>",
        "name": "oHeaderDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.14",
    "name": "setHeaderDesign",
    "longname": "sap.m.List#setHeaderDesign",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "codeName": "sap.m.List.prototype.setHeaderDesign"
  },
  {
    "description": "Constructor for a new ListBase.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getInset inset} : boolean (default: false)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getHeaderText headerText} : string</li>\r<li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H4)</li>\r<li>{@link #getFooterText footerText} : string</li>\r<li>{@link #getMode mode} : sap.m.ListMode (default: sap.m.ListMode.None)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>\r<li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li>\r<li>{@link #getShowUnread showUnread} : boolean (default: false)</li>\r<li>{@link #getNoDataText noDataText} : string</li>\r<li>{@link #getShowNoData showNoData} : boolean (default: true)</li>\r<li>{@link #getModeAnimationOn modeAnimationOn} : boolean (default: true)</li>\r<li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators (default: sap.m.ListSeparators.All)</li>\r<li>{@link #getSwipeDirection swipeDirection} : sap.m.SwipeDirection (default: sap.m.SwipeDirection.Both)</li>\r<li>{@link #getGrowing growing} : boolean (default: false)</li>\r<li>{@link #getGrowingThreshold growingThreshold} : int (default: 20)</li>\r<li>{@link #getGrowingTriggerText growingTriggerText} : string</li>\r<li>{@link #getGrowingScrollToLoad growingScrollToLoad} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.m.ListItemBase[]</li>\r<li>{@link #getSwipeContent swipeContent} : sap.ui.core.Control</li>\r<li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li>\r<li>{@link #getInfoBar infoBar} : sap.m.InfoBar</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ListBase#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ListBase#event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ListBase#event:swipe swipe} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "sap.m.ListBase Control provides a basic functionality of List and Table. Selection, deletion, unread states and inset style are also maintained here.\r</p><p>\rNote: The ListBase including all contained items is completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists with many items. As such the usage of a list is not recommended for these use cases.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "ListBase",
    "longname": "sap.m.ListBase",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ListBase"
  },
  {
    "description": "Event is fired when selection is changed by user interaction.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the select.",
        "name": "oControlEvent.getParameters.listItem"
      }
    ],
    "name": "select",
    "longname": "sap.m.ListBase#event:select",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.select"
  },
  {
    "description": "This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the swipe.",
        "name": "oControlEvent.getParameters.listItem"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Given swipeContent control to show on the right hand side of a list item.",
        "name": "oControlEvent.getParameters.swipeContent"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Holds which control caused the swipe event in within the Item.",
        "name": "oControlEvent.getParameters.srcControl"
      }
    ],
    "name": "swipe",
    "longname": "sap.m.ListBase#event:swipe",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.swipe"
  },
  {
    "description": "Adds some headerContent <code>oHeaderContent</code> \rto the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to add; if empty, nothing is inserted",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addHeaderContent",
    "longname": "sap.m.ListBase#addHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.addHeaderContent"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.ListBase#addItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when delete icon is pressed by user.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDelete",
    "longname": "sap.m.ListBase#attachDelete",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.attachDelete"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when selection is changed by user interaction.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.ListBase#attachSelect",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.attachSelect"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rThis event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSwipe",
    "longname": "sap.m.ListBase#attachSwipe",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.attachSwipe"
  },
  {
    "description": "Binder for aggregation <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindItems",
    "longname": "sap.m.ListBase#bindItems",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.bindItems"
  },
  {
    "description": "Destroys all the headerContent in the aggregation \rnamed <code>headerContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyHeaderContent",
    "longname": "sap.m.ListBase#destroyHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.destroyHeaderContent"
  },
  {
    "description": "Destroys the infoBar in the aggregation \rnamed <code>infoBar</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyInfoBar",
    "longname": "sap.m.ListBase#destroyInfoBar",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.destroyInfoBar"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.ListBase#destroyItems",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.destroyItems"
  },
  {
    "description": "Destroys the swipeContent in the aggregation \rnamed <code>swipeContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySwipeContent",
    "longname": "sap.m.ListBase#destroySwipeContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.destroySwipeContent"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDelete",
    "longname": "sap.m.ListBase#detachDelete",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.detachDelete"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.ListBase#detachSelect",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.detachSelect"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSwipe",
    "longname": "sap.m.ListBase#detachSwipe",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.detachSwipe"
  },
  {
    "description": "Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ListBase.extend",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "codeName": "sap.m.ListBase.extend"
  },
  {
    "description": "Fire event delete to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the delete.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDelete",
    "longname": "sap.m.ListBase#fireDelete",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.fireDelete"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the select.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.ListBase#fireSelect",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.fireSelect"
  },
  {
    "description": "Fire event swipe to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.\r* \rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>\r<li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>\r<li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in within the Item.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "name": "fireSwipe",
    "longname": "sap.m.ListBase#fireSwipe",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.fireSwipe"
  },
  {
    "description": "Getter for property <code>footerText</code>.\rFooter Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>footerText</code>"
      }
    ],
    "name": "getFooterText",
    "longname": "sap.m.ListBase#getFooterText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getFooterText"
  },
  {
    "description": "Getter for property <code>growing</code>.\rSets the growing(paging) feature of control.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growing</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowing",
    "longname": "sap.m.ListBase#getGrowing",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getGrowing"
  },
  {
    "description": "Getter for property <code>growingScrollToLoad</code>.\rIf true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.\rThis property can be used only if \"growing\" property is set \"true\" and if you only have one instance of this control inside the scroll container(e.g Page).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growingScrollToLoad</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingScrollToLoad",
    "longname": "sap.m.ListBase#getGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getGrowingScrollToLoad"
  },
  {
    "description": "Getter for property <code>growingThreshold</code>.\rNumber of items requested from the server. To activate this you should set \"growing\" property to \"true\".\r</p><p>\rDefault value is <code>20</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>growingThreshold</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingThreshold",
    "longname": "sap.m.ListBase#getGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getGrowingThreshold"
  },
  {
    "description": "Getter for property <code>growingTriggerText</code>.\rThis text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text (\"Load More Data\") coming from the message bundle.\rThis property can be used only if \"growing\" property is set \"true\" and scrollToLoad property is set \"false\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>growingTriggerText</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingTriggerText",
    "longname": "sap.m.ListBase#getGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getGrowingTriggerText"
  },
  {
    "description": "Getter for aggregation <code>headerContent</code>.<br/>\rThese items are placed at the end of the header line and can be used for user interactions(e.g. Button).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getHeaderContent",
    "longname": "sap.m.ListBase#getHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getHeaderContent"
  },
  {
    "description": "Getter for property <code>headerLevel</code>.\rThe header level following the standard HTML scheme (H1 - H6)\r</p><p>\rDefault value is <code>H4</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "the value of property <code>headerLevel</code>"
      }
    ],
    "name": "getHeaderLevel",
    "longname": "sap.m.ListBase#getHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getHeaderLevel"
  },
  {
    "description": "Getter for property <code>headerText</code>.\rHeader Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>headerText</code>"
      }
    ],
    "name": "getHeaderText",
    "longname": "sap.m.ListBase#getHeaderText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getHeaderText"
  },
  {
    "description": "Getter for property <code>includeItemInSelection</code>.\rThis property decides if the list item interacts with the selection. If it is \"true\", a tap on the item will set the selection control in front of the list item.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>includeItemInSelection</code>"
      }
    ],
    "name": "getIncludeItemInSelection",
    "longname": "sap.m.ListBase#getIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getIncludeItemInSelection"
  },
  {
    "description": "Getter for aggregation <code>infoBar</code>.<br/>\rInfoBar control is placed below the header and can be used to show extra information to the user.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        }
      }
    ],
    "name": "getInfoBar",
    "longname": "sap.m.ListBase#getInfoBar",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getInfoBar"
  },
  {
    "description": "Getter for property <code>inset</code>.\rInset style false/true\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>inset</code>"
      }
    ],
    "name": "getInset",
    "longname": "sap.m.ListBase#getInset",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getInset"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rThe items of this list or rows of the table",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.ListBase#getItems",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getItems"
  },
  {
    "description": "Getter for property <code>mode</code>.\rMode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "the value of property <code>mode</code>"
      }
    ],
    "name": "getMode",
    "longname": "sap.m.ListBase#getMode",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getMode"
  },
  {
    "description": "Getter for property <code>modeAnimationOn</code>.\rDefines if animations will be shown when activating or deactivating selection modes.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>modeAnimationOn</code>"
      }
    ],
    "name": "getModeAnimationOn",
    "longname": "sap.m.ListBase#getModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getModeAnimationOn"
  },
  {
    "description": "Getter for property <code>noDataText</code>.\rThis text is displayed when the control has no data.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>noDataText</code>"
      }
    ],
    "name": "getNoDataText",
    "longname": "sap.m.ListBase#getNoDataText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getNoDataText"
  },
  {
    "description": "Returns selected list item. When no item is selected, \"null\" is returned. When multi-selection is enabled and multiple items are selected, only the up-most selected item is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSelectedItem",
    "longname": "sap.m.ListBase#getSelectedItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getSelectedItem"
  },
  {
    "description": "Returns an array containing the selected list items. If no items are selected, an empty array is returned.",
    "type": {
      "names": [
        "Array.<sap.m.ListItemBase>"
      ]
    },
    "name": "getSelectedItems",
    "longname": "sap.m.ListBase#getSelectedItems",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getSelectedItems"
  },
  {
    "description": "Getter for property <code>showNoData</code>.\rEnables an information text(see \"noDataText\" property) when the control has no data.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showNoData</code>"
      }
    ],
    "name": "getShowNoData",
    "longname": "sap.m.ListBase#getShowNoData",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getShowNoData"
  },
  {
    "description": "Getter for property <code>showSeparators</code>.\rDefines which separator style will be used.\r</p><p>\rDefault value is <code>All</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "the value of property <code>showSeparators</code>"
      }
    ],
    "name": "getShowSeparators",
    "longname": "sap.m.ListBase#getShowSeparators",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getShowSeparators"
  },
  {
    "description": "Getter for property <code>showUnread</code>.\rActivates the unread feature for all items.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showUnread</code>"
      }
    ],
    "name": "getShowUnread",
    "longname": "sap.m.ListBase#getShowUnread",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getShowUnread"
  },
  {
    "description": "Getter for aggregation <code>swipeContent</code>.<br/>\rUser can swipe to bring in this control on the right hand side of a list item.\rNote: This functionality gets disabled for non-touch devices.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getSwipeContent",
    "longname": "sap.m.ListBase#getSwipeContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getSwipeContent"
  },
  {
    "description": "Getter for property <code>swipeDirection</code>.\rDirection of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.\r</p><p>\rDefault value is <code>Both</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "the value of property <code>swipeDirection</code>"
      }
    ],
    "name": "getSwipeDirection",
    "longname": "sap.m.ListBase#getSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getSwipeDirection"
  },
  {
    "description": "Returns swiped list item. When no item is swiped, \"null\" is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSwipedItem",
    "longname": "sap.m.ListBase#getSwipedItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getSwipedItem"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible controls are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ListBase#getVisible",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rSets the width of the list.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.ListBase#getWidth",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent whose index is looked for.",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfHeaderContent",
    "longname": "sap.m.ListBase#indexOfHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.indexOfHeaderContent"
  },
  {
    "description": "Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.ListBase#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.indexOfItem"
  },
  {
    "description": "Inserts a headerContent into the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to insert; if empty, nothing is inserted",
        "name": "oHeaderContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the headerContent should be inserted at; for \r            a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value \r            greater than the current size of the aggregation, the headerContent is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertHeaderContent",
    "longname": "sap.m.ListBase#insertHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.insertHeaderContent"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.ListBase#insertItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>headerContent</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllHeaderContent",
    "longname": "sap.m.ListBase#removeAllHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.removeAllHeaderContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.ListBase#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.removeAllItems"
  },
  {
    "description": "Removes an headerContent from the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to remove or its index or id",
        "name": "vHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed headerContent or null"
      }
    ],
    "name": "removeHeaderContent",
    "longname": "sap.m.ListBase#removeHeaderContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.removeHeaderContent"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.ListBase#removeItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.removeItem"
  },
  {
    "description": "Removes all selections of the current selection mode. Applies to the modes \"SingleSelect\", \"MultiSelect\", and \"Delete\".",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "removeSelections",
    "longname": "sap.m.ListBase#removeSelections",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.removeSelections"
  },
  {
    "description": "Select all items in \"MultiSelection\" mode.",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "since": "1.16",
    "name": "selectAll",
    "longname": "sap.m.ListBase#selectAll",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.selectAll"
  },
  {
    "description": "Setter for property <code>footerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>footerText</code>",
        "name": "sFooterText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooterText",
    "longname": "sap.m.ListBase#setFooterText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setFooterText"
  },
  {
    "description": "Setter for property <code>growing</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growing</code>",
        "name": "bGrowing"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowing",
    "longname": "sap.m.ListBase#setGrowing",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setGrowing"
  },
  {
    "description": "Setter for property <code>growingScrollToLoad</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growingScrollToLoad</code>",
        "name": "bGrowingScrollToLoad"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingScrollToLoad",
    "longname": "sap.m.ListBase#setGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setGrowingScrollToLoad"
  },
  {
    "description": "Setter for property <code>growingThreshold</code>.\r</p><p>\rDefault value is <code>20</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>growingThreshold</code>",
        "name": "iGrowingThreshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingThreshold",
    "longname": "sap.m.ListBase#setGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setGrowingThreshold"
  },
  {
    "description": "Setter for property <code>growingTriggerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>growingTriggerText</code>",
        "name": "sGrowingTriggerText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingTriggerText",
    "longname": "sap.m.ListBase#setGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setGrowingTriggerText"
  },
  {
    "description": "Setter for property <code>headerLevel</code>.\r</p><p>\rDefault value is <code>H4</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "new value for property <code>headerLevel</code>",
        "name": "oHeaderLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderLevel",
    "longname": "sap.m.ListBase#setHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setHeaderLevel"
  },
  {
    "description": "Setter for property <code>headerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>headerText</code>",
        "name": "sHeaderText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderText",
    "longname": "sap.m.ListBase#setHeaderText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setHeaderText"
  },
  {
    "description": "Setter for property <code>includeItemInSelection</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>includeItemInSelection</code>",
        "name": "bIncludeItemInSelection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIncludeItemInSelection",
    "longname": "sap.m.ListBase#setIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setIncludeItemInSelection"
  },
  {
    "description": "Setter for the aggregated <code>infoBar</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "name": "oInfoBar"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfoBar",
    "longname": "sap.m.ListBase#setInfoBar",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setInfoBar"
  },
  {
    "description": "Setter for property <code>inset</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>inset</code>",
        "name": "bInset"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInset",
    "longname": "sap.m.ListBase#setInset",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setInset"
  },
  {
    "description": "Setter for property <code>mode</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "new value for property <code>mode</code>",
        "name": "oMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMode",
    "longname": "sap.m.ListBase#setMode",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setMode"
  },
  {
    "description": "Setter for property <code>modeAnimationOn</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>modeAnimationOn</code>",
        "name": "bModeAnimationOn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setModeAnimationOn",
    "longname": "sap.m.ListBase#setModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setModeAnimationOn"
  },
  {
    "description": "Setter for property <code>noDataText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>noDataText</code>",
        "name": "sNoDataText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNoDataText",
    "longname": "sap.m.ListBase#setNoDataText",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setNoDataText"
  },
  {
    "description": "Sets a list item to be selected. In single mode the method removes the previous selection.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The list item to be selected.",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "setSelectedItem",
    "longname": "sap.m.ListBase#setSelectedItem",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setSelectedItem"
  },
  {
    "description": "Sets a list item to be selected by id. In single mode the method removes the previous selection.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the list item to be selected.",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "setSelectedItemById",
    "longname": "sap.m.ListBase#setSelectedItemById",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setSelectedItemById"
  },
  {
    "description": "Setter for property <code>showNoData</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showNoData</code>",
        "name": "bShowNoData"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowNoData",
    "longname": "sap.m.ListBase#setShowNoData",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setShowNoData"
  },
  {
    "description": "Setter for property <code>showSeparators</code>.\r</p><p>\rDefault value is <code>All</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "new value for property <code>showSeparators</code>",
        "name": "oShowSeparators"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowSeparators",
    "longname": "sap.m.ListBase#setShowSeparators",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setShowSeparators"
  },
  {
    "description": "Setter for property <code>showUnread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showUnread</code>",
        "name": "bShowUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowUnread",
    "longname": "sap.m.ListBase#setShowUnread",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setShowUnread"
  },
  {
    "description": "Setter for the aggregated <code>swipeContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oSwipeContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeContent",
    "longname": "sap.m.ListBase#setSwipeContent",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setSwipeContent"
  },
  {
    "description": "Setter for property <code>swipeDirection</code>.\r</p><p>\rDefault value is <code>Both</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "new value for property <code>swipeDirection</code>",
        "name": "oSwipeDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeDirection",
    "longname": "sap.m.ListBase#setSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setSwipeDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ListBase#setVisible",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.ListBase#setWidth",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.setWidth"
  },
  {
    "description": "After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.\rNOTE: If user try to tap inside of the list but outside of the swipeContent then control hides automatically.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.",
        "name": "oCallback"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "swipeOut",
    "longname": "sap.m.ListBase#swipeOut",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.swipeOut"
  },
  {
    "description": "Unbinder for aggregation <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindItems",
    "longname": "sap.m.ListBase#unbindItems",
    "kind": "function",
    "memberof": "sap.m.ListBase",
    "scope": "instance",
    "codeName": "sap.m.ListBase.prototype.unbindItems"
  },
  {
    "description": "Constructor for a new ListItemBase.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getType type} : sap.m.ListType (default: sap.m.ListType.Inactive)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getUnread unread} : boolean (default: false)</li>\r<li>{@link #getSelected selected} : boolean (default: false)</li>\r<li>{@link #getCounter counter} : int</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ListItemBase#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ListItemBase#event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ListItemBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ListItemBase#event:detailPress detailPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ListItemBase contains the core features of all specific list items.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "ListItemBase",
    "longname": "sap.m.ListItemBase",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ListItemBase"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.ListItemBase#event:detailPress",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.ListItemBase#event:detailTap",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.ListItemBase#event:press",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.ListItemBase#event:tap",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.ListItemBase#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.ListItemBase#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.ListItemBase#attachPress",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.ListItemBase#attachTap",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.ListItemBase#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.ListItemBase#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.ListItemBase#detachPress",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.ListItemBase#detachTap",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ListItemBase.extend",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "codeName": "sap.m.ListItemBase.extend"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.ListItemBase#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.ListItemBase#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.ListItemBase#firePress",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.ListItemBase#fireTap",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.ListItemBase#getCounter",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ListItemBase#getSelected",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.ListItemBase#getType",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.ListItemBase#getUnread",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ListItemBase#getVisible",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.ListItemBase#isSelected",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.ListItemBase#setCounter",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ListItemBase#setSelected",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.ListItemBase#setType",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.ListItemBase#setUnread",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ListItemBase#setVisible",
    "kind": "function",
    "memberof": "sap.m.ListItemBase",
    "scope": "instance",
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Displays an alert dialog with the given message and an OK button (no icons).\rIf a callback is given, it is called after the alert dialog has been closed\rby the user via the OK button. The callback is called with the following signature:\r</p><p>\r<pre>\r  function (oAction)\r</pre>\r</p><p>\rwhere <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button \r\tor null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.\r</p><p>\rThe alert dialog opened by this method is processed asynchronously.\rApplications have to use the <code>fnCallback</code> to continue work after the\ruser closed the alert dialog.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Message to be displayed in the alert dialog",
        "name": "sMessage"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "callback function to be called when the user closes the dialog",
        "name": "fnCallback"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'Alert'",
        "description": "Title to be displayed in the alert dialog",
        "name": "sTitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps",
        "name": "sDialogId"
      }
    ],
    "memberof": "sap.m.MessageBox",
    "name": "alert",
    "longname": "sap.m.MessageBox.alert",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.MessageBox.alert"
  },
  {
    "description": "Displays a confirmation dialog with the given message, no icon (will be provided later)\ran OK button, and a Cancel button. If a callback is given, it is called after the\ralert box has been closed by the user via one of the buttons.\rThe callback is called with the following signature\r</p><p>\r<pre>\r  function(oAction)\r</pre>\r</p><p>\rwhere oAction is set by one of the following three values:\r1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.\r2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.\r3. null: Confirm dialog is closed by Calling <code>sap.m.InstanceManager.closeAllDialogs()</code>\r</p><p>\rThe confirmation dialog opened by this method is processed asynchronously.\rApplications have to use the <code>fnCallback</code> to continue work after the\ruser closed the confirmation dialog",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Message to display in the confirmation dialog",
        "name": "sMessage"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Callback to be called when the user closes the dialog",
        "name": "fnCallback"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'Confirmation'",
        "description": "Title to display in the confirmation dialog",
        "name": "sTitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps",
        "name": "sDialogId"
      }
    ],
    "memberof": "sap.m.MessageBox",
    "name": "confirm",
    "longname": "sap.m.MessageBox.confirm",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.MessageBox.confirm"
  },
  {
    "description": "Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.\rAfter the user has tapped a button, the <code>callback</code> function is invoked when given.\r</p><p>\rThe only mandatory parameter is <code>sMessage</code>.\r</p><p>\rThe created dialog is executed asynchronously. When it has been created and registered for rendering,\rthis function returns without waiting for a user reaction.\r</p><p>\rWhen applications have to react on the users choice, they have to provide a callback function and\rpostpone any reaction on the user choice until that callback is triggered.\r</p><p>\rThe signature of the callback is\r</p><p>\r  function (oAction);\r</p><p>\rwhere <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,\ra sap.m.MessageBox.Action.Close is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The message to be displayed.",
        "name": "sMessage"
      },
      {
        "type": {
          "names": [
            "sap.m.MessageBox.Icon"
          ]
        },
        "optional": true,
        "defaultvalue": "None",
        "description": "The icon to be displayed.",
        "name": "oIcon"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The title of the message box.",
        "name": "sTitle"
      },
      {
        "type": {
          "names": [
            "sap.m.MessageBox.Action",
            "Array.<sap.m.MessageBox.Action>",
            "string",
            "Array.<string>"
          ]
        },
        "optional": true,
        "description": "Either a single action, or an array of two actions.\r     If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given,\r     only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.",
        "name": "vActions"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Function to be called when the user has tapped a button or has closed the message box.",
        "name": "fnCallback"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps",
        "name": "sDialogId"
      }
    ],
    "memberof": "sap.m.MessageBox",
    "name": "show",
    "longname": "sap.m.MessageBox.show",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.MessageBox.show"
  },
  {
    "description": "Creates and displays a simple message toast notification message with the given text, and optionally other options.\r</p><p>\rThe only mandatory parameter is <code>sMessage</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The message to be displayed.",
        "name": "sMessage"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optionally other options.",
        "name": "mOptions"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "optional": true,
        "defaultvalue": "3000",
        "description": "Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.",
        "name": "mOptions.duration"
      },
      {
        "type": {
          "names": [
            "sap.ui.core/CSSSize"
          ]
        },
        "optional": true,
        "defaultvalue": "\"15em\"",
        "description": "The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.",
        "name": "mOptions.width"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Popup.Dock"
          ]
        },
        "optional": true,
        "defaultvalue": "\"center bottom\"",
        "description": "Specifies which point of the message toast should be aligned.",
        "name": "mOptions.my"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Popup.Dock"
          ]
        },
        "optional": true,
        "defaultvalue": "\"center bottom\"",
        "description": "Specifies the point of the reference element to which the message toast should be aligned.",
        "name": "mOptions.at"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control",
            "Element",
            "jQuery",
            "window",
            "undefined"
          ]
        },
        "optional": true,
        "defaultvalue": "window",
        "description": "Specifies the reference element to which the message toast should be aligned, by default it is aligned to the browser visual viewport.",
        "name": "mOptions.of"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "\"0 0\"",
        "description": "The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. \"0 10\" to move the message toast 10 pixels to the right).",
        "name": "mOptions.offset"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "\"fit fit\"",
        "description": "Specifies how the position of the message toast should be adjusted in case it overflows the screen in some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. \"fit flip”, \"fit none\".",
        "name": "mOptions.collision"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "Function to be called when the message toast closes.",
        "name": "mOptions.onClose"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "true",
        "description": "Specify whether the message toast should close as soon as the end user touches the screen.",
        "name": "mOptions.autoClose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "\"ease\"",
        "description": "Describes how the close animation will progress. Possible values \"ease\", \"linear\", \"ease-in\", \"ease-out\", \"ease-in-out\". This feature is not supported in android and ie9 browsers.",
        "name": "mOptions.animationTimingFunction"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "optional": true,
        "defaultvalue": "1000",
        "description": "Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer. For not animation set to 0. This feature is not supported in android and ie9 browsers.",
        "name": "mOptions.animationDuration"
      }
    ],
    "type": {
      "names": [
        "void"
      ]
    },
    "memberof": "sap.m.MessageToast",
    "name": "show",
    "longname": "sap.m.MessageToast.show",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.MessageToast.show"
  },
  {
    "description": "Constructor for a new NavContainer.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getDefaultTransitionName defaultTransitionName} : string</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getInitialPage initialPage} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.NavContainer#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.NavContainer#event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.\r</p><p>\rAll children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "NavContainer",
    "longname": "sap.m.NavContainer",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.NavContainer"
  },
  {
    "description": "The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "kind": "event",
    "since": "1.7.1",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether was a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "afterNavigate",
    "longname": "sap.m.NavContainer#event:afterNavigate",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.afterNavigate"
  },
  {
    "description": "The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "kind": "event",
    "since": "1.7.1",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "navigate",
    "longname": "sap.m.NavContainer#event:navigate",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.navigate"
  },
  {
    "description": "Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a \"name\". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix \"c_\" or \"_\" for your custom transitions to ensure this.\r</p><p>\r\"to\" and \"back\" are the transition functions for the forward and backward navigation.\rBoth will be called with the following parameters:\r- oFromPage: the Control which is currently being displayed by the NavContainer\r- oToPage: the Control which should be displayed by the NavContainer after the transition\r- fCallback: a function which MUST be called when the transition has completed\r- oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration\r</p><p>\rThe contract for \"to\" and \"back\" is that they may do an animation of their choice, but it should not take \"too long\". At the beginning of the transition the target page \"oToPage\" does have the CSS class \"sapMNavItemHidden\" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.\rAfter the animation the target page \"oToPage\" should cover the entire screen and the source page \"oFromPage\" should not be visible anymore. This page should then have the CSS class \"sapMNavItemHidden\".\rFor adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:\roFromPage.addStyleClass(\"sapMNavItemHidden\");\rWhen the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!\r</p><p>\rHint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a\rsetTimeout(..., 0)\rblock (delayed, but without waiting).\r</p><p>\rThis method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.\r</p><p>\rReturns the sap.m.NavContainer type if called statically, or \"this\" (to allow method chaining) if called on a particular NavContainer instance.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the transition. This name can be used by the application to choose this transition when navigating \"to()\" or \"back()\": the \"transitionName\" parameter of \"NavContainer.to()\" corresponds to this name, the back() navigation will automatically use the same transition.\r</p><p>\rMake sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix \"c_\" or \"_\" for your custom transitions to ensure this.",
        "name": "sName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The function which will be called by the NavContainer when the application navigates \"to()\", using this animation's name. The NavContainer instance is the \"this\" context within the animation function.\r</p><p>\rSee the documentation of NavContainer.addCustomTransitions for more details about this function.",
        "name": "oTo"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The function which will be called by the NavContainer when the application navigates \"back()\" from a page where it had navigated to using this animation's name. The NavContainer instance is the \"this\" context within the animation function.\r</p><p>\rSee the documentation of NavContainer.addCustomTransitions for more details about this function.",
        "name": "oBack"
      }
    ],
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "name": "addCustomTransition",
    "longname": "sap.m.NavContainer#addCustomTransition",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.addCustomTransition"
  },
  {
    "description": "Adds some page <code>oPage</code> \rto the aggregation named <code>pages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page to add; if empty, nothing is inserted",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addPage",
    "longname": "sap.m.NavContainer#addPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.addPage"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.NavContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "attachAfterNavigate",
    "longname": "sap.m.NavContainer#attachAfterNavigate",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.attachAfterNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.NavContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "attachNavigate",
    "longname": "sap.m.NavContainer#attachNavigate",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.attachNavigate"
  },
  {
    "description": "Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property. The original \"data\" object from the \"to\" navigation is also available in these event objects.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oTransitionParameters"
      }
    ],
    "since": "1.7.1 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "name": "back",
    "longname": "sap.m.NavContainer#back",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.back"
  },
  {
    "description": "Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property. The original \"data\" object from the \"to\" navigation is also available in these event objects.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the screen to which back navigation should happen. The nearest page with this ID among the previous pages in the history stack will be used.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the \"backToPage\" navigation. The event on the target page will contain this data object as \"backData\" property.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameters"
      }
    ],
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "since": "1.7.2",
    "name": "backToPage",
    "longname": "sap.m.NavContainer#backToPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.backToPage"
  },
  {
    "description": "Navigates back to the initial/top level (this is the element aggregated as \"initialPage\", or the first added element). If already on the initial page, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the \"backToTop\" navigation. The event on the target page will contain this data object as \"backData\" property.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameters"
      }
    ],
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "since": "1.7.1",
    "name": "backToTop",
    "longname": "sap.m.NavContainer#backToTop",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.backToTop"
  },
  {
    "description": "Destroys all the pages in the aggregation \rnamed <code>pages</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyPages",
    "longname": "sap.m.NavContainer#destroyPages",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.destroyPages"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "detachAfterNavigate",
    "longname": "sap.m.NavContainer#detachAfterNavigate",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.detachAfterNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "detachNavigate",
    "longname": "sap.m.NavContainer#detachNavigate",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.detachNavigate"
  },
  {
    "description": "Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.NavContainer.extend",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "codeName": "sap.m.NavContainer.extend"
  },
  {
    "description": "Fire event afterNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "since": "1.7.1",
    "name": "fireAfterNavigate",
    "longname": "sap.m.NavContainer#fireAfterNavigate",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.fireAfterNavigate"
  },
  {
    "description": "Fire event navigate to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.\r* \rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "since": "1.7.1",
    "name": "fireNavigate",
    "longname": "sap.m.NavContainer#fireNavigate",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.fireNavigate"
  },
  {
    "description": "Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getCurrentPage",
    "longname": "sap.m.NavContainer#getCurrentPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getCurrentPage"
  },
  {
    "description": "Getter for property <code>defaultTransitionName</code>.\rThe type of the transition/animation to apply when \"to()\" is called without defining a transition type to use. The default is \"slide\" on iOS and Android; on Windows Phone the default is \"door\". Other options are: \"fade\", \"flip\" and \"show\" - and the names of any registered custom transitions.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>defaultTransitionName</code>"
      }
    ],
    "since": "1.7.1",
    "name": "getDefaultTransitionName",
    "longname": "sap.m.NavContainer#getDefaultTransitionName",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getDefaultTransitionName"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.\r</p><p>\rDefault value is <code>'100%'</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.NavContainer#getHeight",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getHeight"
  },
  {
    "description": "This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.\rThis value should be set initially and not set/modified while the application is running.\r</p><p>\rThis could be used not only for the initial display, but also if the user wants to navigate \"up to top\", so this page serves as a sort of \"home/root page\".",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialPage</code> association, or null"
      }
    ],
    "name": "getInitialPage",
    "longname": "sap.m.NavContainer#getInitialPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getInitialPage"
  },
  {
    "description": "Returns the control with the given ID from the \"pages\" aggregation (if available).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the aggregated control to find.",
        "name": "sId"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getPage",
    "longname": "sap.m.NavContainer#getPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getPage"
  },
  {
    "description": "Getter for aggregation <code>pages</code>.<br/>\rThe content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.\r</p><p>\rThese aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getPages",
    "longname": "sap.m.NavContainer#getPages",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getPages"
  },
  {
    "description": "Returns the previous page (the page from which the user drilled down to the current page with \"to()\").\rNote: this is not the page which the user has seen before, but the page which is the target of the next \"back()\" navigation.\rIf there is no previous page, \"undefined\" is returned.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.7.1",
    "name": "getPreviousPage",
    "longname": "sap.m.NavContainer#getPreviousPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getPreviousPage"
  },
  {
    "description": "Getter for property <code>visible</code>.\rWhether the NavContainer is visible.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.NavContainer#getVisible",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.\r</p><p>\rDefault value is <code>'100%'</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.NavContainer#getWidth",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page whose index is looked for.",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfPage",
    "longname": "sap.m.NavContainer#indexOfPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.indexOfPage"
  },
  {
    "description": "Inserts a page into the aggregation named <code>pages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page to insert; if empty, nothing is inserted",
        "name": "oPage"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the page should be inserted at; for \r            a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value \r            greater than the current size of the aggregation, the page is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertPage",
    "longname": "sap.m.NavContainer#insertPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.insertPage"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>pages</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllPages",
    "longname": "sap.m.NavContainer#removeAllPages",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.removeAllPages"
  },
  {
    "description": "Removes an page from the aggregation named <code>pages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the page to remove or its index or id",
        "name": "vPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed page or null"
      }
    ],
    "name": "removePage",
    "longname": "sap.m.NavContainer#removePage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.removePage"
  },
  {
    "description": "Setter for property <code>defaultTransitionName</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>defaultTransitionName</code>",
        "name": "sDefaultTransitionName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "setDefaultTransitionName",
    "longname": "sap.m.NavContainer#setDefaultTransitionName",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.setDefaultTransitionName"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is <code>'100%'</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.NavContainer#setHeight",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.setHeight"
  },
  {
    "description": "This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.\rThis value should be set initially and not set/modified while the application is running.\r</p><p>\rThis could be used not only for the initial display, but also if the user wants to navigate \"up to top\", so this page serves as a sort of \"home/root page\".",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialPage</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInitialPage",
    "longname": "sap.m.NavContainer#setInitialPage",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.setInitialPage"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.NavContainer#setVisible",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>'100%'</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.NavContainer#setWidth",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.setWidth"
  },
  {
    "description": "Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.\r</p><p>\rAvailable transitions currently include \"slide\" (default), \"fade\", \"flip\", and \"show\". None of these is currently making use of any given transitionParameters.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given data object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The screen to which drilldown should happen. The ID or the control itself can be given.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the transition/animation to apply. This parameter can be omitted; then the default is \"slide\" (horizontal movement from the right).\rOther options are: \"fade\", \"flip\", and \"show\" and the names of any registered custom transitions.\r</p><p>\rNone of the standard transitions is currently making use of any given transition parameters.",
        "name": "sTransitionName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oTransitionParameters"
      }
    ],
    "since": "1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.\r</p><p>\rFor a proper parameter order, the \"data\" parameter must be given when the \"transitionParameters\" parameter is used. (it can be given as \"null\")\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.\rThe \"show\", \"slide\" and \"fade\" transitions do not use any parameter.",
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "name": "to",
    "longname": "sap.m.NavContainer#to",
    "kind": "function",
    "memberof": "sap.m.NavContainer",
    "scope": "instance",
    "codeName": "sap.m.NavContainer.prototype.to"
  },
  {
    "description": "This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this \revent is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the NavContainer firing the event",
        "name": "oEvent.srcControl"
      }
    ],
    "name": "AfterHide",
    "longname": "sap.m.NavContainerChild.event:AfterHide",
    "memberof": "sap.m.NavContainerChild",
    "scope": "static",
    "codeName": "sap.m.NavContainerChild.AfterHide"
  },
  {
    "description": "This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this \revent is fired after the transition finishes. This control is now being displayed and not animated anymore.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the NavContainer firing the event",
        "name": "oEvent.srcControl"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the data object which has been passed with the \"to\" navigation, or an empty object",
        "name": "oEvent.data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the data object which has been passed with the back navigation, or an empty object",
        "name": "oEvent.backData"
      }
    ],
    "name": "AfterShow",
    "longname": "sap.m.NavContainerChild.event:AfterShow",
    "memberof": "sap.m.NavContainerChild",
    "scope": "static",
    "codeName": "sap.m.NavContainerChild.AfterShow"
  },
  {
    "description": "This event is fired before the NavContainer shows this child control for the first time.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the NavContainer firing the event",
        "name": "oEvent.srcControl"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the data object which has been passed with the \"to\" navigation, or an empty object",
        "name": "oEvent.data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the data object which has been passed with the back navigation, or an empty object",
        "name": "oEvent.backData"
      }
    ],
    "name": "BeforeFirstShow",
    "longname": "sap.m.NavContainerChild.event:BeforeFirstShow",
    "memberof": "sap.m.NavContainerChild",
    "scope": "static",
    "codeName": "sap.m.NavContainerChild.BeforeFirstShow"
  },
  {
    "description": "This event is fired every time before the NavContainer hides this child control. In case of animated transitions this \revent is fired before the transition starts.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the NavContainer firing the event",
        "name": "oEvent.srcControl"
      }
    ],
    "name": "BeforeHide",
    "longname": "sap.m.NavContainerChild.event:BeforeHide",
    "memberof": "sap.m.NavContainerChild",
    "scope": "static",
    "codeName": "sap.m.NavContainerChild.BeforeHide"
  },
  {
    "description": "This event is fired every time before the NavContainer shows this child control. In case of animated transitions this \revent is fired before the transition starts.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the NavContainer firing the event",
        "name": "oEvent.srcControl"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the data object which has been passed with the \"to\" navigation, or an empty object",
        "name": "oEvent.data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the data object which has been passed with the back navigation, or an empty object",
        "name": "oEvent.backData"
      }
    ],
    "name": "BeforeShow",
    "longname": "sap.m.NavContainerChild.event:BeforeShow",
    "memberof": "sap.m.NavContainerChild",
    "scope": "static",
    "codeName": "sap.m.NavContainerChild.BeforeShow"
  },
  {
    "description": "Constructor for a new ObjectAttribute.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getText text} : string</li>\r<li>{@link #getActive active} : boolean</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ObjectAttribute#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "This object holds value and fire action event if the text is active and clicked",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "ObjectAttribute",
    "longname": "sap.m.ObjectAttribute",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ObjectAttribute"
  },
  {
    "description": "Event is fired when the text is active and the user taps or clicks on it",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Dom reference of the object attributes' text to be used for positioning.",
        "name": "oControlEvent.getParameters.domRef"
      }
    ],
    "name": "press",
    "longname": "sap.m.ObjectAttribute#event:press",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.press"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ObjectAttribute</code>.<br/> itself. \r</p><p>\rEvent is fired when the text is active and the user taps or clicks on it",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.ObjectAttribute#attachPress",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.attachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.ObjectAttribute#detachPress",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.detachPress"
  },
  {
    "description": "Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ObjectAttribute.extend",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "codeName": "sap.m.ObjectAttribute.extend"
  },
  {
    "description": "Fire event press to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'domRef' of type <code>string</code> Dom reference of the object attributes' text to be used for positioning.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.ObjectAttribute#firePress",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.firePress"
  },
  {
    "description": "Getter for property <code>active</code>.\rIndicates that the text is clickable\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>active</code>"
      }
    ],
    "name": "getActive",
    "longname": "sap.m.ObjectAttribute#getActive",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.getActive"
  },
  {
    "description": "Getter for property <code>text</code>.\rThe text of the attribute\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.ObjectAttribute#getText",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.getText"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible object attribute is not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ObjectAttribute#getVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.getVisible"
  },
  {
    "description": "Setter for property <code>active</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>active</code>",
        "name": "bActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActive",
    "longname": "sap.m.ObjectAttribute#setActive",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.setActive"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.ObjectAttribute#setText",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.setText"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ObjectAttribute#setVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectAttribute",
    "scope": "instance",
    "codeName": "sap.m.ObjectAttribute.prototype.setVisible"
  },
  {
    "description": "Constructor for a new ObjectHeader.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getNumber number} : string</li>\r<li>{@link #getNumberUnit numberUnit} : string</li>\r<li>{@link #getIntro intro} : string</li>\r<li>{@link #getIntroActive introActive} : boolean</li>\r<li>{@link #getTitleActive titleActive} : boolean</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getIconActive iconActive} : boolean</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>\r<li>{@link #getMarkFavorite markFavorite} : boolean (default: false)</li>\r<li>{@link #getMarkFlagged markFlagged} : boolean (default: false)</li>\r<li>{@link #getShowMarkers showMarkers} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[]</li>\r<li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>\r<li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>\r<li>{@link #getSelectTitle selectTitle} : sap.m.Select</li>\r<li>{@link #getStatuses statuses} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ObjectHeader#event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ObjectHeader#event:introPress introPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ObjectHeader#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ObjectHeader control is used to display brief information about object similar to the StandardListItem",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "ObjectHeader",
    "longname": "sap.m.ObjectHeader",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ObjectHeader"
  },
  {
    "description": "Event is fired when the title icon is active and the user tap/click on it",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Dom reference of the object header' icon to be used for positioning.",
        "name": "oControlEvent.getParameters.domRef"
      }
    ],
    "name": "iconPress",
    "longname": "sap.m.ObjectHeader#event:iconPress",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.iconPress"
  },
  {
    "description": "Event is fired when the title is active and the user tap/click on it",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Dom reference of the object header' intro to be used for positioning.",
        "name": "oControlEvent.getParameters.domRef"
      }
    ],
    "name": "introPress",
    "longname": "sap.m.ObjectHeader#event:introPress",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.introPress"
  },
  {
    "description": "Event is fired when the title is active and the user tap/click on it",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Dom reference of the object header' title to be used for positioning.",
        "name": "oControlEvent.getParameters.domRef"
      }
    ],
    "name": "titlePress",
    "longname": "sap.m.ObjectHeader#event:titlePress",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.titlePress"
  },
  {
    "description": "Adds some attribute <code>oAttribute</code> \rto the aggregation named <code>attributes</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute to add; if empty, nothing is inserted",
        "name": "oAttribute"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addAttribute",
    "longname": "sap.m.ObjectHeader#addAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.addAttribute"
  },
  {
    "description": "Adds some status <code>oStatus</code> \rto the aggregation named <code>statuses</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the status to add; if empty, nothing is inserted",
        "name": "oStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "addStatus",
    "longname": "sap.m.ObjectHeader#addStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.addStatus"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. \r</p><p>\rEvent is fired when the title icon is active and the user tap/click on it",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachIconPress",
    "longname": "sap.m.ObjectHeader#attachIconPress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.attachIconPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. \r</p><p>\rEvent is fired when the title is active and the user tap/click on it",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachIntroPress",
    "longname": "sap.m.ObjectHeader#attachIntroPress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.attachIntroPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. \r</p><p>\rEvent is fired when the title is active and the user tap/click on it",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTitlePress",
    "longname": "sap.m.ObjectHeader#attachTitlePress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.attachTitlePress"
  },
  {
    "description": "Destroys all the attributes in the aggregation \rnamed <code>attributes</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyAttributes",
    "longname": "sap.m.ObjectHeader#destroyAttributes",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.destroyAttributes"
  },
  {
    "description": "Destroys the firstStatus in the aggregation \rnamed <code>firstStatus</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16.0. \rUse the statuses aggregation instead.",
    "name": "destroyFirstStatus",
    "longname": "sap.m.ObjectHeader#destroyFirstStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.destroyFirstStatus"
  },
  {
    "description": "Destroys the secondStatus in the aggregation \rnamed <code>secondStatus</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16.0. \rUse the statuses aggregation instead.",
    "name": "destroySecondStatus",
    "longname": "sap.m.ObjectHeader#destroySecondStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.destroySecondStatus"
  },
  {
    "description": "Destroys the selectTitle in the aggregation \rnamed <code>selectTitle</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "destroySelectTitle",
    "longname": "sap.m.ObjectHeader#destroySelectTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.destroySelectTitle"
  },
  {
    "description": "Destroys all the statuses in the aggregation \rnamed <code>statuses</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "destroyStatuses",
    "longname": "sap.m.ObjectHeader#destroyStatuses",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.destroyStatuses"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachIconPress",
    "longname": "sap.m.ObjectHeader#detachIconPress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.detachIconPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachIntroPress",
    "longname": "sap.m.ObjectHeader#detachIntroPress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.detachIntroPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTitlePress",
    "longname": "sap.m.ObjectHeader#detachTitlePress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.detachTitlePress"
  },
  {
    "description": "Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ObjectHeader.extend",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "codeName": "sap.m.ObjectHeader.extend"
  },
  {
    "description": "Fire event iconPress to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'domRef' of type <code>string</code> Dom reference of the object header' icon to be used for positioning.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireIconPress",
    "longname": "sap.m.ObjectHeader#fireIconPress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.fireIconPress"
  },
  {
    "description": "Fire event introPress to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'domRef' of type <code>string</code> Dom reference of the object header' intro to be used for positioning.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireIntroPress",
    "longname": "sap.m.ObjectHeader#fireIntroPress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.fireIntroPress"
  },
  {
    "description": "Fire event titlePress to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'domRef' of type <code>string</code> Dom reference of the object header' title to be used for positioning.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTitlePress",
    "longname": "sap.m.ObjectHeader#fireTitlePress",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.fireTitlePress"
  },
  {
    "description": "Getter for aggregation <code>attributes</code>.<br/>\rThe list of Object Attributes",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ObjectAttribute>"
          ]
        }
      }
    ],
    "name": "getAttributes",
    "longname": "sap.m.ObjectHeader#getAttributes",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getAttributes"
  },
  {
    "description": "Getter for aggregation <code>firstStatus</code>.<br/>\rFirst status shown on the right side of the attributes above the second status.\rIf it is not set the first attibute will expand to take the entire row.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        }
      }
    ],
    "deprecated": "Since version 1.16.0. \rUse the statuses aggregation instead.",
    "name": "getFirstStatus",
    "longname": "sap.m.ObjectHeader#getFirstStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getFirstStatus"
  },
  {
    "description": "Getter for property <code>icon</code>.\rObject header icon\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.ObjectHeader#getIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconActive</code>.\rIndicates that the iconis clickable\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconActive</code>"
      }
    ],
    "name": "getIconActive",
    "longname": "sap.m.ObjectHeader#getIconActive",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getIconActive"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.ObjectHeader#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>intro</code>.\rIntroductory text for the object header.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>intro</code>"
      }
    ],
    "name": "getIntro",
    "longname": "sap.m.ObjectHeader#getIntro",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getIntro"
  },
  {
    "description": "Getter for property <code>introActive</code>.\rIndicates that the intro is clickable\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>introActive</code>"
      }
    ],
    "name": "getIntroActive",
    "longname": "sap.m.ObjectHeader#getIntroActive",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getIntroActive"
  },
  {
    "description": "Getter for property <code>markFavorite</code>.\rSet the favorite state to true or false. The showMarkers property must be true for this property to take effect.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>markFavorite</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getMarkFavorite",
    "longname": "sap.m.ObjectHeader#getMarkFavorite",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getMarkFavorite"
  },
  {
    "description": "Getter for property <code>markFlagged</code>.\rSet the flagged state to true or false. The showMarkers property must be true for this property to take effect.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>markFlagged</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getMarkFlagged",
    "longname": "sap.m.ObjectHeader#getMarkFlagged",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getMarkFlagged"
  },
  {
    "description": "Getter for property <code>number</code>.\rNumber field\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>number</code>"
      }
    ],
    "name": "getNumber",
    "longname": "sap.m.ObjectHeader#getNumber",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getNumber"
  },
  {
    "description": "Getter for property <code>numberUnit</code>.\rNumber units qualifier\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>numberUnit</code>"
      }
    ],
    "name": "getNumberUnit",
    "longname": "sap.m.ObjectHeader#getNumberUnit",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getNumberUnit"
  },
  {
    "description": "Getter for aggregation <code>secondStatus</code>.<br/>\rSecond status shown on the right side of the attributes below the first status.\rIf it is not set the second attibute will expand to take the entire row.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        }
      }
    ],
    "deprecated": "Since version 1.16.0. \rUse the statuses aggregation instead.",
    "name": "getSecondStatus",
    "longname": "sap.m.ObjectHeader#getSecondStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getSecondStatus"
  },
  {
    "description": "Getter for aggregation <code>selectTitle</code>.<br/>\rIf a Select object created for this ObjectHeader title, it will be used to replace the text title and provide user a selectable title.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        }
      }
    ],
    "since": "1.16.0",
    "name": "getSelectTitle",
    "longname": "sap.m.ObjectHeader#getSelectTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getSelectTitle"
  },
  {
    "description": "Getter for property <code>showMarkers</code>.\rIndicates if object header supports showing markers such as flagged and favorite.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showMarkers</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getShowMarkers",
    "longname": "sap.m.ObjectHeader#getShowMarkers",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getShowMarkers"
  },
  {
    "description": "Getter for aggregation <code>statuses</code>.<br/>\rThe list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "since": "1.16.0",
    "name": "getStatuses",
    "longname": "sap.m.ObjectHeader#getStatuses",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getStatuses"
  },
  {
    "description": "Getter for property <code>title</code>.\rtitle\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.ObjectHeader#getTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>titleActive</code>.\rIndicates that the title is clickable\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>titleActive</code>"
      }
    ],
    "name": "getTitleActive",
    "longname": "sap.m.ObjectHeader#getTitleActive",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getTitleActive"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible object headers are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ObjectHeader#getVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.getVisible"
  },
  {
    "description": "Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute whose index is looked for.",
        "name": "oAttribute"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfAttribute",
    "longname": "sap.m.ObjectHeader#indexOfAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.indexOfAttribute"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>statuses</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the status whose index is looked for.",
        "name": "oStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "since": "1.16.0",
    "name": "indexOfStatus",
    "longname": "sap.m.ObjectHeader#indexOfStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.indexOfStatus"
  },
  {
    "description": "Inserts a attribute into the aggregation named <code>attributes</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute to insert; if empty, nothing is inserted",
        "name": "oAttribute"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the attribute should be inserted at; for \r            a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value \r            greater than the current size of the aggregation, the attribute is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertAttribute",
    "longname": "sap.m.ObjectHeader#insertAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.insertAttribute"
  },
  {
    "description": "Inserts a status into the aggregation named <code>statuses</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the status to insert; if empty, nothing is inserted",
        "name": "oStatus"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the status should be inserted at; for \r            a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value \r            greater than the current size of the aggregation, the status is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "insertStatus",
    "longname": "sap.m.ObjectHeader#insertStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.insertStatus"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>attributes</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ObjectAttribute>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllAttributes",
    "longname": "sap.m.ObjectHeader#removeAllAttributes",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.removeAllAttributes"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>statuses</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "since": "1.16.0",
    "name": "removeAllStatuses",
    "longname": "sap.m.ObjectHeader#removeAllStatuses",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.removeAllStatuses"
  },
  {
    "description": "Removes an attribute from the aggregation named <code>attributes</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute to remove or its index or id",
        "name": "vAttribute"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the removed attribute or null"
      }
    ],
    "name": "removeAttribute",
    "longname": "sap.m.ObjectHeader#removeAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.removeAttribute"
  },
  {
    "description": "Removes an status from the aggregation named <code>statuses</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the status to remove or its index or id",
        "name": "vStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed status or null"
      }
    ],
    "since": "1.16.0",
    "name": "removeStatus",
    "longname": "sap.m.ObjectHeader#removeStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.removeStatus"
  },
  {
    "description": "Setter for the aggregated <code>firstStatus</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "name": "oFirstStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16.0. \rUse the statuses aggregation instead.",
    "name": "setFirstStatus",
    "longname": "sap.m.ObjectHeader#setFirstStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setFirstStatus"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.ObjectHeader#setIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconActive</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconActive</code>",
        "name": "bIconActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconActive",
    "longname": "sap.m.ObjectHeader#setIconActive",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setIconActive"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.ObjectHeader#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>intro</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>intro</code>",
        "name": "sIntro"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIntro",
    "longname": "sap.m.ObjectHeader#setIntro",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setIntro"
  },
  {
    "description": "Setter for property <code>introActive</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>introActive</code>",
        "name": "bIntroActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIntroActive",
    "longname": "sap.m.ObjectHeader#setIntroActive",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setIntroActive"
  },
  {
    "description": "Setter for property <code>markFavorite</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>markFavorite</code>",
        "name": "bMarkFavorite"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setMarkFavorite",
    "longname": "sap.m.ObjectHeader#setMarkFavorite",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setMarkFavorite"
  },
  {
    "description": "Setter for property <code>markFlagged</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>markFlagged</code>",
        "name": "bMarkFlagged"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setMarkFlagged",
    "longname": "sap.m.ObjectHeader#setMarkFlagged",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setMarkFlagged"
  },
  {
    "description": "Setter for property <code>number</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>number</code>",
        "name": "sNumber"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumber",
    "longname": "sap.m.ObjectHeader#setNumber",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setNumber"
  },
  {
    "description": "Setter for property <code>numberUnit</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>numberUnit</code>",
        "name": "sNumberUnit"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumberUnit",
    "longname": "sap.m.ObjectHeader#setNumberUnit",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setNumberUnit"
  },
  {
    "description": "Setter for the aggregated <code>secondStatus</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "name": "oSecondStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16.0. \rUse the statuses aggregation instead.",
    "name": "setSecondStatus",
    "longname": "sap.m.ObjectHeader#setSecondStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setSecondStatus"
  },
  {
    "description": "Setter for the aggregated <code>selectTitle</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "name": "oSelectTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setSelectTitle",
    "longname": "sap.m.ObjectHeader#setSelectTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setSelectTitle"
  },
  {
    "description": "Setter for property <code>showMarkers</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showMarkers</code>",
        "name": "bShowMarkers"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setShowMarkers",
    "longname": "sap.m.ObjectHeader#setShowMarkers",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setShowMarkers"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.ObjectHeader#setTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>titleActive</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>titleActive</code>",
        "name": "bTitleActive"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitleActive",
    "longname": "sap.m.ObjectHeader#setTitleActive",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setTitleActive"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectHeader"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ObjectHeader#setVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectHeader",
    "scope": "instance",
    "codeName": "sap.m.ObjectHeader.prototype.setVisible"
  },
  {
    "description": "Constructor for a new ObjectIdentifier.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getText text} : string</li>\r<li>{@link #getBadgeNotes badgeNotes} : boolean</li>\r<li>{@link #getBadgePeople badgePeople} : boolean</li>\r<li>{@link #getBadgeAttachments badgeAttachments} : boolean</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Control that displays properties that identify an object.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "ObjectIdentifier",
    "longname": "sap.m.ObjectIdentifier",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ObjectIdentifier"
  },
  {
    "description": "Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ObjectIdentifier.extend",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "codeName": "sap.m.ObjectIdentifier.extend"
  },
  {
    "description": "Getter for property <code>badgeAttachments</code>.\rIndicates whether or not the attachments icon is displayed.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>badgeAttachments</code>"
      }
    ],
    "name": "getBadgeAttachments",
    "longname": "sap.m.ObjectIdentifier#getBadgeAttachments",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.getBadgeAttachments"
  },
  {
    "description": "Getter for property <code>badgeNotes</code>.\rIndicates whether or not the notes icon is displayed.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>badgeNotes</code>"
      }
    ],
    "name": "getBadgeNotes",
    "longname": "sap.m.ObjectIdentifier#getBadgeNotes",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.getBadgeNotes"
  },
  {
    "description": "Getter for property <code>badgePeople</code>.\rIndicates whether or not the address book icon is displayed.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>badgePeople</code>"
      }
    ],
    "name": "getBadgePeople",
    "longname": "sap.m.ObjectIdentifier#getBadgePeople",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.getBadgePeople"
  },
  {
    "description": "Getter for property <code>text</code>.\rThe object text.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.ObjectIdentifier#getText",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.getText"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe object title.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.ObjectIdentifier#getTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.getTitle"
  },
  {
    "description": "Setter for property <code>badgeAttachments</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>badgeAttachments</code>",
        "name": "bBadgeAttachments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectIdentifier"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setBadgeAttachments",
    "longname": "sap.m.ObjectIdentifier#setBadgeAttachments",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.setBadgeAttachments"
  },
  {
    "description": "Setter for property <code>badgeNotes</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>badgeNotes</code>",
        "name": "bBadgeNotes"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectIdentifier"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setBadgeNotes",
    "longname": "sap.m.ObjectIdentifier#setBadgeNotes",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.setBadgeNotes"
  },
  {
    "description": "Setter for property <code>badgePeople</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>badgePeople</code>",
        "name": "bBadgePeople"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectIdentifier"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setBadgePeople",
    "longname": "sap.m.ObjectIdentifier#setBadgePeople",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.setBadgePeople"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectIdentifier"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.ObjectIdentifier#setText",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.setText"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectIdentifier"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.ObjectIdentifier#setTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectIdentifier",
    "scope": "instance",
    "codeName": "sap.m.ObjectIdentifier.prototype.setTitle"
  },
  {
    "description": "Constructor for a new ObjectListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getNumber number} : string</li>\r<li>{@link #getNumberUnit numberUnit} : string</li>\r<li>{@link #getIntro intro} : string</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>\r<li>{@link #getMarkFavorite markFavorite} : boolean</li>\r<li>{@link #getMarkFlagged markFlagged} : boolean</li>\r<li>{@link #getShowMarkers showMarkers} : boolean</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[]</li>\r<li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>\r<li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The extended list item control",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "ObjectListItem",
    "longname": "sap.m.ObjectListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ObjectListItem"
  },
  {
    "description": "Adds some attribute <code>oAttribute</code> \rto the aggregation named <code>attributes</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute to add; if empty, nothing is inserted",
        "name": "oAttribute"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addAttribute",
    "longname": "sap.m.ObjectListItem#addAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.addAttribute"
  },
  {
    "description": "Destroys all the attributes in the aggregation \rnamed <code>attributes</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyAttributes",
    "longname": "sap.m.ObjectListItem#destroyAttributes",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.destroyAttributes"
  },
  {
    "description": "Destroys the firstStatus in the aggregation \rnamed <code>firstStatus</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyFirstStatus",
    "longname": "sap.m.ObjectListItem#destroyFirstStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.destroyFirstStatus"
  },
  {
    "description": "Destroys the secondStatus in the aggregation \rnamed <code>secondStatus</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySecondStatus",
    "longname": "sap.m.ObjectListItem#destroySecondStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.destroySecondStatus"
  },
  {
    "description": "Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ObjectListItem.extend",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "codeName": "sap.m.ObjectListItem.extend"
  },
  {
    "description": "Getter for property <code>activeIcon</code>.\rIcon displayed when the list item is active.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>activeIcon</code>"
      }
    ],
    "name": "getActiveIcon",
    "longname": "sap.m.ObjectListItem#getActiveIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getActiveIcon"
  },
  {
    "description": "Getter for aggregation <code>attributes</code>.<br/>\rList of attributes displayed below the title to the left of the status fields.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ObjectAttribute>"
          ]
        }
      }
    ],
    "name": "getAttributes",
    "longname": "sap.m.ObjectListItem#getAttributes",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getAttributes"
  },
  {
    "description": "Getter for aggregation <code>firstStatus</code>.<br/>\rFirst status text field shown on the right side of the attributes.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        }
      }
    ],
    "name": "getFirstStatus",
    "longname": "sap.m.ObjectListItem#getFirstStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getFirstStatus"
  },
  {
    "description": "Getter for property <code>icon</code>.\rList item icon displayed to the left of the title.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.ObjectListItem#getIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.ObjectListItem#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>intro</code>.\rIntroductory text for the list item.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>intro</code>"
      }
    ],
    "name": "getIntro",
    "longname": "sap.m.ObjectListItem#getIntro",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getIntro"
  },
  {
    "description": "Getter for property <code>markFavorite</code>.\rSet the favorite state for the object.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>markFavorite</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getMarkFavorite",
    "longname": "sap.m.ObjectListItem#getMarkFavorite",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getMarkFavorite"
  },
  {
    "description": "Getter for property <code>markFlagged</code>.\rSet the flagged state for the object.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>markFlagged</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getMarkFlagged",
    "longname": "sap.m.ObjectListItem#getMarkFlagged",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getMarkFlagged"
  },
  {
    "description": "Getter for property <code>number</code>.\rNumber field\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>number</code>"
      }
    ],
    "name": "getNumber",
    "longname": "sap.m.ObjectListItem#getNumber",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getNumber"
  },
  {
    "description": "Getter for property <code>numberUnit</code>.\rNumber units qualifier\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>numberUnit</code>"
      }
    ],
    "name": "getNumberUnit",
    "longname": "sap.m.ObjectListItem#getNumberUnit",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getNumberUnit"
  },
  {
    "description": "Getter for aggregation <code>secondStatus</code>.<br/>\rSecond status text field shown on the right side of the attributes.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        }
      }
    ],
    "name": "getSecondStatus",
    "longname": "sap.m.ObjectListItem#getSecondStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getSecondStatus"
  },
  {
    "description": "Getter for property <code>showMarkers</code>.\rSet to true if the object can be marked with icons such as favorite and flag.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showMarkers</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getShowMarkers",
    "longname": "sap.m.ObjectListItem#getShowMarkers",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getShowMarkers"
  },
  {
    "description": "Getter for property <code>title</code>.\rtitle\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.ObjectListItem#getTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.getTitle"
  },
  {
    "description": "Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute whose index is looked for.",
        "name": "oAttribute"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfAttribute",
    "longname": "sap.m.ObjectListItem#indexOfAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.indexOfAttribute"
  },
  {
    "description": "Inserts a attribute into the aggregation named <code>attributes</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute to insert; if empty, nothing is inserted",
        "name": "oAttribute"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the attribute should be inserted at; for \r            a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value \r            greater than the current size of the aggregation, the attribute is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertAttribute",
    "longname": "sap.m.ObjectListItem#insertAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.insertAttribute"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>attributes</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ObjectAttribute>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllAttributes",
    "longname": "sap.m.ObjectListItem#removeAllAttributes",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.removeAllAttributes"
  },
  {
    "description": "Removes an attribute from the aggregation named <code>attributes</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the attribute to remove or its index or id",
        "name": "vAttribute"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectAttribute"
          ]
        },
        "description": "the removed attribute or null"
      }
    ],
    "name": "removeAttribute",
    "longname": "sap.m.ObjectListItem#removeAttribute",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.removeAttribute"
  },
  {
    "description": "Setter for property <code>activeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>activeIcon</code>",
        "name": "sActiveIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveIcon",
    "longname": "sap.m.ObjectListItem#setActiveIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setActiveIcon"
  },
  {
    "description": "Setter for the aggregated <code>firstStatus</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "name": "oFirstStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFirstStatus",
    "longname": "sap.m.ObjectListItem#setFirstStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setFirstStatus"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.ObjectListItem#setIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.ObjectListItem#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>intro</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>intro</code>",
        "name": "sIntro"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIntro",
    "longname": "sap.m.ObjectListItem#setIntro",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setIntro"
  },
  {
    "description": "Setter for property <code>markFavorite</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>markFavorite</code>",
        "name": "bMarkFavorite"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setMarkFavorite",
    "longname": "sap.m.ObjectListItem#setMarkFavorite",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setMarkFavorite"
  },
  {
    "description": "Setter for property <code>markFlagged</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>markFlagged</code>",
        "name": "bMarkFlagged"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setMarkFlagged",
    "longname": "sap.m.ObjectListItem#setMarkFlagged",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setMarkFlagged"
  },
  {
    "description": "Setter for property <code>number</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>number</code>",
        "name": "sNumber"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumber",
    "longname": "sap.m.ObjectListItem#setNumber",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setNumber"
  },
  {
    "description": "Setter for property <code>numberUnit</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>numberUnit</code>",
        "name": "sNumberUnit"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumberUnit",
    "longname": "sap.m.ObjectListItem#setNumberUnit",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setNumberUnit"
  },
  {
    "description": "Setter for the aggregated <code>secondStatus</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "name": "oSecondStatus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSecondStatus",
    "longname": "sap.m.ObjectListItem#setSecondStatus",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setSecondStatus"
  },
  {
    "description": "Setter for property <code>showMarkers</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showMarkers</code>",
        "name": "bShowMarkers"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setShowMarkers",
    "longname": "sap.m.ObjectListItem#setShowMarkers",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setShowMarkers"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.ObjectListItem#setTitle",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "codeName": "sap.m.ObjectListItem.prototype.setTitle"
  },
  {
    "description": "Constructor for a new ObjectNumber.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getNumber number} : string</li>\r<li>{@link #getNumberUnit numberUnit} : string</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEmphasized emphasized} : boolean (default: true)</li>\r<li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Control displays number and number unit properties in the table cell.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "ObjectNumber",
    "longname": "sap.m.ObjectNumber",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ObjectNumber"
  },
  {
    "description": "Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ObjectNumber.extend",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "codeName": "sap.m.ObjectNumber.extend"
  },
  {
    "description": "Getter for property <code>emphasized</code>.\rWhether the ObjectNumber should appear emphasized\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>emphasized</code>"
      }
    ],
    "name": "getEmphasized",
    "longname": "sap.m.ObjectNumber#getEmphasized",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.getEmphasized"
  },
  {
    "description": "Getter for property <code>number</code>.\rNumber field\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>number</code>"
      }
    ],
    "name": "getNumber",
    "longname": "sap.m.ObjectNumber#getNumber",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.getNumber"
  },
  {
    "description": "Getter for property <code>numberUnit</code>.\rNumber units qualifier\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>numberUnit</code>"
      }
    ],
    "name": "getNumberUnit",
    "longname": "sap.m.ObjectNumber#getNumberUnit",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.getNumberUnit"
  },
  {
    "description": "Getter for property <code>state</code>.\rThe object number's value state. Setting this state will cause the numebr to be rendered in state-specific colors (only blue-crystal theme).\r</p><p>\rDefault value is <code>sap.ui.core.ValueState.None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>state</code>"
      }
    ],
    "name": "getState",
    "longname": "sap.m.ObjectNumber#getState",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.getState"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible object number is not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ObjectNumber#getVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.getVisible"
  },
  {
    "description": "Setter for property <code>emphasized</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>emphasized</code>",
        "name": "bEmphasized"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectNumber"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEmphasized",
    "longname": "sap.m.ObjectNumber#setEmphasized",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.setEmphasized"
  },
  {
    "description": "Setter for property <code>number</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>number</code>",
        "name": "sNumber"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectNumber"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumber",
    "longname": "sap.m.ObjectNumber#setNumber",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.setNumber"
  },
  {
    "description": "Setter for property <code>numberUnit</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>numberUnit</code>",
        "name": "sNumberUnit"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectNumber"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumberUnit",
    "longname": "sap.m.ObjectNumber#setNumberUnit",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.setNumberUnit"
  },
  {
    "description": "API method to set the object number's value state",
    "params": [
      {
        "description": "the Object Number's value state",
        "name": "sState"
      }
    ],
    "name": "setState",
    "longname": "sap.m.ObjectNumber#setState",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.setState"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectNumber"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ObjectNumber#setVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectNumber",
    "scope": "instance",
    "codeName": "sap.m.ObjectNumber.prototype.setVisible"
  },
  {
    "description": "Constructor for a new ObjectStatus.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string</li>\r<li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Status information that may be either text with a value state, or an icon.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "ObjectStatus",
    "longname": "sap.m.ObjectStatus",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ObjectStatus"
  },
  {
    "description": "Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ObjectStatus.extend",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "codeName": "sap.m.ObjectStatus.extend"
  },
  {
    "description": "Getter for property <code>icon</code>.\rIcon URI. This may be either an icon font or image path.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.ObjectStatus#getIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.ObjectStatus#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>state</code>.\rText value state.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>state</code>"
      }
    ],
    "name": "getState",
    "longname": "sap.m.ObjectStatus#getState",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.getState"
  },
  {
    "description": "Getter for property <code>text</code>.\rText value.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.ObjectStatus#getText",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.getText"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.ObjectStatus#setIcon",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.ObjectStatus#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>state</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>state</code>",
        "name": "oState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setState",
    "longname": "sap.m.ObjectStatus#setState",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.setState"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ObjectStatus"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.ObjectStatus#setText",
    "kind": "function",
    "memberof": "sap.m.ObjectStatus",
    "scope": "instance",
    "codeName": "sap.m.ObjectStatus.prototype.setText"
  },
  {
    "description": "Constructor for a new Page.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>\r<li>{@link #getShowHeader showHeader} : boolean (default: true)</li>\r<li>{@link #getNavButtonText navButtonText} : string</li>\r<li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign (default: sap.m.PageBackgroundDesign.Standard)</li>\r<li>{@link #getNavButtonType navButtonType} : sap.m.ButtonType (default: sap.m.ButtonType.Back)</li>\r<li>{@link #getShowFooter showFooter} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li>\r<li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>\r<li>{@link #getFooter footer} : sap.m.Bar</li>\r<li>{@link #getSubHeader subHeader} : sap.m.Bar</li>\r<li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Page#event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Page#event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Page",
    "longname": "sap.m.Page",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Page"
  },
  {
    "description": "this event is fired when Nav Button is pressed",
    "kind": "event",
    "since": "1.12.2",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "navButtonPress",
    "longname": "sap.m.Page#event:navButtonPress",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.navButtonPress"
  },
  {
    "description": "this event is fired when Nav Button is tapped",
    "kind": "event",
    "deprecated": "Since version 1.12.2. \rthe navButtonPress event is replacing this event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "navButtonTap",
    "longname": "sap.m.Page#event:navButtonTap",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.navButtonTap"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.Page#addContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.addContent"
  },
  {
    "description": "Adds some headerContent <code>oHeaderContent</code> \rto the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to add; if empty, nothing is inserted",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addHeaderContent",
    "longname": "sap.m.Page#addHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.addHeaderContent"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Page</code>.<br/> itself. \r</p><p>\rthis event is fired when Nav Button is pressed",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.2",
    "name": "attachNavButtonPress",
    "longname": "sap.m.Page#attachNavButtonPress",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.attachNavButtonPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Page</code>.<br/> itself. \r</p><p>\rthis event is fired when Nav Button is tapped",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.12.2. \rthe navButtonPress event is replacing this event",
    "name": "attachNavButtonTap",
    "longname": "sap.m.Page#attachNavButtonTap",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.attachNavButtonTap"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.Page#destroyContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.destroyContent"
  },
  {
    "description": "Destroys the customHeader in the aggregation \rnamed <code>customHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyCustomHeader",
    "longname": "sap.m.Page#destroyCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.destroyCustomHeader"
  },
  {
    "description": "Destroys the footer in the aggregation \rnamed <code>footer</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyFooter",
    "longname": "sap.m.Page#destroyFooter",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.destroyFooter"
  },
  {
    "description": "Destroys all the headerContent in the aggregation \rnamed <code>headerContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyHeaderContent",
    "longname": "sap.m.Page#destroyHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.destroyHeaderContent"
  },
  {
    "description": "Destroys the subHeader in the aggregation \rnamed <code>subHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySubHeader",
    "longname": "sap.m.Page#destroySubHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.destroySubHeader"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'navButtonPress' event of this <code>sap.m.Page</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.2",
    "name": "detachNavButtonPress",
    "longname": "sap.m.Page#detachNavButtonPress",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.detachNavButtonPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.12.2. \rthe navButtonPress event is replacing this event",
    "name": "detachNavButtonTap",
    "longname": "sap.m.Page#detachNavButtonTap",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.detachNavButtonTap"
  },
  {
    "description": "Creates a new subclass of class sap.m.Page with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Page.extend",
    "kind": "function",
    "memberof": "sap.m.Page",
    "codeName": "sap.m.Page.extend"
  },
  {
    "description": "Fire event navButtonPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "since": "1.12.2",
    "name": "fireNavButtonPress",
    "longname": "sap.m.Page#fireNavButtonPress",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.fireNavButtonPress"
  },
  {
    "description": "Fire event navButtonTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "deprecated": "Since version 1.12.2. \rthe navButtonPress event is replacing this event",
    "name": "fireNavButtonTap",
    "longname": "sap.m.Page#fireNavButtonTap",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.fireNavButtonTap"
  },
  {
    "description": "Getter for property <code>backgroundDesign</code>.\rThis property is used to set the background color of a page. When a list is placed inside a page, the value \"List\" should be used to display a gray background. \"Standard\", with the value white, is used as default if not specified.\r</p><p>\rDefault value is <code>Standard</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PageBackgroundDesign"
          ]
        },
        "description": "the value of property <code>backgroundDesign</code>"
      }
    ],
    "name": "getBackgroundDesign",
    "longname": "sap.m.Page#getBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getBackgroundDesign"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe content of this page",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.Page#getContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getContent"
  },
  {
    "description": "Getter for aggregation <code>customHeader</code>.<br/>\rThe (optional) custom header of this page.\rUse this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.\rIf this aggregation is set, the simple properties \"title\", \"showNavButton\", \"NavButtonText\" and \"icon\" are not used.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "name": "getCustomHeader",
    "longname": "sap.m.Page#getCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getCustomHeader"
  },
  {
    "description": "Getter for property <code>enableScrolling</code>.\rWhether the Page takes special measures to make page content scrollable and keep headers fixed.\rIf set to false, there will be no scrolling at all; for performance reasons this is highly recommended when scrolling is not needed.\r</p><p>\rThe Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.\r</p><p>\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enableScrolling</code>"
      }
    ],
    "name": "getEnableScrolling",
    "longname": "sap.m.Page#getEnableScrolling",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getEnableScrolling"
  },
  {
    "description": "Getter for aggregation <code>footer</code>.<br/>\rThe (optional) footer of this page. It is always located at the bottom of the page",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "name": "getFooter",
    "longname": "sap.m.Page#getFooter",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getFooter"
  },
  {
    "description": "Getter for aggregation <code>headerContent</code>.<br/>\rControls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.\rWhen a customHeader is used, this aggregation will be ignored.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getHeaderContent",
    "longname": "sap.m.Page#getHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getHeaderContent"
  },
  {
    "description": "Getter for property <code>icon</code>.\rthe icon that is rendered in the page header bar in non-iOS platforms. This property is theme-dependent and might not have any effect in a certain theme.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.Page#getIcon",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>navButtonText</code>.\rThe text of the nav button when running in iOS (if shown) in case it deviates from the default, which is \"Back\". This property is theme-dependent and might not have any effect in a certain theme.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>navButtonText</code>"
      }
    ],
    "name": "getNavButtonText",
    "longname": "sap.m.Page#getNavButtonText",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getNavButtonText"
  },
  {
    "description": "Getter for property <code>navButtonType</code>.\rThis property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header, you can set the value to \"Default\".\r</p><p>\rDefault value is <code>Back</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ButtonType"
          ]
        },
        "description": "the value of property <code>navButtonType</code>"
      }
    ],
    "since": "1.12",
    "name": "getNavButtonType",
    "longname": "sap.m.Page#getNavButtonType",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getNavButtonType"
  },
  {
    "description": "Getter for property <code>showFooter</code>.\rWhether this page shall have a footer\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showFooter</code>"
      }
    ],
    "since": "1.13.1",
    "name": "getShowFooter",
    "longname": "sap.m.Page#getShowFooter",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getShowFooter"
  },
  {
    "description": "Getter for property <code>showHeader</code>.\rWhether this page shall have a header.\rIf set to true, either the control under the \"customHeader\" aggregation is used, or if there is no such control, a Header control is constructed from the properties \"title\", \"showNavButton\", \"navButtonText\" and \"icon\" depending on the platform.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showHeader</code>"
      }
    ],
    "name": "getShowHeader",
    "longname": "sap.m.Page#getShowHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getShowHeader"
  },
  {
    "description": "Getter for property <code>showNavButton</code>.\rA nav button will be rendered on the left area of header bar if this property is set to true.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showNavButton</code>"
      }
    ],
    "name": "getShowNavButton",
    "longname": "sap.m.Page#getShowNavButton",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getShowNavButton"
  },
  {
    "description": "Getter for aggregation <code>subHeader</code>.<br/>\ra subHeader will be rendered directly under the header",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "name": "getSubHeader",
    "longname": "sap.m.Page#getSubHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getSubHeader"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe title text appearing in the page header bar.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.Page#getTitle",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.getTitle"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.Page#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.indexOfContent"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent whose index is looked for.",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfHeaderContent",
    "longname": "sap.m.Page#indexOfHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.indexOfHeaderContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.Page#insertContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.insertContent"
  },
  {
    "description": "Inserts a headerContent into the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to insert; if empty, nothing is inserted",
        "name": "oHeaderContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the headerContent should be inserted at; for \r            a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value \r            greater than the current size of the aggregation, the headerContent is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertHeaderContent",
    "longname": "sap.m.Page#insertHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.insertHeaderContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.Page#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.removeAllContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>headerContent</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllHeaderContent",
    "longname": "sap.m.Page#removeAllHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.removeAllHeaderContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.Page#removeContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.removeContent"
  },
  {
    "description": "Removes an headerContent from the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to remove or its index or id",
        "name": "vHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed headerContent or null"
      }
    ],
    "name": "removeHeaderContent",
    "longname": "sap.m.Page#removeHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.removeHeaderContent"
  },
  {
    "description": "Scrolls to the given position. Only available if enableScrolling is set to \"true\".",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The vertical pixel position to scroll to. Scrolling down happens with positive values.",
        "name": "iY"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.",
        "name": "iTime"
      }
    ],
    "type": {
      "names": [
        "sap.m.Page"
      ]
    },
    "name": "scrollTo",
    "longname": "sap.m.Page#scrollTo",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.scrollTo"
  },
  {
    "description": "Setter for property <code>backgroundDesign</code>.\r</p><p>\rDefault value is <code>Standard</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.PageBackgroundDesign"
          ]
        },
        "description": "new value for property <code>backgroundDesign</code>",
        "name": "oBackgroundDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setBackgroundDesign",
    "longname": "sap.m.Page#setBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setBackgroundDesign"
  },
  {
    "description": "Setter for the aggregated <code>customHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oCustomHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomHeader",
    "longname": "sap.m.Page#setCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setCustomHeader"
  },
  {
    "description": "Setter for property <code>enableScrolling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enableScrolling</code>",
        "name": "bEnableScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnableScrolling",
    "longname": "sap.m.Page#setEnableScrolling",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setEnableScrolling"
  },
  {
    "description": "Setter for the aggregated <code>footer</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oFooter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooter",
    "longname": "sap.m.Page#setFooter",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setFooter"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.Page#setIcon",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>navButtonText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>navButtonText</code>",
        "name": "sNavButtonText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNavButtonText",
    "longname": "sap.m.Page#setNavButtonText",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setNavButtonText"
  },
  {
    "description": "Setter for property <code>navButtonType</code>.\r</p><p>\rDefault value is <code>Back</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ButtonType"
          ]
        },
        "description": "new value for property <code>navButtonType</code>",
        "name": "oNavButtonType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12",
    "name": "setNavButtonType",
    "longname": "sap.m.Page#setNavButtonType",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setNavButtonType"
  },
  {
    "description": "Setter for property <code>showFooter</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showFooter</code>",
        "name": "bShowFooter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.13.1",
    "name": "setShowFooter",
    "longname": "sap.m.Page#setShowFooter",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setShowFooter"
  },
  {
    "description": "Setter for property <code>showHeader</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showHeader</code>",
        "name": "bShowHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowHeader",
    "longname": "sap.m.Page#setShowHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setShowHeader"
  },
  {
    "description": "Setter for property <code>showNavButton</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showNavButton</code>",
        "name": "bShowNavButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowNavButton",
    "longname": "sap.m.Page#setShowNavButton",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setShowNavButton"
  },
  {
    "description": "Setter for the aggregated <code>subHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oSubHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSubHeader",
    "longname": "sap.m.Page#setSubHeader",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setSubHeader"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Page"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.Page#setTitle",
    "kind": "function",
    "memberof": "sap.m.Page",
    "scope": "instance",
    "codeName": "sap.m.Page.prototype.setTitle"
  },
  {
    "description": "Constructor for a new Panel.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getHeaderText headerText} : string (default: 'Start')</li>\r<li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H4)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The Panel control is a container for controls with a solid background and a header text.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "Panel",
    "longname": "sap.m.Panel",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Panel"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.Panel#addContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.addContent"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.Panel#destroyContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.destroyContent"
  },
  {
    "description": "Creates a new subclass of class sap.m.Panel with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Panel.extend",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "codeName": "sap.m.Panel.extend"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rContent for the Panel",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.Panel#getContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.getContent"
  },
  {
    "description": "Getter for property <code>headerLevel</code>.\rThe header level following the standard HTML scheme (H1 - H6)\r</p><p>\rDefault value is <code>H4</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "the value of property <code>headerLevel</code>"
      }
    ],
    "name": "getHeaderLevel",
    "longname": "sap.m.Panel#getHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.getHeaderLevel"
  },
  {
    "description": "Getter for property <code>headerText</code>.\rSets the header text\r</p><p>\rDefault value is <code>Start</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>headerText</code>"
      }
    ],
    "name": "getHeaderText",
    "longname": "sap.m.Panel#getHeaderText",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.getHeaderText"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe Panel height\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.Panel#getHeight",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.getHeight"
  },
  {
    "description": "Getter for property <code>visible</code>.\rIs the control visible\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Panel#getVisible",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe Panel width\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Panel#getWidth",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.Panel#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.Panel#insertContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.insertContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.Panel#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.Panel#removeContent",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.removeContent"
  },
  {
    "description": "Sets the header level of the panel.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the header level of the panel",
        "name": "sHeaderLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderLevel",
    "longname": "sap.m.Panel#setHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.setHeaderLevel"
  },
  {
    "description": "Sets the header text of the panel.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the header text of the panel",
        "name": "sHeaderText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderText",
    "longname": "sap.m.Panel#setHeaderText",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.setHeaderText"
  },
  {
    "description": "Sets the height of the panel.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the height of the panel as CSS size",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.Panel#setHeight",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Panel#setVisible",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.setVisible"
  },
  {
    "description": "Sets the width of the panel.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the width of the panel as CSS size",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Panel"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Panel#setWidth",
    "kind": "function",
    "memberof": "sap.m.Panel",
    "scope": "instance",
    "codeName": "sap.m.Panel.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Popover.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>\r<li>{@link #getShowHeader showHeader} : boolean (default: true)</li>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getModal modal} : boolean (default: false)</li>\r<li>{@link #getOffsetX offsetX} : int (default: 0)</li>\r<li>{@link #getOffsetY offsetY} : int (default: 0)</li>\r<li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>\r<li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>\r<li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>\r<li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>\r<li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li>\r<li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>\r<li>{@link #getSubHeader subHeader} : sap.ui.core.Control</li>\r<li>{@link #getFooter footer} : sap.ui.core.Control</li>\r<li>{@link #getLeftButton leftButton} : sap.m.Button</li>\r<li>{@link #getRightButton rightButton} : sap.m.Button</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Popover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Popover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Popover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Popover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Popover",
    "longname": "sap.m.Popover",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Popover"
  },
  {
    "description": "This event will be fired after the popover is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This refers to the control which opens the popover.",
        "name": "oControlEvent.getParameters.openBy"
      }
    ],
    "name": "afterClose",
    "longname": "sap.m.Popover#event:afterClose",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.afterClose"
  },
  {
    "description": "This event will be fired after the popover is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This refers to the control which opens the popover.",
        "name": "oControlEvent.getParameters.openBy"
      }
    ],
    "name": "afterOpen",
    "longname": "sap.m.Popover#event:afterOpen",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.afterOpen"
  },
  {
    "description": "This event will be fired before the popover is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This refers to the control which opens the popover.",
        "name": "oControlEvent.getParameters.openBy"
      }
    ],
    "name": "beforeClose",
    "longname": "sap.m.Popover#event:beforeClose",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.beforeClose"
  },
  {
    "description": "This event will be fired before the popover is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This refers to the control which opens the popover.",
        "name": "oControlEvent.getParameters.openBy"
      }
    ],
    "name": "beforeOpen",
    "longname": "sap.m.Popover#event:beforeOpen",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.beforeOpen"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.Popover#addContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.addContent"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Popover</code>.<br/> itself. \r</p><p>\rThis event will be fired after the popover is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterClose",
    "longname": "sap.m.Popover#attachAfterClose",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.attachAfterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Popover</code>.<br/> itself. \r</p><p>\rThis event will be fired after the popover is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterOpen",
    "longname": "sap.m.Popover#attachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.attachAfterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Popover</code>.<br/> itself. \r</p><p>\rThis event will be fired before the popover is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeClose",
    "longname": "sap.m.Popover#attachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.attachBeforeClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Popover</code>.<br/> itself. \r</p><p>\rThis event will be fired before the popover is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeOpen",
    "longname": "sap.m.Popover#attachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.attachBeforeOpen"
  },
  {
    "description": "Closes the popover when it's already opened.",
    "name": "close",
    "longname": "sap.m.Popover#close",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.close"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.Popover#destroyContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.destroyContent"
  },
  {
    "description": "Destroys the customHeader in the aggregation \rnamed <code>customHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyCustomHeader",
    "longname": "sap.m.Popover#destroyCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.destroyCustomHeader"
  },
  {
    "description": "Destroys the footer in the aggregation \rnamed <code>footer</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyFooter",
    "longname": "sap.m.Popover#destroyFooter",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.destroyFooter"
  },
  {
    "description": "Destroys the leftButton in the aggregation \rnamed <code>leftButton</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyLeftButton",
    "longname": "sap.m.Popover#destroyLeftButton",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.destroyLeftButton"
  },
  {
    "description": "Destroys the rightButton in the aggregation \rnamed <code>rightButton</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyRightButton",
    "longname": "sap.m.Popover#destroyRightButton",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.destroyRightButton"
  },
  {
    "description": "Destroys the subHeader in the aggregation \rnamed <code>subHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "destroySubHeader",
    "longname": "sap.m.Popover#destroySubHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.destroySubHeader"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterClose",
    "longname": "sap.m.Popover#detachAfterClose",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.detachAfterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterOpen",
    "longname": "sap.m.Popover#detachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.detachAfterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeClose",
    "longname": "sap.m.Popover#detachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.detachBeforeClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeOpen",
    "longname": "sap.m.Popover#detachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.detachBeforeOpen"
  },
  {
    "description": "Creates a new subclass of class sap.m.Popover with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Popover.extend",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "codeName": "sap.m.Popover.extend"
  },
  {
    "description": "Fire event afterClose to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterClose",
    "longname": "sap.m.Popover#fireAfterClose",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.fireAfterClose"
  },
  {
    "description": "Fire event afterOpen to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterOpen",
    "longname": "sap.m.Popover#fireAfterOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.fireAfterOpen"
  },
  {
    "description": "Fire event beforeClose to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeClose",
    "longname": "sap.m.Popover#fireBeforeClose",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.fireBeforeClose"
  },
  {
    "description": "Fire event beforeOpen to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeOpen",
    "longname": "sap.m.Popover#fireBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.fireBeforeOpen"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe content inside the popover.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.Popover#getContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getContent"
  },
  {
    "description": "Getter for property <code>contentHeight</code>.\rSet the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>contentHeight</code>"
      }
    ],
    "since": "1.9.0",
    "name": "getContentHeight",
    "longname": "sap.m.Popover#getContentHeight",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getContentHeight"
  },
  {
    "description": "Getter for property <code>contentWidth</code>.\rSet the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>contentWidth</code>"
      }
    ],
    "since": "1.9.0",
    "name": "getContentWidth",
    "longname": "sap.m.Popover#getContentWidth",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getContentWidth"
  },
  {
    "description": "Getter for aggregation <code>customHeader</code>.<br/>\rAny control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getCustomHeader",
    "longname": "sap.m.Popover#getCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getCustomHeader"
  },
  {
    "description": "Getter for property <code>enableScrolling</code>.\rThis property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enableScrolling</code>"
      }
    ],
    "deprecated": "Since version 1.15.0. \rThis property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.",
    "name": "getEnableScrolling",
    "longname": "sap.m.Popover#getEnableScrolling",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getEnableScrolling"
  },
  {
    "description": "Getter for aggregation <code>footer</code>.<br/>\rThis is optional footer which is shown on the bottom of the popover.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getFooter",
    "longname": "sap.m.Popover#getFooter",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getFooter"
  },
  {
    "description": "Getter for property <code>horizontalScrolling</code>.\rThis property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.\rPopover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>horizontalScrolling</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getHorizontalScrolling",
    "longname": "sap.m.Popover#getHorizontalScrolling",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getHorizontalScrolling"
  },
  {
    "description": "Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialFocus</code> association, or null"
      }
    ],
    "since": "1.15.0",
    "name": "getInitialFocus",
    "longname": "sap.m.Popover#getInitialFocus",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getInitialFocus"
  },
  {
    "description": "Getter for aggregation <code>leftButton</code>.<br/>\rLeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        }
      }
    ],
    "name": "getLeftButton",
    "longname": "sap.m.Popover#getLeftButton",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getLeftButton"
  },
  {
    "description": "Getter for property <code>modal</code>.\rIf the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>modal</code>"
      }
    ],
    "name": "getModal",
    "longname": "sap.m.Popover#getModal",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getModal"
  },
  {
    "description": "Getter for property <code>offsetX</code>.\rThe offset for the popover placement in the x axis. It's with unit pixel.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>offsetX</code>"
      }
    ],
    "name": "getOffsetX",
    "longname": "sap.m.Popover#getOffsetX",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getOffsetX"
  },
  {
    "description": "Getter for property <code>offsetY</code>.\rThe offset for the popover placement in the y axis. It's with unit pixel.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>offsetY</code>"
      }
    ],
    "name": "getOffsetY",
    "longname": "sap.m.Popover#getOffsetY",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getOffsetY"
  },
  {
    "description": "Getter for property <code>placement</code>.\rThis is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Vertical, sap.m.PlacementType.Left.Horizontal, sap.m.PlacementType.Left.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.\r</p><p>\rDefault value is <code>Right</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PlacementType"
          ]
        },
        "description": "the value of property <code>placement</code>"
      }
    ],
    "name": "getPlacement",
    "longname": "sap.m.Popover#getPlacement",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getPlacement"
  },
  {
    "description": "Getter for aggregation <code>rightButton</code>.<br/>\rRightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        }
      }
    ],
    "name": "getRightButton",
    "longname": "sap.m.Popover#getRightButton",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getRightButton"
  },
  {
    "description": "Getter for property <code>showHeader</code>.\rIf a header should be shown at the top of the popover.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showHeader</code>"
      }
    ],
    "name": "getShowHeader",
    "longname": "sap.m.Popover#getShowHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getShowHeader"
  },
  {
    "description": "Getter for aggregation <code>subHeader</code>.<br/>\rWhen subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "since": "1.15.1",
    "name": "getSubHeader",
    "longname": "sap.m.Popover#getSubHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getSubHeader"
  },
  {
    "description": "Getter for property <code>title</code>.\rTitle text appears in the header. This property will be ignored when showHeader is set to false.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.Popover#getTitle",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>verticalScrolling</code>.\rThis property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.\rPopover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>verticalScrolling</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getVerticalScrolling",
    "longname": "sap.m.Popover#getVerticalScrolling",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.getVerticalScrolling"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.Popover#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.Popover#insertContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.insertContent"
  },
  {
    "description": "The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "since": "1.9.1",
    "name": "isOpen",
    "longname": "sap.m.Popover#isOpen",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.isOpen"
  },
  {
    "description": "Opens the popover and set the popover position according to the {placement} property\raround the {oControl} parameter.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The control to which the popover is aligned based on the {placement} property",
        "name": "oControl"
      }
    ],
    "name": "openBy",
    "longname": "sap.m.Popover#openBy",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.openBy"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.Popover#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.Popover#removeContent",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.removeContent"
  },
  {
    "description": "Setter for property <code>contentHeight</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>contentHeight</code>",
        "name": "sContentHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.0",
    "name": "setContentHeight",
    "longname": "sap.m.Popover#setContentHeight",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setContentHeight"
  },
  {
    "description": "Setter for property <code>contentWidth</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>contentWidth</code>",
        "name": "sContentWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.0",
    "name": "setContentWidth",
    "longname": "sap.m.Popover#setContentWidth",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setContentWidth"
  },
  {
    "description": "Setter for the aggregated <code>customHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oCustomHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomHeader",
    "longname": "sap.m.Popover#setCustomHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setCustomHeader"
  },
  {
    "description": "Setter for property <code>enableScrolling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enableScrolling</code>",
        "name": "bEnableScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.15.0. \rThis property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.",
    "name": "setEnableScrolling",
    "longname": "sap.m.Popover#setEnableScrolling",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setEnableScrolling"
  },
  {
    "description": "Setter for the aggregated <code>footer</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oFooter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooter",
    "longname": "sap.m.Popover#setFooter",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setFooter"
  },
  {
    "description": "Setter for property <code>horizontalScrolling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>horizontalScrolling</code>",
        "name": "bHorizontalScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setHorizontalScrolling",
    "longname": "sap.m.Popover#setHorizontalScrolling",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setHorizontalScrolling"
  },
  {
    "description": "Focus is set to the popover in the sequence of leftButton and rightButton when available. But if some other control neends to get the focus other than one of those two buttons, set the initialFocus with the control which should be focused on.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialFocus</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialFocus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setInitialFocus",
    "longname": "sap.m.Popover#setInitialFocus",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setInitialFocus"
  },
  {
    "description": "The setter of the cancelButton. If you want to show a cancel button in the popover, don't forget to\rset the {showHeader} to true.",
    "name": "setLeftButton",
    "longname": "sap.m.Popover#setLeftButton",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setLeftButton"
  },
  {
    "description": "Setter for property <code>modal</code>.\rThis overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>modal</code>.",
        "name": "bModal"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "a CSS class (or space-separated list of classes) that should be added to the block layer.",
        "name": "sModalCSSClass"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining."
      }
    ],
    "name": "setModal",
    "longname": "sap.m.Popover#setModal",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setModal"
  },
  {
    "description": "Setter for property <code>offsetX</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>offsetX</code>",
        "name": "iOffsetX"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setOffsetX",
    "longname": "sap.m.Popover#setOffsetX",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setOffsetX"
  },
  {
    "description": "Setter for property <code>offsetY</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>offsetY</code>",
        "name": "iOffsetY"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setOffsetY",
    "longname": "sap.m.Popover#setOffsetY",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setOffsetY"
  },
  {
    "description": "Set the placement of the popover.",
    "name": "setPlacement",
    "longname": "sap.m.Popover#setPlacement",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setPlacement"
  },
  {
    "description": "The setter of the doneButton. If you want to show a done button in the popover, don't forget to\rset the {showHeader} to true.",
    "name": "setRightButton",
    "longname": "sap.m.Popover#setRightButton",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setRightButton"
  },
  {
    "description": "Setter for property <code>showHeader</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showHeader</code>",
        "name": "bShowHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowHeader",
    "longname": "sap.m.Popover#setShowHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setShowHeader"
  },
  {
    "description": "Setter for the aggregated <code>subHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oSubHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.1",
    "name": "setSubHeader",
    "longname": "sap.m.Popover#setSubHeader",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setSubHeader"
  },
  {
    "description": "The setter of the title property. If you want to show a header in the popover, don't forget to\rset the {showHeader} to true.",
    "name": "setTitle",
    "longname": "sap.m.Popover#setTitle",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>verticalScrolling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>verticalScrolling</code>",
        "name": "bVerticalScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Popover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setVerticalScrolling",
    "longname": "sap.m.Popover#setVerticalScrolling",
    "kind": "function",
    "memberof": "sap.m.Popover",
    "scope": "instance",
    "codeName": "sap.m.Popover.prototype.setVerticalScrolling"
  },
  {
    "description": "Constructor for a new ProgressIndicator.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>\r<li>{@link #getDisplayValue displayValue} : string (default: '0%')</li>\r<li>{@link #getPercentValue percentValue} : float (default: 0)</li>\r<li>{@link #getShowValue showValue} : boolean (default: true)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '2.5rem')</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.\rAdditionally, a user defined string can be displayed on the ProgressIndicator.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.13.1",
    "name": "ProgressIndicator",
    "longname": "sap.m.ProgressIndicator",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ProgressIndicator"
  },
  {
    "description": "Creates a new subclass of class sap.m.ProgressIndicator with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ProgressIndicator.extend",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "codeName": "sap.m.ProgressIndicator.extend"
  },
  {
    "description": "Getter for property <code>displayValue</code>.\rThe text value to be displayed in the bar.\r</p><p>\rDefault value is <code>0%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>displayValue</code>"
      }
    ],
    "name": "getDisplayValue",
    "longname": "sap.m.ProgressIndicator#getDisplayValue",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getDisplayValue"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rSwitches enabled state of the control. Disabled fields have different colors, and can not be focused.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.ProgressIndicator#getEnabled",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the control.\rSuggested size for normal use 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) 1.375rem (22px).\r</p><p>\rDefault value is <code>2.5rem</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "since": "1.15.0",
    "name": "getHeight",
    "longname": "sap.m.ProgressIndicator#getHeight",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getHeight"
  },
  {
    "description": "Getter for property <code>percentValue</code>.\rThe numerical value for the displayed length of the progress bar.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>percentValue</code>"
      }
    ],
    "name": "getPercentValue",
    "longname": "sap.m.ProgressIndicator#getPercentValue",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getPercentValue"
  },
  {
    "description": "Getter for property <code>showValue</code>.\rSpecifies whether the current value shall be rendered inside the bar.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showValue</code>"
      }
    ],
    "name": "getShowValue",
    "longname": "sap.m.ProgressIndicator#getShowValue",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getShowValue"
  },
  {
    "description": "Getter for property <code>state</code>.\rThe state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>state</code>"
      }
    ],
    "name": "getState",
    "longname": "sap.m.ProgressIndicator#getState",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getState"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible controls are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ProgressIndicator#getVisible",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the control.\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.ProgressIndicator#getWidth",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>displayValue</code>.\r</p><p>\rDefault value is <code>0%</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>displayValue</code>",
        "name": "sDisplayValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDisplayValue",
    "longname": "sap.m.ProgressIndicator#setDisplayValue",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setDisplayValue"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.ProgressIndicator#setEnabled",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is <code>2.5rem</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.15.0",
    "name": "setHeight",
    "longname": "sap.m.ProgressIndicator#setHeight",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>percentValue</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>percentValue</code>",
        "name": "fPercentValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPercentValue",
    "longname": "sap.m.ProgressIndicator#setPercentValue",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setPercentValue"
  },
  {
    "description": "Setter for property <code>showValue</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showValue</code>",
        "name": "bShowValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowValue",
    "longname": "sap.m.ProgressIndicator#setShowValue",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setShowValue"
  },
  {
    "description": "Setter for property <code>state</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>state</code>",
        "name": "oState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setState",
    "longname": "sap.m.ProgressIndicator#setState",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setState"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ProgressIndicator#setVisible",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>100%</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ProgressIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.ProgressIndicator#setWidth",
    "kind": "function",
    "memberof": "sap.m.ProgressIndicator",
    "scope": "instance",
    "codeName": "sap.m.ProgressIndicator.prototype.setWidth"
  },
  {
    "description": "Constructor for a new PullToRefresh.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getDescription description} : string</li>\r<li>{@link #getShowIcon showIcon} : boolean (default: false)</li>\r<li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.PullToRefresh#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.\rOn touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the \"refresh\" event.\rIn non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the \"refresh\" event when clicked.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.9.2",
    "name": "PullToRefresh",
    "longname": "sap.m.PullToRefresh",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.PullToRefresh"
  },
  {
    "description": "Event indicates that the user has requested new data",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "refresh",
    "longname": "sap.m.PullToRefresh#event:refresh",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.refresh"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.PullToRefresh</code>.<br/> itself. \r</p><p>\rEvent indicates that the user has requested new data",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachRefresh",
    "longname": "sap.m.PullToRefresh#attachRefresh",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.attachRefresh"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachRefresh",
    "longname": "sap.m.PullToRefresh#detachRefresh",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.detachRefresh"
  },
  {
    "description": "Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.PullToRefresh.extend",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "codeName": "sap.m.PullToRefresh.extend"
  },
  {
    "description": "Fire event refresh to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireRefresh",
    "longname": "sap.m.PullToRefresh#fireRefresh",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.fireRefresh"
  },
  {
    "description": "Getter for property <code>customIcon</code>.\rProvide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>customIcon</code>"
      }
    ],
    "name": "getCustomIcon",
    "longname": "sap.m.PullToRefresh#getCustomIcon",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.getCustomIcon"
  },
  {
    "description": "Getter for property <code>description</code>.\rOptional description. May be used to inform a user, for example, when the list has been updated last time.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>description</code>"
      }
    ],
    "name": "getDescription",
    "longname": "sap.m.PullToRefresh#getDescription",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.getDescription"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.PullToRefresh#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>showIcon</code>.\rSet to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showIcon</code>"
      }
    ],
    "name": "getShowIcon",
    "longname": "sap.m.PullToRefresh#getShowIcon",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.getShowIcon"
  },
  {
    "description": "Getter for property <code>visible</code>.\rSet to false to remove PullToRefresh from the scroll container.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "since": "1.16.0",
    "name": "getVisible",
    "longname": "sap.m.PullToRefresh#getVisible",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.getVisible"
  },
  {
    "description": "Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.",
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "hide",
    "longname": "sap.m.PullToRefresh#hide",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.hide"
  },
  {
    "description": "Setter for property <code>customIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>customIcon</code>",
        "name": "sCustomIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomIcon",
    "longname": "sap.m.PullToRefresh#setCustomIcon",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.setCustomIcon"
  },
  {
    "description": "Setter for property <code>description</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>description</code>",
        "name": "sDescription"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDescription",
    "longname": "sap.m.PullToRefresh#setDescription",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.setDescription"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.PullToRefresh#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>showIcon</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showIcon</code>",
        "name": "bShowIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowIcon",
    "longname": "sap.m.PullToRefresh#setShowIcon",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.setShowIcon"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PullToRefresh"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16.0",
    "name": "setVisible",
    "longname": "sap.m.PullToRefresh#setVisible",
    "kind": "function",
    "memberof": "sap.m.PullToRefresh",
    "scope": "instance",
    "codeName": "sap.m.PullToRefresh.prototype.setVisible"
  },
  {
    "description": "Constructor for a new RadioButton.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getSelected selected} : boolean (default: false)</li>\r<li>{@link #getGroupName groupName} : string (default: 'sapMRbDefaultGroup')</li>\r<li>{@link #getText text} : string</li>\r<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>\r<li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.RadioButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Generally, you would create at least two radio button controls which should have the same GroupName;\rby this, you provide a limited choice for the user. Triggers an Event when User makes a change.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "RadioButton",
    "longname": "sap.m.RadioButton",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.RadioButton"
  },
  {
    "description": "Event is triggered when the user makes a change on the radio button (selecting or unselecting it).",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Checks whether the RadioButton is active or not.",
        "name": "oControlEvent.getParameters.selected"
      }
    ],
    "name": "select",
    "longname": "sap.m.RadioButton#event:select",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.select"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButton</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.RadioButton</code>.<br/> itself. \r</p><p>\rEvent is triggered when the user makes a change on the radio button (selecting or unselecting it).",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.RadioButton#attachSelect",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.attachSelect"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButton</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.RadioButton#detachSelect",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.detachSelect"
  },
  {
    "description": "Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.RadioButton.extend",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "codeName": "sap.m.RadioButton.extend"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'selected' of type <code>boolean</code> Checks whether the RadioButton is active or not.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.RadioButton#fireSelect",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.fireSelect"
  },
  {
    "description": "Getter for property <code>activeHandling</code>.\rthis is a flag to switch on activeHandling, when it is switch\red off, there will not be visual changes on active state. Default value is 'true'\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>activeHandling</code>"
      }
    ],
    "name": "getActiveHandling",
    "longname": "sap.m.RadioButton#getActiveHandling",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getActiveHandling"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rDisabled controls are displayed in another color.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.RadioButton#getEnabled",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>groupName</code>.\rName of the radio button group the current radio button belongs to. You can define a new name for the group.\rIf no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.\r</p><p>\rDefault value is <code>'sapMRbDefaultGroup'</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>groupName</code>"
      }
    ],
    "name": "getGroupName",
    "longname": "sap.m.RadioButton#getGroupName",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getGroupName"
  },
  {
    "description": "Getter for property <code>selected</code>.\rSpecifies the select state of the radio button\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.RadioButton#getSelected",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>text</code>.\rDefines the text displayed next to the RadioButton\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.RadioButton#getText",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getText"
  },
  {
    "description": "Getter for property <code>textDirection</code>.\rOptions for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "the value of property <code>textDirection</code>"
      }
    ],
    "name": "getTextDirection",
    "longname": "sap.m.RadioButton#getTextDirection",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getTextDirection"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible radio buttons are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.RadioButton#getVisible",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rWidth of Label\r</p><p>\rDefault value is <code>''</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.RadioButton#getWidth",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>activeHandling</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>activeHandling</code>",
        "name": "bActiveHandling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveHandling",
    "longname": "sap.m.RadioButton#setActiveHandling",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setActiveHandling"
  },
  {
    "description": "Method to set a RadioButton's state to active or inactive.",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "boolean to set the active state to true or false",
        "name": "bActive"
      }
    ],
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "setActiveState",
    "longname": "sap.m.RadioButton#setActiveState",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setActiveState"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.RadioButton#setEnabled",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>groupName</code>.\r</p><p>\rDefault value is <code>'sapMRbDefaultGroup'</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>groupName</code>",
        "name": "sGroupName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setGroupName",
    "longname": "sap.m.RadioButton#setGroupName",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setGroupName"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.RadioButton#setSelected",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.RadioButton#setText",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setText"
  },
  {
    "description": "Setter for property <code>textDirection</code>.\r</p><p>\rDefault value is <code>sap.ui.core.TextDirection.Inherit</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "new value for property <code>textDirection</code>",
        "name": "oTextDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextDirection",
    "longname": "sap.m.RadioButton#setTextDirection",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setTextDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.RadioButton#setVisible",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>''</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RadioButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.RadioButton#setWidth",
    "kind": "function",
    "memberof": "sap.m.RadioButton",
    "scope": "instance",
    "codeName": "sap.m.RadioButton.prototype.setWidth"
  },
  {
    "description": "Constructor for a new RatingIndicator.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getMaxValue maxValue} : int (default: 5)</li>\r<li>{@link #getValue value} : float (default: 0)</li>\r<li>{@link #getIconSize iconSize} : sap.ui.core.CSSSize (default: '1.375rem')</li>\r<li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>\r<li>{@link #getIconUnselected iconUnselected} : sap.ui.core.URI</li>\r<li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>\r<li>{@link #getVisualMode visualMode} : sap.m.RatingIndicatorVisualMode (default: sap.m.RatingIndicatorVisualMode.Half)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.RatingIndicator#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.RatingIndicator#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Is used to rate content. The amount of rating symbols can be specified, as well as the URIs to the\rimage icons which shall be used as rating symbols. When the user performs a rating, an event is fired.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.14",
    "name": "RatingIndicator",
    "longname": "sap.m.RatingIndicator",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.RatingIndicator"
  },
  {
    "description": "The event is fired when the user has done a rating.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The rated value",
        "name": "oControlEvent.getParameters.value"
      }
    ],
    "name": "change",
    "longname": "sap.m.RatingIndicator#event:change",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.change"
  },
  {
    "description": "This event is triggered during the dragging period, each time the rating value changes.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "The current value of the rating after a live change event.",
        "name": "oControlEvent.getParameters.value"
      }
    ],
    "name": "liveChange",
    "longname": "sap.m.RatingIndicator#event:liveChange",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.liveChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.RatingIndicator</code>.<br/> itself. \r</p><p>\rThe event is fired when the user has done a rating.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.RatingIndicator#attachChange",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.attachChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.RatingIndicator</code>.<br/> itself. \r</p><p>\rThis event is triggered during the dragging period, each time the rating value changes.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachLiveChange",
    "longname": "sap.m.RatingIndicator#attachLiveChange",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.attachLiveChange"
  },
  {
    "description": "Binder for property <code>value</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindValue",
    "longname": "sap.m.RatingIndicator#bindValue",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.bindValue"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.RatingIndicator</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.RatingIndicator#detachChange",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.detachChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.RatingIndicator</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachLiveChange",
    "longname": "sap.m.RatingIndicator#detachLiveChange",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.detachLiveChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.RatingIndicator with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.RatingIndicator.extend",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "codeName": "sap.m.RatingIndicator.extend"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'value' of type <code>int</code> The rated value</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.RatingIndicator#fireChange",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.fireChange"
  },
  {
    "description": "Fire event liveChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'value' of type <code>float</code> The current value of the rating after a live change event.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireLiveChange",
    "longname": "sap.m.RatingIndicator#fireLiveChange",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.fireLiveChange"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rValue \"true\" is required to let the user rate with this control. It is recommended to set this parameter to \"false\" for the \"Small\" size which is meant for indicating a value only\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.RatingIndicator#getEnabled",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>iconHovered</code>.\rThe URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>iconHovered</code>"
      }
    ],
    "name": "getIconHovered",
    "longname": "sap.m.RatingIndicator#getIconHovered",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getIconHovered"
  },
  {
    "description": "Getter for property <code>iconSelected</code>.\rThe URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>iconSelected</code>"
      }
    ],
    "name": "getIconSelected",
    "longname": "sap.m.RatingIndicator#getIconSelected",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getIconSelected"
  },
  {
    "description": "Getter for property <code>iconSize</code>.\rThe Size of the image or icon to be displayed. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations.\r</p><p>\rDefault value is <code>1.375rem</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>iconSize</code>"
      }
    ],
    "name": "getIconSize",
    "longname": "sap.m.RatingIndicator#getIconSize",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getIconSize"
  },
  {
    "description": "Getter for property <code>iconUnselected</code>.\rThe URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>iconUnselected</code>"
      }
    ],
    "name": "getIconUnselected",
    "longname": "sap.m.RatingIndicator#getIconUnselected",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getIconUnselected"
  },
  {
    "description": "Getter for property <code>maxValue</code>.\rThe number of displayed rating symbols\r</p><p>\rDefault value is <code>5</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>maxValue</code>"
      }
    ],
    "name": "getMaxValue",
    "longname": "sap.m.RatingIndicator#getMaxValue",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getMaxValue"
  },
  {
    "description": "Getter for property <code>value</code>.\rThe indicated value of the rating\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.RatingIndicator#getValue",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getValue"
  },
  {
    "description": "Getter for property <code>visible</code>.\rIf set to invisible, the control is not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.RatingIndicator#getVisible",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>visualMode</code>.\rDefines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)\r</p><p>\rDefault value is <code>Half</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicatorVisualMode"
          ]
        },
        "description": "the value of property <code>visualMode</code>"
      }
    ],
    "name": "getVisualMode",
    "longname": "sap.m.RatingIndicator#getVisualMode",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.getVisualMode"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.RatingIndicator#setEnabled",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setEnabled"
  },
  {
    "description": "Sets the hovered icon without rerendering the control",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core/URI"
          ]
        },
        "description": "the rating value to be set",
        "name": "fValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        },
        "description": "an instance of the rating control for chaining"
      }
    ],
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "name": "setIconHovered",
    "longname": "sap.m.RatingIndicator#setIconHovered",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setIconHovered"
  },
  {
    "description": "Sets the selected icon without rerendering the control",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core/URI"
          ]
        },
        "description": "the rating value to be set",
        "name": "fValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        },
        "description": "an instance of the rating control for chaining"
      }
    ],
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "name": "setIconSelected",
    "longname": "sap.m.RatingIndicator#setIconSelected",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setIconSelected"
  },
  {
    "description": "Sets the icon size value. The method is automatically updating the UI components if the control has been rendered before",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the rating value to be set",
        "name": "fValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        },
        "description": "an instance of the rating control for chaining"
      }
    ],
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "name": "setIconSize",
    "longname": "sap.m.RatingIndicator#setIconSize",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setIconSize"
  },
  {
    "description": "Sets the unselected icon without rerendering the control",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core/URI"
          ]
        },
        "description": "the rating value to be set",
        "name": "fValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        },
        "description": "an instance of the rating control for chaining"
      }
    ],
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "name": "setIconUnselected",
    "longname": "sap.m.RatingIndicator#setIconUnselected",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setIconUnselected"
  },
  {
    "description": "Setter for property <code>maxValue</code>.\r</p><p>\rDefault value is <code>5</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>maxValue</code>",
        "name": "iMaxValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMaxValue",
    "longname": "sap.m.RatingIndicator#setMaxValue",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setMaxValue"
  },
  {
    "description": "Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-{maxValue} and if it is a valid number",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the rating value to be set",
        "name": "fValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        },
        "description": "an instance of the rating control for chaining"
      }
    ],
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "name": "setValue",
    "longname": "sap.m.RatingIndicator#setValue",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setValue"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.RatingIndicator#setVisible",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>visualMode</code>.\r</p><p>\rDefault value is <code>Half</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicatorVisualMode"
          ]
        },
        "description": "new value for property <code>visualMode</code>",
        "name": "oVisualMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisualMode",
    "longname": "sap.m.RatingIndicator#setVisualMode",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.setVisualMode"
  },
  {
    "description": "Unbinder for property <code>value</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.RatingIndicator"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindValue",
    "longname": "sap.m.RatingIndicator#unbindValue",
    "kind": "function",
    "memberof": "sap.m.RatingIndicator",
    "scope": "instance",
    "codeName": "sap.m.RatingIndicator.prototype.unbindValue"
  },
  {
    "description": "Constructor for a new ResponsivePopover.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>\r<li>{@link #getShowHeader showHeader} : boolean (default: true)</li>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getModal modal} : boolean</li>\r<li>{@link #getOffsetX offsetX} : int</li>\r<li>{@link #getOffsetY offsetY} : int</li>\r<li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>\r<li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>\r<li>{@link #getHorizontalScrolling horizontalScrolling} : boolean</li>\r<li>{@link #getVerticalScrolling verticalScrolling} : boolean</li>\r<li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li>\r<li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>\r<li>{@link #getSubHeader subHeader} : sap.m.Bar</li>\r<li>{@link #getBeginButton beginButton} : sap.m.Button</li>\r<li>{@link #getEndButton endButton} : sap.m.Button</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ResponsivePopover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ResponsivePopover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ResponsivePopover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ResponsivePopover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "This control acts responsively to the type of device. It acts as a sap.m.Popover on desktop and tablet while acts as a sap.m.Dialog with stretch set to true on phone.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.15.1",
    "name": "ResponsivePopover",
    "longname": "sap.m.ResponsivePopover",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ResponsivePopover"
  },
  {
    "description": "Event is fired after popover or dialog is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.",
        "name": "oControlEvent.getParameters.openBy"
      },
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.",
        "name": "oControlEvent.getParameters.origin"
      }
    ],
    "name": "afterClose",
    "longname": "sap.m.ResponsivePopover#event:afterClose",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.afterClose"
  },
  {
    "description": "Event is fired after popover or dialog is open.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.",
        "name": "oControlEvent.getParameters.openBy"
      }
    ],
    "name": "afterOpen",
    "longname": "sap.m.ResponsivePopover#event:afterOpen",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.afterOpen"
  },
  {
    "description": "Event is fired before popover or dialog is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.",
        "name": "oControlEvent.getParameters.openBy"
      },
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.",
        "name": "oControlEvent.getParameters.origin"
      }
    ],
    "name": "beforeClose",
    "longname": "sap.m.ResponsivePopover#event:beforeClose",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.beforeClose"
  },
  {
    "description": "Event is fired before popover or dialog is open.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.",
        "name": "oControlEvent.getParameters.openBy"
      }
    ],
    "name": "beforeOpen",
    "longname": "sap.m.ResponsivePopover#event:beforeOpen",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.beforeOpen"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.ResponsivePopover#addContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.addContent"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. \r</p><p>\rEvent is fired after popover or dialog is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterClose",
    "longname": "sap.m.ResponsivePopover#attachAfterClose",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.attachAfterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. \r</p><p>\rEvent is fired after popover or dialog is open.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterOpen",
    "longname": "sap.m.ResponsivePopover#attachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.attachAfterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. \r</p><p>\rEvent is fired before popover or dialog is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeClose",
    "longname": "sap.m.ResponsivePopover#attachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.attachBeforeClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ResponsivePopover</code>.<br/> itself. \r</p><p>\rEvent is fired before popover or dialog is open.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeOpen",
    "longname": "sap.m.ResponsivePopover#attachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.attachBeforeOpen"
  },
  {
    "description": "Closes the ResponsivePopover.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "close",
    "longname": "sap.m.ResponsivePopover#close",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.close"
  },
  {
    "description": "Destroys the beginButton in the aggregation \rnamed <code>beginButton</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyBeginButton",
    "longname": "sap.m.ResponsivePopover#destroyBeginButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.destroyBeginButton"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.ResponsivePopover#destroyContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.destroyContent"
  },
  {
    "description": "Destroys the customHeader in the aggregation \rnamed <code>customHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyCustomHeader",
    "longname": "sap.m.ResponsivePopover#destroyCustomHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.destroyCustomHeader"
  },
  {
    "description": "Destroys the endButton in the aggregation \rnamed <code>endButton</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyEndButton",
    "longname": "sap.m.ResponsivePopover#destroyEndButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.destroyEndButton"
  },
  {
    "description": "Destroys the subHeader in the aggregation \rnamed <code>subHeader</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySubHeader",
    "longname": "sap.m.ResponsivePopover#destroySubHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.destroySubHeader"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterClose",
    "longname": "sap.m.ResponsivePopover#detachAfterClose",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.detachAfterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterOpen",
    "longname": "sap.m.ResponsivePopover#detachAfterOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.detachAfterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ResponsivePopover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeClose",
    "longname": "sap.m.ResponsivePopover#detachBeforeClose",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.detachBeforeClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ResponsivePopover</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeOpen",
    "longname": "sap.m.ResponsivePopover#detachBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.detachBeforeOpen"
  },
  {
    "description": "Creates a new subclass of class sap.m.ResponsivePopover with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ResponsivePopover.extend",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "codeName": "sap.m.ResponsivePopover.extend"
  },
  {
    "description": "Fire event afterClose to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> \r\t\t\t\t\t\tThis parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.\r\t\t\t\t\t</li>\r<li>'origin' of type <code>sap.m.Button</code> \r\t\t\t\t\t\tThis parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.\r\t\t\t\t\t</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterClose",
    "longname": "sap.m.ResponsivePopover#fireAfterClose",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.fireAfterClose"
  },
  {
    "description": "Fire event afterOpen to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> \r\t\t\t\t\t\tThis parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.\r\t\t\t\t\t</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterOpen",
    "longname": "sap.m.ResponsivePopover#fireAfterOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.fireAfterOpen"
  },
  {
    "description": "Fire event beforeClose to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> \r\t\t\t\t\t\tThis parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.\r\t\t\t\t\t</li>\r<li>'origin' of type <code>sap.m.Button</code> \r\t\t\t\t\t\tThis parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.\r\t\t\t\t\t</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeClose",
    "longname": "sap.m.ResponsivePopover#fireBeforeClose",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.fireBeforeClose"
  },
  {
    "description": "Fire event beforeOpen to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'openBy' of type <code>sap.ui.core.Control</code> \r\t\t\t\t\t\tThis parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.\r\t\t\t\t\t</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeOpen",
    "longname": "sap.m.ResponsivePopover#fireBeforeOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.fireBeforeOpen"
  },
  {
    "description": "Getter for aggregation <code>beginButton</code>.<br/>\rBeginButton is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#leftButton sap.m.Popover} and {@linkcode sap.m.Dialog#beginButton sap.m.Dialog}",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        }
      }
    ],
    "name": "getBeginButton",
    "longname": "sap.m.ResponsivePopover#getBeginButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getBeginButton"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rContent is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#content sap.m.Popover} and {@linkcode sap.m.Dialog#content sap.m.Dialog}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.ResponsivePopover#getContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getContent"
  },
  {
    "description": "Getter for property <code>contentHeight</code>.\rThis property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentHeight sap.m.Popover} and {@linkcode sap.m.Dialog#contentHeight sap.m.Dialog}\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>contentHeight</code>"
      }
    ],
    "name": "getContentHeight",
    "longname": "sap.m.ResponsivePopover#getContentHeight",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getContentHeight"
  },
  {
    "description": "Getter for property <code>contentWidth</code>.\rThis property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#contentWidth sap.m.Popover} and {@linkcode sap.m.Dialog#contentWidth sap.m.Dialog}\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>contentWidth</code>"
      }
    ],
    "name": "getContentWidth",
    "longname": "sap.m.ResponsivePopover#getContentWidth",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getContentWidth"
  },
  {
    "description": "Getter for aggregation <code>customHeader</code>.<br/>\rCustomHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#customHeader sap.m.Popover} and {@linkcode sap.m.Dialog#customHeader sap.m.Dialog}",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "name": "getCustomHeader",
    "longname": "sap.m.ResponsivePopover#getCustomHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getCustomHeader"
  },
  {
    "description": "Getter for aggregation <code>endButton</code>.<br/>\rEndButton is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#rightButton sap.m.Popover} and {@linkcode sap.m.Dialog#endButton sap.m.Dialog}",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        }
      }
    ],
    "name": "getEndButton",
    "longname": "sap.m.ResponsivePopover#getEndButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getEndButton"
  },
  {
    "description": "Getter for property <code>horizontalScrolling</code>.\rThis property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#horizontalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#horizontalScrolling sap.m.Dialog}\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>horizontalScrolling</code>"
      }
    ],
    "name": "getHorizontalScrolling",
    "longname": "sap.m.ResponsivePopover#getHorizontalScrolling",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getHorizontalScrolling"
  },
  {
    "description": "Getter for property <code>icon</code>.\rThis property only takes effect when runs on phone. Please see the documentation {@linkcode sap.m.Dialog#icon here}.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.ResponsivePopover#getIcon",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getIcon"
  },
  {
    "description": "InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialFocus</code> association, or null"
      }
    ],
    "name": "getInitialFocus",
    "longname": "sap.m.ResponsivePopover#getInitialFocus",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getInitialFocus"
  },
  {
    "description": "Getter for property <code>modal</code>.\rThis property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#modal here}.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>modal</code>"
      }
    ],
    "name": "getModal",
    "longname": "sap.m.ResponsivePopover#getModal",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getModal"
  },
  {
    "description": "Getter for property <code>offsetX</code>.\rThis property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetX here}.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>offsetX</code>"
      }
    ],
    "name": "getOffsetX",
    "longname": "sap.m.ResponsivePopover#getOffsetX",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getOffsetX"
  },
  {
    "description": "Getter for property <code>offsetY</code>.\rThis property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#offsetY here}.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>offsetY</code>"
      }
    ],
    "name": "getOffsetY",
    "longname": "sap.m.ResponsivePopover#getOffsetY",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getOffsetY"
  },
  {
    "description": "Getter for property <code>placement</code>.\rThis property only takes effect when runs on desktop or tablet. Please see the documentation {@linkcode sap.m.Popover#placement here}.\r</p><p>\rDefault value is <code>Right</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.PlacementType"
          ]
        },
        "description": "the value of property <code>placement</code>"
      }
    ],
    "name": "getPlacement",
    "longname": "sap.m.ResponsivePopover#getPlacement",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getPlacement"
  },
  {
    "description": "Getter for property <code>showCloseButton</code>.\rWhether a close button should be inserted to the dialog's header dynamically to close the dialog. This property only takes effect when runs on the phone.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showCloseButton</code>"
      }
    ],
    "name": "getShowCloseButton",
    "longname": "sap.m.ResponsivePopover#getShowCloseButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getShowCloseButton"
  },
  {
    "description": "Getter for property <code>showHeader</code>.\rThis property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#showHeader sap.m.Popover} and {@linkcode sap.m.Dialog#showHeader sap.m.Dialog}\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showHeader</code>"
      }
    ],
    "name": "getShowHeader",
    "longname": "sap.m.ResponsivePopover#getShowHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getShowHeader"
  },
  {
    "description": "Getter for aggregation <code>subHeader</code>.<br/>\rSubHeader is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#subHeader sap.m.Popover} and {@linkcode sap.m.Dialog#subHeader sap.m.Dialog}",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        }
      }
    ],
    "name": "getSubHeader",
    "longname": "sap.m.ResponsivePopover#getSubHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getSubHeader"
  },
  {
    "description": "Getter for property <code>title</code>.\rThis property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#title sap.m.Popover} and {@linkcode sap.m.Dialog#title sap.m.Dialog}\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.ResponsivePopover#getTitle",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>verticalScrolling</code>.\rThis property is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#verticalScrolling sap.m.Popover} and {@linkcode sap.m.Dialog#verticalScrolling sap.m.Dialog}\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>verticalScrolling</code>"
      }
    ],
    "name": "getVerticalScrolling",
    "longname": "sap.m.ResponsivePopover#getVerticalScrolling",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.getVerticalScrolling"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.ResponsivePopover#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.ResponsivePopover#insertContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.insertContent"
  },
  {
    "description": "Checks whether the ResponsivePopover is currently open.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "isOpen",
    "longname": "sap.m.ResponsivePopover#isOpen",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.isOpen"
  },
  {
    "description": "Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter when runs on tablet or desktop and is full screen when runs on phone. Therefore the control parameter only has its usage when runs on tablet or desktop and is ignored when runs on phone.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "</p><p>\rWhen this control runs on tablet or desktop, the ResponsivePopover is positioned relatively to this control.",
        "name": "oControl"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "openBy",
    "longname": "sap.m.ResponsivePopover#openBy",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.openBy"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.ResponsivePopover#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.ResponsivePopover#removeContent",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.removeContent"
  },
  {
    "description": "Setter for the aggregated <code>beginButton</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "name": "oBeginButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setBeginButton",
    "longname": "sap.m.ResponsivePopover#setBeginButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setBeginButton"
  },
  {
    "description": "Setter for property <code>contentHeight</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>contentHeight</code>",
        "name": "sContentHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setContentHeight",
    "longname": "sap.m.ResponsivePopover#setContentHeight",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setContentHeight"
  },
  {
    "description": "Setter for property <code>contentWidth</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>contentWidth</code>",
        "name": "sContentWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setContentWidth",
    "longname": "sap.m.ResponsivePopover#setContentWidth",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setContentWidth"
  },
  {
    "description": "Setter for the aggregated <code>customHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oCustomHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomHeader",
    "longname": "sap.m.ResponsivePopover#setCustomHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setCustomHeader"
  },
  {
    "description": "Setter for the aggregated <code>endButton</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "name": "oEndButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEndButton",
    "longname": "sap.m.ResponsivePopover#setEndButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setEndButton"
  },
  {
    "description": "Setter for property <code>horizontalScrolling</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>horizontalScrolling</code>",
        "name": "bHorizontalScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHorizontalScrolling",
    "longname": "sap.m.ResponsivePopover#setHorizontalScrolling",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setHorizontalScrolling"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.ResponsivePopover#setIcon",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setIcon"
  },
  {
    "description": "InitialFocus is supported by both variants. Please see the documentation on {@linkcode sap.m.Popover#initialFocus sap.m.Popover} and {@linkcode sap.m.Dialog#initialFocus sap.m.Dialog}",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialFocus</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialFocus"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInitialFocus",
    "longname": "sap.m.ResponsivePopover#setInitialFocus",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setInitialFocus"
  },
  {
    "description": "Setter for property <code>modal</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>modal</code>",
        "name": "bModal"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setModal",
    "longname": "sap.m.ResponsivePopover#setModal",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setModal"
  },
  {
    "description": "Setter for property <code>offsetX</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>offsetX</code>",
        "name": "iOffsetX"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setOffsetX",
    "longname": "sap.m.ResponsivePopover#setOffsetX",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setOffsetX"
  },
  {
    "description": "Setter for property <code>offsetY</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>offsetY</code>",
        "name": "iOffsetY"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setOffsetY",
    "longname": "sap.m.ResponsivePopover#setOffsetY",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setOffsetY"
  },
  {
    "description": "Setter for property <code>placement</code>.\r</p><p>\rDefault value is <code>Right</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.PlacementType"
          ]
        },
        "description": "new value for property <code>placement</code>",
        "name": "oPlacement"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlacement",
    "longname": "sap.m.ResponsivePopover#setPlacement",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setPlacement"
  },
  {
    "description": "Setter for property <code>showCloseButton</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showCloseButton</code>",
        "name": "bShowCloseButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowCloseButton",
    "longname": "sap.m.ResponsivePopover#setShowCloseButton",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setShowCloseButton"
  },
  {
    "description": "Setter for property <code>showHeader</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showHeader</code>",
        "name": "bShowHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowHeader",
    "longname": "sap.m.ResponsivePopover#setShowHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setShowHeader"
  },
  {
    "description": "Setter for the aggregated <code>subHeader</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Bar"
          ]
        },
        "name": "oSubHeader"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSubHeader",
    "longname": "sap.m.ResponsivePopover#setSubHeader",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setSubHeader"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.ResponsivePopover#setTitle",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>verticalScrolling</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>verticalScrolling</code>",
        "name": "bVerticalScrolling"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ResponsivePopover"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVerticalScrolling",
    "longname": "sap.m.ResponsivePopover#setVerticalScrolling",
    "kind": "function",
    "memberof": "sap.m.ResponsivePopover",
    "scope": "instance",
    "codeName": "sap.m.ResponsivePopover.prototype.setVerticalScrolling"
  },
  {
    "description": "Constructor for a new ScrollContainer.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li>\r<li>{@link #getHorizontal horizontal} : boolean (default: true)</li>\r<li>{@link #getVertical vertical} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.\r</p><p>\rNote that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "ScrollContainer",
    "longname": "sap.m.ScrollContainer",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ScrollContainer"
  },
  {
    "description": "Adds some content <code>oContent</code> \rto the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to add; if empty, nothing is inserted",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addContent",
    "longname": "sap.m.ScrollContainer#addContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.addContent"
  },
  {
    "description": "Destroys all the content in the aggregation \rnamed <code>content</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyContent",
    "longname": "sap.m.ScrollContainer#destroyContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.destroyContent"
  },
  {
    "description": "Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ScrollContainer.extend",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "codeName": "sap.m.ScrollContainer.extend"
  },
  {
    "description": "Getter for aggregation <code>content</code>.<br/>\rThe content of the ScrollContainer.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getContent",
    "longname": "sap.m.ScrollContainer#getContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.getContent"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the ScrollContainer.\rBy default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.\r</p><p>\rNote that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.ScrollContainer#getHeight",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.getHeight"
  },
  {
    "description": "Getter for property <code>horizontal</code>.\rWhether horizontal scrolling should be possible.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>horizontal</code>"
      }
    ],
    "name": "getHorizontal",
    "longname": "sap.m.ScrollContainer#getHorizontal",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.getHorizontal"
  },
  {
    "description": "Getter for property <code>vertical</code>.\rWhether vertical scrolling should be possible.\r</p><p>\rNote that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to \"true\".\rImportant: it is not supported to have nested controls that both enable scrolling into the same dimension.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>vertical</code>"
      }
    ],
    "name": "getVertical",
    "longname": "sap.m.ScrollContainer#getVertical",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.getVertical"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible scroll containers are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ScrollContainer#getVisible",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the ScrollContainer.\rIf not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.ScrollContainer#getWidth",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content whose index is looked for.",
        "name": "oContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfContent",
    "longname": "sap.m.ScrollContainer#indexOfContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.indexOfContent"
  },
  {
    "description": "Inserts a content into the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to insert; if empty, nothing is inserted",
        "name": "oContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the content should be inserted at; for \r            a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value \r            greater than the current size of the aggregation, the content is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertContent",
    "longname": "sap.m.ScrollContainer#insertContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.insertContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>content</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllContent",
    "longname": "sap.m.ScrollContainer#removeAllContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.removeAllContent"
  },
  {
    "description": "Removes an content from the aggregation named <code>content</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the content to remove or its index or id",
        "name": "vContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed content or null"
      }
    ],
    "name": "removeContent",
    "longname": "sap.m.ScrollContainer#removeContent",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.removeContent"
  },
  {
    "description": "Scrolls to the given position.\rWhen called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The horizontal pixel position to scroll to.\rScrolling to the right happens with positive values.\rIf only vertical scrolling is enabled, give 0 as value.",
        "name": "iX"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The vertical pixel position to scroll to.\rScrolling down happens with positive values.\rIf only horizontal scrolling is enabled, give 0 as value.",
        "name": "iY"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The duration of animated scrolling.\rTo scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.",
        "name": "iTime"
      }
    ],
    "type": {
      "names": [
        "sap.m.ScrollContainer"
      ]
    },
    "name": "scrollTo",
    "longname": "sap.m.ScrollContainer#scrollTo",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.scrollTo"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.ScrollContainer#setHeight",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>horizontal</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>horizontal</code>",
        "name": "bHorizontal"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHorizontal",
    "longname": "sap.m.ScrollContainer#setHorizontal",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.setHorizontal"
  },
  {
    "description": "Setter for property <code>vertical</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>vertical</code>",
        "name": "bVertical"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVertical",
    "longname": "sap.m.ScrollContainer#setVertical",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.setVertical"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ScrollContainer#setVisible",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ScrollContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.ScrollContainer#setWidth",
    "kind": "function",
    "memberof": "sap.m.ScrollContainer",
    "scope": "instance",
    "codeName": "sap.m.ScrollContainer.prototype.setWidth"
  },
  {
    "description": "Constructor for a new SearchField.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getValue value} : string</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getMaxLength maxLength} : int (default: 0)</li>\r<li>{@link #getPlaceholder placeholder} : string</li>\r<li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li>\r<li>{@link #getShowRefreshButton showRefreshButton} : boolean (default: false)</li>\r<li>{@link #getRefreshButtonTooltip refreshButtonTooltip} : string</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.SearchField#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SearchField#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Enables users to input a search string.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "SearchField",
    "longname": "sap.m.SearchField",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.SearchField"
  },
  {
    "description": "This event is fired when the value of the search field is changed by a user - e.g. at each key press.",
    "kind": "event",
    "since": "1.9.1",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Current search string.",
        "name": "oControlEvent.getParameters.newValue"
      }
    ],
    "name": "liveChange",
    "longname": "sap.m.SearchField#event:liveChange",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.liveChange"
  },
  {
    "description": "Event which is fired when the user triggers a search.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The search query string.",
        "name": "oControlEvent.getParameters.query"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates if the user pressed the refresh button.",
        "name": "oControlEvent.getParameters.refreshButtonPressed"
      }
    ],
    "name": "search",
    "longname": "sap.m.SearchField#event:search",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.search"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SearchField</code>.<br/> itself. \r</p><p>\rThis event is fired when the value of the search field is changed by a user - e.g. at each key press.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "attachLiveChange",
    "longname": "sap.m.SearchField#attachLiveChange",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.attachLiveChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SearchField</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SearchField</code>.<br/> itself. \r</p><p>\rEvent which is fired when the user triggers a search.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSearch",
    "longname": "sap.m.SearchField#attachSearch",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.attachSearch"
  },
  {
    "description": "Binder for property <code>value</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindValue",
    "longname": "sap.m.SearchField#bindValue",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.bindValue"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "detachLiveChange",
    "longname": "sap.m.SearchField#detachLiveChange",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.detachLiveChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SearchField</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSearch",
    "longname": "sap.m.SearchField#detachSearch",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.detachSearch"
  },
  {
    "description": "Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.SearchField.extend",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "codeName": "sap.m.SearchField.extend"
  },
  {
    "description": "Fire event liveChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'newValue' of type <code>string</code> Current search string.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "since": "1.9.1",
    "name": "fireLiveChange",
    "longname": "sap.m.SearchField#fireLiveChange",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.fireLiveChange"
  },
  {
    "description": "Fire event search to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'query' of type <code>string</code> The search query string.</li>\r<li>'refreshButtonPressed' of type <code>boolean</code> Indicates if the user pressed the refresh button.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSearch",
    "longname": "sap.m.SearchField#fireSearch",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.fireSearch"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the control (default is true).\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.SearchField#getEnabled",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>maxLength</code>.\rMaximum number of characters. Value '0' means the feature is switched off.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>maxLength</code>"
      }
    ],
    "name": "getMaxLength",
    "longname": "sap.m.SearchField#getMaxLength",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getMaxLength"
  },
  {
    "description": "Getter for property <code>placeholder</code>.\rText shown when no value available.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>placeholder</code>"
      }
    ],
    "name": "getPlaceholder",
    "longname": "sap.m.SearchField#getPlaceholder",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getPlaceholder"
  },
  {
    "description": "Getter for property <code>refreshButtonTooltip</code>.\rTooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>refreshButtonTooltip</code>"
      }
    ],
    "since": "1.16",
    "name": "getRefreshButtonTooltip",
    "longname": "sap.m.SearchField#getRefreshButtonTooltip",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getRefreshButtonTooltip"
  },
  {
    "description": "Getter for property <code>showMagnifier</code>.\rSet to false to hide the magnifier icon. This property is deprecated since version 1.16.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showMagnifier</code>"
      }
    ],
    "name": "getShowMagnifier",
    "longname": "sap.m.SearchField#getShowMagnifier",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getShowMagnifier"
  },
  {
    "description": "Getter for property <code>showRefreshButton</code>.\rSet to true to display a \"refresh\" button. By pressing the refresh button, the user can reload the results list without changing the search string. This is a visual clue only: a normal search event is fired when a user presses on a refresh button.\rThis property is ignored in the sap_mvi theme.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showRefreshButton</code>"
      }
    ],
    "since": "1.16",
    "name": "getShowRefreshButton",
    "longname": "sap.m.SearchField#getShowRefreshButton",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getShowRefreshButton"
  },
  {
    "description": "Getter for property <code>value</code>.\rInput Value.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.SearchField#getValue",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getValue"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible inputs are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.SearchField#getVisible",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the input.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.SearchField#getWidth",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.SearchField#setEnabled",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>maxLength</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>maxLength</code>",
        "name": "iMaxLength"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMaxLength",
    "longname": "sap.m.SearchField#setMaxLength",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setMaxLength"
  },
  {
    "description": "Setter for property <code>placeholder</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>placeholder</code>",
        "name": "sPlaceholder"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlaceholder",
    "longname": "sap.m.SearchField#setPlaceholder",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setPlaceholder"
  },
  {
    "description": "Setter for property <code>refreshButtonTooltip</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>refreshButtonTooltip</code>",
        "name": "sRefreshButtonTooltip"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setRefreshButtonTooltip",
    "longname": "sap.m.SearchField#setRefreshButtonTooltip",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setRefreshButtonTooltip"
  },
  {
    "description": "Setter for property <code>showMagnifier</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showMagnifier</code>",
        "name": "bShowMagnifier"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowMagnifier",
    "longname": "sap.m.SearchField#setShowMagnifier",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setShowMagnifier"
  },
  {
    "description": "Setter for property <code>showRefreshButton</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showRefreshButton</code>",
        "name": "bShowRefreshButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setShowRefreshButton",
    "longname": "sap.m.SearchField#setShowRefreshButton",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setShowRefreshButton"
  },
  {
    "description": "Setter for property <code>value</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>value</code>",
        "name": "sValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValue",
    "longname": "sap.m.SearchField#setValue",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setValue"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.SearchField#setVisible",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.SearchField#setWidth",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.setWidth"
  },
  {
    "description": "Unbinder for property <code>value</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SearchField"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindValue",
    "longname": "sap.m.SearchField#unbindValue",
    "kind": "function",
    "memberof": "sap.m.SearchField",
    "scope": "instance",
    "codeName": "sap.m.SearchField.prototype.unbindValue"
  },
  {
    "description": "Constructor for a new SegmentedButton.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getSelectedButton selectedButton} : string | sap.m.Button</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.SegmentedButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "SegmentedButton",
    "longname": "sap.m.SegmentedButton",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.SegmentedButton"
  },
  {
    "description": "Event is fired when the user selects a button, which returns the id and button object",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "Reference to the button that has just been selected",
        "name": "oControlEvent.getParameters.button"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the button which has just been selected",
        "name": "oControlEvent.getParameters.id"
      }
    ],
    "name": "select",
    "longname": "sap.m.SegmentedButton#event:select",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.select"
  },
  {
    "description": "Adds some button <code>oButton</code> \rto the aggregation named <code>buttons</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the button to add; if empty, nothing is inserted",
        "name": "oButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addButton",
    "longname": "sap.m.SegmentedButton#addButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.addButton"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SegmentedButton</code>.<br/> itself. \r</p><p>\rEvent is fired when the user selects a button, which returns the id and button object",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.SegmentedButton#attachSelect",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.attachSelect"
  },
  {
    "description": "Convenient method to add a button with a text as title or an uri for an icon. \rOnly one is allowed.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core/string"
          ]
        },
        "description": "defines the title text of the newly created button",
        "name": "sText"
      },
      {
        "type": {
          "names": [
            "sap.ui.core/URI"
          ]
        },
        "description": "defines the icon uri of the button",
        "name": "sURI"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "sets the enabled status of the button",
        "name": "bEnabled"
      }
    ],
    "returns": [
      null
    ],
    "type": {
      "names": [
        "sap.m.Button"
      ]
    },
    "name": "createButton",
    "longname": "sap.m.SegmentedButton#createButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.createButton"
  },
  {
    "description": "Destroys all the buttons in the aggregation \rnamed <code>buttons</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyButtons",
    "longname": "sap.m.SegmentedButton#destroyButtons",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.destroyButtons"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.SegmentedButton#detachSelect",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.detachSelect"
  },
  {
    "description": "Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.SegmentedButton.extend",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "codeName": "sap.m.SegmentedButton.extend"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'button' of type <code>sap.m.Button</code> Reference to the button that has just been selected</li>\r<li>'id' of type <code>string</code> Id of the button which has just been selected</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.SegmentedButton#fireSelect",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.fireSelect"
  },
  {
    "description": "Getter for aggregation <code>buttons</code>.<br/>\rButtons of the SegmentedButton control",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Button>"
          ]
        }
      }
    ],
    "name": "getButtons",
    "longname": "sap.m.SegmentedButton#getButtons",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.getButtons"
  },
  {
    "description": "Pointer to the selected button of a SegmentedButton control.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>selectedButton</code> association, or null"
      }
    ],
    "name": "getSelectedButton",
    "longname": "sap.m.SegmentedButton#getSelectedButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.getSelectedButton"
  },
  {
    "description": "Getter for property <code>visible</code>.\rboolean property to make the control visible or invisible\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.SegmentedButton#getVisible",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rSet the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).\r</p><p>\r</p><p>\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.SegmentedButton#getWidth",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the button whose index is looked for.",
        "name": "oButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfButton",
    "longname": "sap.m.SegmentedButton#indexOfButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.indexOfButton"
  },
  {
    "description": "Inserts a button into the aggregation named <code>buttons</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the button to insert; if empty, nothing is inserted",
        "name": "oButton"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the button should be inserted at; for \r            a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value \r            greater than the current size of the aggregation, the button is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertButton",
    "longname": "sap.m.SegmentedButton#insertButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.insertButton"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>buttons</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Button>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllButtons",
    "longname": "sap.m.SegmentedButton#removeAllButtons",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.removeAllButtons"
  },
  {
    "description": "Removes an button from the aggregation named <code>buttons</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.Button"
          ]
        },
        "description": "the button to remove or its index or id",
        "name": "vButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Button"
          ]
        },
        "description": "the removed button or null"
      }
    ],
    "name": "removeButton",
    "longname": "sap.m.SegmentedButton#removeButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.removeButton"
  },
  {
    "description": "Pointer to the selected button of a SegmentedButton control.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.m.Button"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>selectedButton</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vSelectedButton"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelectedButton",
    "longname": "sap.m.SegmentedButton#setSelectedButton",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.setSelectedButton"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.SegmentedButton#setVisible",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SegmentedButton"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.SegmentedButton#setWidth",
    "kind": "function",
    "memberof": "sap.m.SegmentedButton",
    "scope": "instance",
    "codeName": "sap.m.SegmentedButton.prototype.setWidth"
  },
  {
    "description": "Constructor for a new Select.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getName name} : string</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>\r<li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getSelectedKey selectedKey} : string</li>\r<li>{@link #getSelectedItemId selectedItemId} : string</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getType type} : sap.m.SelectType (default: sap.m.SelectType.Default)</li>\r<li>{@link #getAutoAdjustWidth autoAdjustWidth} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.ui.core.Item[]</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getSelectedItem selectedItem} : string | sap.ui.core.Item</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Select#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The select control provides a list of predefined items that allows end users to choose options.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Select",
    "longname": "sap.m.Select",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Select"
  },
  {
    "description": "This hook method is reserved for derived classes.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Dialog",
            "sap.m.Popover"
          ]
        },
        "name": "oPopup"
      }
    ],
    "access": "protected",
    "name": "addBottomContent",
    "longname": "sap.m.Select#addBottomContent",
    "kind": "member",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.addBottomContent"
  },
  {
    "description": "This event will be triggered when the user changes the selected item.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Item"
          ]
        },
        "description": "The selected item.",
        "name": "oControlEvent.getParameters.selectedItem"
      }
    ],
    "name": "change",
    "longname": "sap.m.Select#event:change",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.change"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Item"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.Select#addItem",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Select</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Select</code>.<br/> itself. \r</p><p>\rThis event will be triggered when the user changes the selected item.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Select</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.Select#attachChange",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.attachChange"
  },
  {
    "description": "Binder for aggregation <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindItems",
    "longname": "sap.m.Select#bindItems",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.bindItems"
  },
  {
    "description": "Closes the select.",
    "type": {
      "names": [
        "void"
      ]
    },
    "since": "1.16",
    "name": "close",
    "longname": "sap.m.Select#close",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.close"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.Select#destroyItems",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.destroyItems"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Select</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.Select#detachChange",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.detachChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.Select with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Select.extend",
    "kind": "function",
    "memberof": "sap.m.Select",
    "codeName": "sap.m.Select.extend"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'selectedItem' of type <code>sap.ui.core.Item</code> The selected item.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.Select#fireChange",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.fireChange"
  },
  {
    "description": "Getter for property <code>autoAdjustWidth</code>.\rIf set to true, the width of the select input is determined by the selected item’s content.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>autoAdjustWidth</code>"
      }
    ],
    "since": "1.16",
    "name": "getAutoAdjustWidth",
    "longname": "sap.m.Select#getAutoAdjustWidth",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getAutoAdjustWidth"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rDetermines whether the user can change the selected value.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.Select#getEnabled",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>icon</code>.\rThe URI to the icon that will be displayed only when using the “IconOnly” type.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "since": "1.16",
    "name": "getIcon",
    "longname": "sap.m.Select#getIcon",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getIcon"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rItems of the Item control.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Item>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.Select#getItems",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getItems"
  },
  {
    "description": "Getter for property <code>maxWidth</code>.\rDefines the maximum width of the select input. This value can be provided in %, em, px… and all valid CSS measures.\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>maxWidth</code>"
      }
    ],
    "name": "getMaxWidth",
    "longname": "sap.m.Select#getMaxWidth",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getMaxWidth"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.Select#getName",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getName"
  },
  {
    "description": "Getter for the pop-up.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Dialog",
            "sap.m.Popover"
          ]
        }
      }
    ],
    "access": "protected",
    "name": "getPopup",
    "longname": "sap.m.Select#getPopup",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getPopup"
  },
  {
    "description": "The selected item.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>selectedItem</code> association, or null"
      }
    ],
    "name": "getSelectedItem",
    "longname": "sap.m.Select#getSelectedItem",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getSelectedItem"
  },
  {
    "description": "Getter for property <code>selectedItemId</code>.\rId of the selected item. If the id has no corresponding aggregated item, no changes will apply.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>selectedItemId</code>"
      }
    ],
    "since": "1.12",
    "name": "getSelectedItemId",
    "longname": "sap.m.Select#getSelectedItemId",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getSelectedItemId"
  },
  {
    "description": "Getter for property <code>selectedKey</code>.\rKey of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the first item matching the key is used.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>selectedKey</code>"
      }
    ],
    "since": "1.11",
    "name": "getSelectedKey",
    "longname": "sap.m.Select#getSelectedKey",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getSelectedKey"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe text to be displayed as tooltip and as title of the Select popup on iPad (MVI Theme). This overrides the value of the \"tooltip\" property. If only the \"tooltop\" property is set, the Select popup on iPad (MVI Theme) will not have a title.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.Select#getTitle",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of a select. Possibles values \"Default\", \"IconOnly\".\r</p><p>\rDefault value is <code>Default</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "since": "1.16",
    "name": "getType",
    "longname": "sap.m.Select#getType",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rDetermines whether the control is visible or not.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Select#getVisible",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the select input. The default width of a select control depends on the width of the widest option/item in the list. This value can be provided in %, em, px… and all possible CSS measures.\rNote: The width will be ignored if the \"autoAdjustWidth\" property is set to true.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Select#getWidth",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.getWidth"
  },
  {
    "description": "Determines whether the select has content or not.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "access": "protected",
    "name": "hasContent",
    "longname": "sap.m.Select#hasContent",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.hasContent"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Item"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.Select#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Item"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.Select#insertItem",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.insertItem"
  },
  {
    "description": "The method checks if the select is open. It returns true when the select is currently open (this includes opening and closing animations), otherwise it returns false.",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "since": "1.16",
    "name": "isOpen",
    "longname": "sap.m.Select#isOpen",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.isOpen"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Item>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.Select#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Item"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Item"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.Select#removeItem",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.removeItem"
  },
  {
    "description": "Setter for property <code>autoAdjustWidth</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>autoAdjustWidth</code>",
        "name": "bAutoAdjustWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setAutoAdjustWidth",
    "longname": "sap.m.Select#setAutoAdjustWidth",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setAutoAdjustWidth"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.Select#setEnabled",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setIcon",
    "longname": "sap.m.Select#setIcon",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>maxWidth</code>.\r</p><p>\rDefault value is <code>100%</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>maxWidth</code>",
        "name": "sMaxWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMaxWidth",
    "longname": "sap.m.Select#setMaxWidth",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setMaxWidth"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.Select#setName",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setName"
  },
  {
    "description": "Setter for the pop-up.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Dialog",
            "sap.m.Popover"
          ]
        },
        "name": "oPopup"
      }
    ],
    "access": "protected",
    "name": "setPopup",
    "longname": "sap.m.Select#setPopup",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setPopup"
  },
  {
    "description": "Setter for association <code>selectedItem</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Item",
            "null"
          ]
        },
        "description": "new value for association <code>selectedItem</code>\r   Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.\r   Alternatively, an sap.ui.core.Item instance may be given.",
        "name": "vSelectedItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelectedItem",
    "longname": "sap.m.Select#setSelectedItem",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setSelectedItem"
  },
  {
    "description": "Setter for property <code>selectedItemId</code>.\r</p><p>\rDefault value is an empty string <code>\"\"</code> or <code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Item",
            "undefined"
          ]
        },
        "description": "new value for property <code>selectedItemId</code>",
        "name": "sSelectedItemId"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12",
    "name": "setSelectedItemId",
    "longname": "sap.m.Select#setSelectedItemId",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setSelectedItemId"
  },
  {
    "description": "Setter for property <code>selectedKey</code>.\r</p><p>\rDefault value is an empty string <code>\"\"</code> or <code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>selectedKey</code>",
        "name": "sSelectedKey"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11",
    "name": "setSelectedKey",
    "longname": "sap.m.Select#setSelectedKey",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setSelectedKey"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.Select#setTitle",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Default</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SelectType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setType",
    "longname": "sap.m.Select#setType",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Select#setVisible",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Select#setWidth",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.setWidth"
  },
  {
    "description": "Unbinder for aggregation <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Select"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindItems",
    "longname": "sap.m.Select#unbindItems",
    "kind": "function",
    "memberof": "sap.m.Select",
    "scope": "instance",
    "codeName": "sap.m.Select.prototype.unbindItems"
  },
  {
    "description": "Constructor for a new SelectDialog.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getNoDataText noDataText} : string</li>\r<li>{@link #getFilterPath filterPath} : string</li>\r<li>{@link #getFilterOperator filterOperator} : string</li>\r<li>{@link #getFilterValue filterValue} : string</li>\r<li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.m.StandardListItem[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.SelectDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A SelectDialog provides you a easier way to create a dialog that contains a list with grouping and search functionality.\rThe list used in a SelectDialog is a growing list with StandardListItem. After selecting an item, the dialog will be closed and a callback function will return the item being selected.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "tags": [
      {
        "originalTitle": "experimental",
        "title": "experimental",
        "text": "Since version 1.15. \rAPI is not yet finished and might change completely",
        "value": "Since version 1.15. \rAPI is not yet finished and might change completely"
      }
    ],
    "name": "SelectDialog",
    "longname": "sap.m.SelectDialog",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.SelectDialog"
  },
  {
    "description": "Set the model for the internal list AND the current control so that \rboth controls can be used with data binding",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.Model"
          ]
        },
        "description": "the model that holds the data for the list",
        "name": "oModel"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the optional model name",
        "name": "sName"
      }
    ],
    "name": "_setModel",
    "longname": "sap.m.SelectDialog#_setModel",
    "kind": "member",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype._setModel"
  },
  {
    "description": "this event will be fired when the dialog is closed. If something has been selected, the item being selected will be returned, else, null will be returned.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "Returns selected list item. When no item is selected, \"null\" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.",
        "name": "oControlEvent.getParameters.selectedItem"
      },
      {
        "type": {
          "names": [
            "Array.<sap.m.StandardListItem>"
          ]
        },
        "description": "Returns an array containing the selected list items. If no items are selected, an empty array is returned.",
        "name": "oControlEvent.getParameters.selectedItems"
      }
    ],
    "name": "close",
    "longname": "sap.m.SelectDialog#event:close",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.close"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.SelectDialog#addItem",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.SelectDialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SelectDialog</code>.<br/> itself. \r</p><p>\rthis event will be fired when the dialog is closed. If something has been selected, the item being selected will be returned, else, null will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachClose",
    "longname": "sap.m.SelectDialog#attachClose",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.attachClose"
  },
  {
    "description": "Forwards aggregations with the name of items to the internal list.\rAdditionally adds a default click handler and the active state to list items \rbecause the list's select event is only fired when a list selection has been done.",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the name for the binding",
        "name": "sName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the configuration parameters for the binding",
        "name": "oBindingInfo"
      }
    ],
    "name": "bindAggregation",
    "longname": "sap.m.SelectDialog#bindAggregation",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.bindAggregation"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.SelectDialog#destroyItems",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.destroyItems"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.SelectDialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachClose",
    "longname": "sap.m.SelectDialog#detachClose",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.detachClose"
  },
  {
    "description": "Creates a new subclass of class sap.m.SelectDialog with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.SelectDialog.extend",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "codeName": "sap.m.SelectDialog.extend"
  },
  {
    "description": "Fire event close to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'selectedItem' of type <code>sap.m.StandardListItem</code> Returns selected list item. When no item is selected, \"null\" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>\r<li>'selectedItems' of type <code>sap.m.StandardListItem[]</code> Returns an array containing the selected list items. If no items are selected, an empty array is returned.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireClose",
    "longname": "sap.m.SelectDialog#fireClose",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.fireClose"
  },
  {
    "description": "Getter for property <code>filterOperator</code>.\rFilter operator for the list search\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>filterOperator</code>"
      }
    ],
    "name": "getFilterOperator",
    "longname": "sap.m.SelectDialog#getFilterOperator",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getFilterOperator"
  },
  {
    "description": "Getter for property <code>filterPath</code>.\rFilter path for the list search\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>filterPath</code>"
      }
    ],
    "name": "getFilterPath",
    "longname": "sap.m.SelectDialog#getFilterPath",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getFilterPath"
  },
  {
    "description": "Getter for property <code>filterValue</code>.\rFilter value for the list search. The list will be automatically pre-filtered for the value if this parameter is set\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>filterValue</code>"
      }
    ],
    "name": "getFilterValue",
    "longname": "sap.m.SelectDialog#getFilterValue",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getFilterValue"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rThe items of the list",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.StandardListItem>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.SelectDialog#getItems",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getItems"
  },
  {
    "description": "Getter for property <code>multiSelect</code>.\rIf on, the user can select several options from the list\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>multiSelect</code>"
      }
    ],
    "name": "getMultiSelect",
    "longname": "sap.m.SelectDialog#getMultiSelect",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getMultiSelect"
  },
  {
    "description": "Getter for property <code>noDataText</code>.\rThis is the text shown when the list has no data\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>noDataText</code>"
      }
    ],
    "name": "getNoDataText",
    "longname": "sap.m.SelectDialog#getNoDataText",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getNoDataText"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe title text appears in the dialog header\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.SelectDialog#getTitle",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.getTitle"
  },
  {
    "description": "Checks for the provided <code>sap.m.StandardListItem</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.SelectDialog#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.SelectDialog#insertItem",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.insertItem"
  },
  {
    "description": "Opens the internal dialog with a searchfield and a list.\rThe list is pre-filtered based on the control settings",
    "name": "open",
    "longname": "sap.m.SelectDialog#open",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.open"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.StandardListItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.SelectDialog#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.StandardListItem"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.SelectDialog#removeItem",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.removeItem"
  },
  {
    "description": "Set the filter operator that is used to filter the list",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.model.FilterOperator"
          ]
        },
        "description": "the filter operator for the search field",
        "name": "sFilterOperator"
      }
    ],
    "name": "setFilterOperator",
    "longname": "sap.m.SelectDialog#setFilterOperator",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.setFilterOperator"
  },
  {
    "description": "Set the filter path that is used to filter the list",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the filter path for the search field",
        "name": "sFilterPath"
      }
    ],
    "name": "setFilterPath",
    "longname": "sap.m.SelectDialog#setFilterPath",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.setFilterPath"
  },
  {
    "description": "Set the filter value that is used to filter the list",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the filter value for the search field",
        "name": "sFilterValue"
      }
    ],
    "name": "setFilterValue",
    "longname": "sap.m.SelectDialog#setFilterValue",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.setFilterValue"
  },
  {
    "description": "Setter for property <code>multiSelect</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>multiSelect</code>",
        "name": "bMultiSelect"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SelectDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMultiSelect",
    "longname": "sap.m.SelectDialog#setMultiSelect",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.setMultiSelect"
  },
  {
    "description": "Set the no data text of the internal list",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the no data text for the list",
        "name": "sNoDataText"
      }
    ],
    "name": "setNoDataText",
    "longname": "sap.m.SelectDialog#setNoDataText",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.setNoDataText"
  },
  {
    "description": "Set the title of the internal dialog",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the title text for the dialog",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.SelectDialog#setTitle",
    "kind": "function",
    "memberof": "sap.m.SelectDialog",
    "scope": "instance",
    "codeName": "sap.m.SelectDialog.prototype.setTitle"
  },
  {
    "description": "Constructor for a new Shell.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getLogo logo} : sap.ui.core.URI</li>\r<li>{@link #getShowLogout showLogout} : boolean (default: true)</li>\r<li>{@link #getHeaderRightText headerRightText} : string</li>\r<li>{@link #getAppWidthLimited appWidthLimited} : boolean (default: true)</li>\r<li>{@link #getBackgroundColor backgroundColor} : string</li>\r<li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>\r<li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>\r<li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>\r<li>{@link #getHomeIcon homeIcon} : object</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getApp app} : sap.ui.core.Control</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Shell#event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The Shell control can be used as root element of applications, it can contain an App or SplitApp control.\rThe Shell provides some overarching functionality for the overall application and takes care of visual adaptation, like a frame around the App, on desktop browser platforms.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "tags": [
      {
        "originalTitle": "experimental",
        "title": "experimental",
        "text": "Since version 1.12. \rThis control is still under discussion so this can be changed in future.",
        "value": "Since version 1.12. \rThis control is still under discussion so this can be changed in future."
      }
    ],
    "name": "Shell",
    "longname": "sap.m.Shell",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Shell"
  },
  {
    "description": "Fired when the user presses the logout button/link.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "logout",
    "longname": "sap.m.Shell#event:logout",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.logout"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.m.Shell</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Shell</code>.<br/> itself. \r</p><p>\rFired when the user presses the logout button/link.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachLogout",
    "longname": "sap.m.Shell#attachLogout",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.attachLogout"
  },
  {
    "description": "Destroys the app in the aggregation \rnamed <code>app</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyApp",
    "longname": "sap.m.Shell#destroyApp",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.destroyApp"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.m.Shell</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachLogout",
    "longname": "sap.m.Shell#detachLogout",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.detachLogout"
  },
  {
    "description": "Creates a new subclass of class sap.m.Shell with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Shell.extend",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "codeName": "sap.m.Shell.extend"
  },
  {
    "description": "Fire event logout to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireLogout",
    "longname": "sap.m.Shell#fireLogout",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.fireLogout"
  },
  {
    "description": "Getter for aggregation <code>app</code>.<br/>\rA Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getApp",
    "longname": "sap.m.Shell#getApp",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getApp"
  },
  {
    "description": "Getter for property <code>appWidthLimited</code>.\rWhether the width of the content (the aggregated app) should be limited or extend to the full screen width.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>appWidthLimited</code>"
      }
    ],
    "name": "getAppWidthLimited",
    "longname": "sap.m.Shell#getAppWidthLimited",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getAppWidthLimited"
  },
  {
    "description": "Getter for property <code>backgroundColor</code>.\rBackground color of the Shell. If set, this color will override the default background defined by the theme. So this should only be set when really required.\rAny configured background image will be placed above this colored background.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>backgroundColor</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundColor",
    "longname": "sap.m.Shell#getBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getBackgroundColor"
  },
  {
    "description": "Getter for property <code>backgroundImage</code>.\rBackground image of the Shell. If set, this image will override the default background defined by the theme. So this should only be set when really required.\rThis background image will be placed above any color set for the background.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>backgroundImage</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundImage",
    "longname": "sap.m.Shell#getBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getBackgroundImage"
  },
  {
    "description": "Getter for property <code>backgroundOpacity</code>.\rOpacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).\rThis can be used to improve readability of the shell content by making the background image partly transparent.\r</p><p>\rDefault value is <code>1</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>backgroundOpacity</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundOpacity",
    "longname": "sap.m.Shell#getBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getBackgroundOpacity"
  },
  {
    "description": "Getter for property <code>backgroundRepeat</code>.\rWhether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>backgroundRepeat</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundRepeat",
    "longname": "sap.m.Shell#getBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getBackgroundRepeat"
  },
  {
    "description": "Getter for property <code>headerRightText</code>.\rA text, like the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all).\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>headerRightText</code>"
      }
    ],
    "name": "getHeaderRightText",
    "longname": "sap.m.Shell#getHeaderRightText",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getHeaderRightText"
  },
  {
    "description": "Getter for property <code>homeIcon</code>.\rSets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.\r</p><p>\rThis property should be only set once and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.\r</p><p>\rDifferent image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).\rThe \"precomposed\" flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:\r{\r'phone':'phone-icon_57x57.png',\r'phone@2':'phone-retina_114x114.png',\r'tablet':'tablet-icon_72x72.png',\r'tablet@2':'tablet-retina_144x144.png',\r'precomposed':true,\r'favicon':'favicon.ico'\r}\r</p><p>\rSee jQuery.sap.setIcons() for full documentation.\r</p><p>\r</p><p>\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the value of property <code>homeIcon</code>"
      }
    ],
    "name": "getHomeIcon",
    "longname": "sap.m.Shell#getHomeIcon",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getHomeIcon"
  },
  {
    "description": "Getter for property <code>logo</code>.\rA logo to be displayed when the screen is sufficiently large.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>logo</code>"
      }
    ],
    "name": "getLogo",
    "longname": "sap.m.Shell#getLogo",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getLogo"
  },
  {
    "description": "Getter for property <code>showLogout</code>.\rWhether the Logout button should be displayed.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showLogout</code>"
      }
    ],
    "name": "getShowLogout",
    "longname": "sap.m.Shell#getShowLogout",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getShowLogout"
  },
  {
    "description": "Getter for property <code>title</code>.\rThe application title which may or may not be displayed outside the actual application, depending on the available screen size.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.Shell#getTitle",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.getTitle"
  },
  {
    "description": "Setter for the aggregated <code>app</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oApp"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setApp",
    "longname": "sap.m.Shell#setApp",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setApp"
  },
  {
    "description": "Setter for property <code>appWidthLimited</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>appWidthLimited</code>",
        "name": "bAppWidthLimited"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAppWidthLimited",
    "longname": "sap.m.Shell#setAppWidthLimited",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setAppWidthLimited"
  },
  {
    "description": "Setter for property <code>backgroundColor</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>backgroundColor</code>",
        "name": "sBackgroundColor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundColor",
    "longname": "sap.m.Shell#setBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setBackgroundColor"
  },
  {
    "description": "Setter for property <code>backgroundImage</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>backgroundImage</code>",
        "name": "sBackgroundImage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundImage",
    "longname": "sap.m.Shell#setBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setBackgroundImage"
  },
  {
    "description": "Setter for property <code>backgroundOpacity</code>.\r</p><p>\rDefault value is <code>1</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>backgroundOpacity</code>",
        "name": "fBackgroundOpacity"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundOpacity",
    "longname": "sap.m.Shell#setBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setBackgroundOpacity"
  },
  {
    "description": "Setter for property <code>backgroundRepeat</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>backgroundRepeat</code>",
        "name": "bBackgroundRepeat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundRepeat",
    "longname": "sap.m.Shell#setBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setBackgroundRepeat"
  },
  {
    "description": "Setter for property <code>headerRightText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>headerRightText</code>",
        "name": "sHeaderRightText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderRightText",
    "longname": "sap.m.Shell#setHeaderRightText",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setHeaderRightText"
  },
  {
    "description": "Setter for property <code>homeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "new value for property <code>homeIcon</code>",
        "name": "oHomeIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHomeIcon",
    "longname": "sap.m.Shell#setHomeIcon",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setHomeIcon"
  },
  {
    "description": "Setter for property <code>logo</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>logo</code>",
        "name": "sLogo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setLogo",
    "longname": "sap.m.Shell#setLogo",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setLogo"
  },
  {
    "description": "Setter for property <code>showLogout</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showLogout</code>",
        "name": "bShowLogout"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowLogout",
    "longname": "sap.m.Shell#setShowLogout",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setShowLogout"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Shell"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.Shell#setTitle",
    "kind": "function",
    "memberof": "sap.m.Shell",
    "scope": "instance",
    "codeName": "sap.m.Shell.prototype.setTitle"
  },
  {
    "description": "Constructor for a new Slider.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getName name} : string</li>\r<li>{@link #getMin min} : float (default: 0)</li>\r<li>{@link #getMax max} : float (default: 100)</li>\r<li>{@link #getStep step} : float (default: 1)</li>\r<li>{@link #getProgress progress} : boolean (default: true)</li>\r<li>{@link #getValue value} : float (default: 0)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Slider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.Slider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A slider is a user interface control that enables the user to adjust values in a specified numerical range.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Slider",
    "longname": "sap.m.Slider",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Slider"
  },
  {
    "description": "This event is triggered after the end user finishes interacting, if there is any change.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "The current value of the slider after a change.",
        "name": "oControlEvent.getParameters.value"
      }
    ],
    "name": "change",
    "longname": "sap.m.Slider#event:change",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.change"
  },
  {
    "description": "This event is triggered during the dragging period, each time the slider value changes.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "The current value of the slider after a live change.",
        "name": "oControlEvent.getParameters.value"
      }
    ],
    "name": "liveChange",
    "longname": "sap.m.Slider#event:liveChange",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.liveChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Slider</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Slider</code>.<br/> itself. \r</p><p>\rThis event is triggered after the end user finishes interacting, if there is any change.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.Slider#attachChange",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.attachChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Slider</code>.<br/> itself. \r</p><p>\rThis event is triggered during the dragging period, each time the slider value changes.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachLiveChange",
    "longname": "sap.m.Slider#attachLiveChange",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.attachLiveChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Slider</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.Slider#detachChange",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.detachChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachLiveChange",
    "longname": "sap.m.Slider#detachLiveChange",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.detachLiveChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.Slider with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Slider.extend",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "codeName": "sap.m.Slider.extend"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'value' of type <code>float</code> The current value of the slider after a change.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.Slider#fireChange",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.fireChange"
  },
  {
    "description": "Fire event liveChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'value' of type <code>float</code> The current value of the slider after a live change.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireLiveChange",
    "longname": "sap.m.Slider#fireLiveChange",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.fireLiveChange"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the slider.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.Slider#getEnabled",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>max</code>.\rThe maximum value of the slider.\r</p><p>\rDefault value is <code>100</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>max</code>"
      }
    ],
    "name": "getMax",
    "longname": "sap.m.Slider#getMax",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getMax"
  },
  {
    "description": "Getter for property <code>min</code>.\rThe minimum value of the slider.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>min</code>"
      }
    ],
    "name": "getMin",
    "longname": "sap.m.Slider#getMin",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getMin"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.Slider#getName",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getName"
  },
  {
    "description": "Getter for property <code>progress</code>.\rShow a progress bar for the slider.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>progress</code>"
      }
    ],
    "name": "getProgress",
    "longname": "sap.m.Slider#getProgress",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getProgress"
  },
  {
    "description": "Getter for property <code>step</code>.\rDefine the size of every one step the slider takes between min and max.\r</p><p>\rThe step needs to be a positive integer; if a negative number is provider, the default value will take place.\r</p><p>\rIf the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.\r</p><p>\rDefault value is <code>1</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>step</code>"
      }
    ],
    "name": "getStep",
    "longname": "sap.m.Slider#getStep",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getStep"
  },
  {
    "description": "Getter for property <code>value</code>.\rDefine the value of the slider. If this value is lower than the minimum permited, the minimum will be override the value, or if the value is higher than maximun, the maximum will be override the value.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.Slider#getValue",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getValue"
  },
  {
    "description": "Getter for property <code>visible</code>.\rDefines the visibility for the slider.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Slider#getVisible",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the slider element, this value can be provided in %, em, px… and all possible CSS measures.\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Slider#getWidth",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.Slider#setEnabled",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>max</code>.\r</p><p>\rDefault value is <code>100</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>max</code>",
        "name": "fMax"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMax",
    "longname": "sap.m.Slider#setMax",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setMax"
  },
  {
    "description": "Setter for property <code>min</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>min</code>",
        "name": "fMin"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMin",
    "longname": "sap.m.Slider#setMin",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setMin"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.Slider#setName",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setName"
  },
  {
    "description": "Setter for property <code>progress</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>progress</code>",
        "name": "bProgress"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setProgress",
    "longname": "sap.m.Slider#setProgress",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setProgress"
  },
  {
    "description": "Setter for property <code>step</code>.\r</p><p>\rDefault value is <code>1</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>step</code>",
        "name": "fStep"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setStep",
    "longname": "sap.m.Slider#setStep",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setStep"
  },
  {
    "description": "Setter for property <code>value</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>value</code>",
        "name": "fValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValue",
    "longname": "sap.m.Slider#setValue",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setValue"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Slider#setVisible",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>100%</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Slider"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Slider#setWidth",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.setWidth"
  },
  {
    "description": "Changes the slider’s value by the value given in the step attribute, multiplied by n.\r</p><p>\rThe default value for n is 1.",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The number of steps the slider goes down.",
        "name": "iN"
      }
    ],
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "stepDown",
    "longname": "sap.m.Slider#stepDown",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.stepDown"
  },
  {
    "description": "Changes the slider’s value by the value given in the step attribute, multiplied by n.\r</p><p>\rThe default value for n is 1.",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The number of steps the slider goes up.",
        "name": "iN"
      }
    ],
    "type": {
      "names": [
        "void"
      ]
    },
    "name": "stepUp",
    "longname": "sap.m.Slider#stepUp",
    "kind": "function",
    "memberof": "sap.m.Slider",
    "scope": "instance",
    "codeName": "sap.m.Slider.prototype.stepUp"
  },
  {
    "description": "Constructor for a new SplitApp.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getHomeIcon homeIcon} : any</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.SplitApp#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.SplitContainer#constructor sap.m.SplitContainer}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.",
    "augments": [
      "sap.m.SplitContainer"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "SplitApp",
    "longname": "sap.m.SplitApp",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.SplitApp"
  },
  {
    "description": "This event will be fired when orientation (portrait/landscape) is changed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns true if the device is in landscape.",
        "name": "oControlEvent.getParameters.landscape"
      }
    ],
    "name": "orientationChange",
    "longname": "sap.m.SplitApp#event:orientationChange",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "codeName": "sap.m.SplitApp.prototype.orientationChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitApp</code>.<br/> itself. \r</p><p>\rThis event will be fired when orientation (portrait/landscape) is changed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitApp"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachOrientationChange",
    "longname": "sap.m.SplitApp#attachOrientationChange",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "codeName": "sap.m.SplitApp.prototype.attachOrientationChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitApp"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachOrientationChange",
    "longname": "sap.m.SplitApp#detachOrientationChange",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "codeName": "sap.m.SplitApp.prototype.detachOrientationChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.SplitApp.extend",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "codeName": "sap.m.SplitApp.extend"
  },
  {
    "description": "Fire event orientationChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'landscape' of type <code>boolean</code> Returns true if the device is in landscape.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitApp"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireOrientationChange",
    "longname": "sap.m.SplitApp#fireOrientationChange",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "codeName": "sap.m.SplitApp.prototype.fireOrientationChange"
  },
  {
    "description": "Getter for property <code>homeIcon</code>.\rThe icon to be displayed on the home screen of iOS devices after the user does \"add to home screen\".\r</p><p>\rNote that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.\r</p><p>\rThis icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.\r</p><p>\rA desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the \"icon\" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.\r</p><p>\rOne example is:\r</p><p>\rapp.setHomeIcon({\r'phone':'phone-icon.png',\r'phone@2':'phone-retina.png',\r'tablet':'tablet-icon.png',\r'tablet@2':'tablet-retina.png',\r'icon':'desktop.ico'\r});\r</p><p>\rThe respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.\rIf an object is given but one of the sizes is not given, the largest given icon will be used for this size.\r</p><p>\rOn Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with \"-precomposed.png\" and setting the \"homeIconPrecomposed\" property to \"true\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value of property <code>homeIcon</code>"
      }
    ],
    "name": "getHomeIcon",
    "longname": "sap.m.SplitApp#getHomeIcon",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "codeName": "sap.m.SplitApp.prototype.getHomeIcon"
  },
  {
    "description": "Setter for property <code>homeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "new value for property <code>homeIcon</code>",
        "name": "oHomeIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitApp"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHomeIcon",
    "longname": "sap.m.SplitApp#setHomeIcon",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "codeName": "sap.m.SplitApp.prototype.setHomeIcon"
  },
  {
    "description": "Constructor for a new SplitContainer.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getDefaultTransitionNameDetail defaultTransitionNameDetail} : string (default: \"slide\")</li>\r<li>{@link #getDefaultTransitionNameMaster defaultTransitionNameMaster} : string (default: \"slide\")</li>\r<li>{@link #getMode mode} : sap.m.SplitAppMode (default: sap.m.SplitAppMode.ShowHideMode)</li>\r<li>{@link #getMasterButtonText masterButtonText} : string</li>\r<li>{@link #getBackgroundColor backgroundColor} : string</li>\r<li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>\r<li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>\r<li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getMasterPages masterPages} : sap.ui.core.Control[]</li>\r<li>{@link #getDetailPages detailPages} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getInitialDetail initialDetail} : string | sap.ui.core.Control</li>\r<li>{@link #getInitialMaster initialMaster} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.SplitContainer#event:masterNavigate masterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:afterMasterNavigate afterMasterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:masterButton masterButton} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:beforeMasterOpen beforeMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:afterMasterOpen afterMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:beforeMasterClose beforeMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:afterMasterClose afterMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:detailNavigate detailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.SplitContainer#event:afterDetailNavigate afterDetailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "SplitContainer maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitContainer.\r</p><p>\rThis control must be rendered as a full screen control in order to make the show/hide master area work properly.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "SplitContainer",
    "longname": "sap.m.SplitContainer",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.SplitContainer"
  },
  {
    "description": "The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether was a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "afterDetailNavigate",
    "longname": "sap.m.SplitContainer#event:afterDetailNavigate",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.afterDetailNavigate"
  },
  {
    "description": "This event is fired when the master area is fully closed after the animation when there is.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterMasterClose",
    "longname": "sap.m.SplitContainer#event:afterMasterClose",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.afterMasterClose"
  },
  {
    "description": "The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether was a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "afterMasterNavigate",
    "longname": "sap.m.SplitContainer#event:afterMasterNavigate",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.afterMasterNavigate"
  },
  {
    "description": "This event is fired when the master area is fully opened after animation if there is.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterMasterOpen",
    "longname": "sap.m.SplitContainer#event:afterMasterOpen",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.afterMasterOpen"
  },
  {
    "description": "This event is fired before the master area is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeMasterClose",
    "longname": "sap.m.SplitContainer#event:beforeMasterClose",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.beforeMasterClose"
  },
  {
    "description": "This event is fired before the master area is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeMasterOpen",
    "longname": "sap.m.SplitContainer#event:beforeMasterOpen",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.beforeMasterOpen"
  },
  {
    "description": "The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "detailNavigate",
    "longname": "sap.m.SplitContainer#event:detailNavigate",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detailNavigate"
  },
  {
    "description": "Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "masterButton",
    "longname": "sap.m.SplitContainer#event:masterButton",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.masterButton"
  },
  {
    "description": "The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "masterNavigate",
    "longname": "sap.m.SplitContainer#event:masterNavigate",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.masterNavigate"
  },
  {
    "description": "Adds some detailPage <code>oDetailPage</code> \rto the aggregation named <code>detailPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage to add; if empty, nothing is inserted",
        "name": "oDetailPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addDetailPage",
    "longname": "sap.m.SplitContainer#addDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.addDetailPage"
  },
  {
    "description": "Adds some masterPage <code>oMasterPage</code> \rto the aggregation named <code>masterPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage to add; if empty, nothing is inserted",
        "name": "oMasterPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addMasterPage",
    "longname": "sap.m.SplitContainer#addMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.addMasterPage"
  },
  {
    "description": "Add a content entity either to master area or detail area depending on the master parameter.\r</p><p>\rThis method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.",
        "name": "oPage"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "States if the page should be added to the master area. If it's set to false, the page is added to detail area.",
        "name": "bMaster"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "since": "1.11.1",
    "name": "addPage",
    "longname": "sap.m.SplitContainer#addPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.addPage"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterDetailNavigate",
    "longname": "sap.m.SplitContainer#attachAfterDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachAfterDetailNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired when the master area is fully closed after the animation when there is.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterMasterClose",
    "longname": "sap.m.SplitContainer#attachAfterMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachAfterMasterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterMasterNavigate",
    "longname": "sap.m.SplitContainer#attachAfterMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachAfterMasterNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired when the master area is fully opened after animation if there is.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterMasterOpen",
    "longname": "sap.m.SplitContainer#attachAfterMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachAfterMasterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired before the master area is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeMasterClose",
    "longname": "sap.m.SplitContainer#attachBeforeMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachBeforeMasterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired before the master area is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeMasterOpen",
    "longname": "sap.m.SplitContainer#attachBeforeMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachBeforeMasterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailNavigate",
    "longname": "sap.m.SplitContainer#attachDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachDetailNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rEvent gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachMasterButton",
    "longname": "sap.m.SplitContainer#attachMasterButton",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachMasterButton"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachMasterNavigate",
    "longname": "sap.m.SplitContainer#attachMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.attachMasterNavigate"
  },
  {
    "description": "navigate back within DetailView",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "backDetail",
    "longname": "sap.m.SplitContainer#backDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.backDetail"
  },
  {
    "description": "navigate back within MasterView",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "backMaster",
    "longname": "sap.m.SplitContainer#backMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.backMaster"
  },
  {
    "description": "Navigates back to the nearest previous page in the SplitContainer history with the given ID. If there is no such page among the previous pages, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the SplitContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property. The original \"data\" object from the \"to\" navigation is also available in these event objects.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The screen to which drilldown should happen. The ID or the control itself can be given.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameters"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "since": "1.10.0",
    "name": "backToPage",
    "longname": "sap.m.SplitContainer#backToPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.backToPage"
  },
  {
    "description": "Navigates back to the initial/top level of Detail (this is the element aggregated as \"initialPage\", or the first added element). If already on the initial page, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "backToTopDetail",
    "longname": "sap.m.SplitContainer#backToTopDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.backToTopDetail"
  },
  {
    "description": "Navigates back to the initial/top level of Master (this is the element aggregated as \"initialPage\", or the first added element). If already on the initial page, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "backToTopMaster",
    "longname": "sap.m.SplitContainer#backToTopMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.backToTopMaster"
  },
  {
    "description": "Destroys all the detailPages in the aggregation \rnamed <code>detailPages</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyDetailPages",
    "longname": "sap.m.SplitContainer#destroyDetailPages",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.destroyDetailPages"
  },
  {
    "description": "Destroys all the masterPages in the aggregation \rnamed <code>masterPages</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyMasterPages",
    "longname": "sap.m.SplitContainer#destroyMasterPages",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.destroyMasterPages"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterDetailNavigate",
    "longname": "sap.m.SplitContainer#detachAfterDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachAfterDetailNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterMasterClose",
    "longname": "sap.m.SplitContainer#detachAfterMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachAfterMasterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterMasterNavigate",
    "longname": "sap.m.SplitContainer#detachAfterMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachAfterMasterNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterMasterOpen",
    "longname": "sap.m.SplitContainer#detachAfterMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachAfterMasterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeMasterClose",
    "longname": "sap.m.SplitContainer#detachBeforeMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachBeforeMasterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeMasterOpen",
    "longname": "sap.m.SplitContainer#detachBeforeMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachBeforeMasterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailNavigate",
    "longname": "sap.m.SplitContainer#detachDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachDetailNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachMasterButton",
    "longname": "sap.m.SplitContainer#detachMasterButton",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachMasterButton"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachMasterNavigate",
    "longname": "sap.m.SplitContainer#detachMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.detachMasterNavigate"
  },
  {
    "description": "Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.SplitContainer.extend",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "codeName": "sap.m.SplitContainer.extend"
  },
  {
    "description": "Fire event afterDetailNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterDetailNavigate",
    "longname": "sap.m.SplitContainer#fireAfterDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireAfterDetailNavigate"
  },
  {
    "description": "Fire event afterMasterClose to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterMasterClose",
    "longname": "sap.m.SplitContainer#fireAfterMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireAfterMasterClose"
  },
  {
    "description": "Fire event afterMasterNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterMasterNavigate",
    "longname": "sap.m.SplitContainer#fireAfterMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireAfterMasterNavigate"
  },
  {
    "description": "Fire event afterMasterOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterMasterOpen",
    "longname": "sap.m.SplitContainer#fireAfterMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireAfterMasterOpen"
  },
  {
    "description": "Fire event beforeMasterClose to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeMasterClose",
    "longname": "sap.m.SplitContainer#fireBeforeMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireBeforeMasterClose"
  },
  {
    "description": "Fire event beforeMasterOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeMasterOpen",
    "longname": "sap.m.SplitContainer#fireBeforeMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireBeforeMasterOpen"
  },
  {
    "description": "Fire event detailNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailNavigate",
    "longname": "sap.m.SplitContainer#fireDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireDetailNavigate"
  },
  {
    "description": "Fire event masterButton to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireMasterButton",
    "longname": "sap.m.SplitContainer#fireMasterButton",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireMasterButton"
  },
  {
    "description": "Fire event masterNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireMasterNavigate",
    "longname": "sap.m.SplitContainer#fireMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.fireMasterNavigate"
  },
  {
    "description": "Getter for property <code>backgroundColor</code>.\rBackground color of the SplitContainer. If set, this color will override the default background defined by the theme. So this should only be set when really required.\rAny configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>backgroundColor</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundColor",
    "longname": "sap.m.SplitContainer#getBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundColor"
  },
  {
    "description": "Getter for property <code>backgroundImage</code>.\rBackground image of the SplitContainer. If set, this image will override the default background defined by the theme. So this should only be set when really required.\rThis background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>backgroundImage</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundImage",
    "longname": "sap.m.SplitContainer#getBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundImage"
  },
  {
    "description": "Getter for property <code>backgroundOpacity</code>.\rOpacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).\rThis can be used to make the application content better readable by making the background image partly transparent.\r</p><p>\rDefault value is <code>1</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>backgroundOpacity</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundOpacity",
    "longname": "sap.m.SplitContainer#getBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundOpacity"
  },
  {
    "description": "Getter for property <code>backgroundRepeat</code>.\rWhether the background image (if configured) should be proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>backgroundRepeat</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundRepeat",
    "longname": "sap.m.SplitContainer#getBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundRepeat"
  },
  {
    "description": "Returns the current shown detail page.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getCurrentDetailPage",
    "longname": "sap.m.SplitContainer#getCurrentDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getCurrentDetailPage"
  },
  {
    "description": "Returns the current shown master page.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getCurrentMasterPage",
    "longname": "sap.m.SplitContainer#getCurrentMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getCurrentMasterPage"
  },
  {
    "description": "Returns the current shown page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned. Otherwise the current page in detail area is returned.\r</p><p>\rThis method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.",
        "name": "bMaster"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getCurrentPage",
    "longname": "sap.m.SplitContainer#getCurrentPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getCurrentPage"
  },
  {
    "description": "Getter for property <code>defaultTransitionNameDetail</code>.\rThe type of the transition/animation to apply when \"to()\" is called without defining the transition to use. The default is \"slide\", other options are: \"fade\" and \"show\" and the names of any registered custom transitions.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>defaultTransitionNameDetail</code>"
      }
    ],
    "name": "getDefaultTransitionNameDetail",
    "longname": "sap.m.SplitContainer#getDefaultTransitionNameDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getDefaultTransitionNameDetail"
  },
  {
    "description": "Getter for property <code>defaultTransitionNameMaster</code>.\rThe type of the transition/animation to apply when \"to()\" is called without defining the transition to use. The default is \"slide\", other options are: \"fade\" and \"show\" and the names of any registered custom transitions.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>defaultTransitionNameMaster</code>"
      }
    ],
    "name": "getDefaultTransitionNameMaster",
    "longname": "sap.m.SplitContainer#getDefaultTransitionNameMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getDefaultTransitionNameMaster"
  },
  {
    "description": "Returns the page with the given id in detail area. If there's no page that has the given id, null is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the page that needs to be fetched.",
        "name": "sId"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getDetailPage",
    "longname": "sap.m.SplitContainer#getDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getDetailPage"
  },
  {
    "description": "Getter for aggregation <code>detailPages</code>.<br/>\rThe content entities between which this SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.\r</p><p>\rThese aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getDetailPages",
    "longname": "sap.m.SplitContainer#getDetailPages",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getDetailPages"
  },
  {
    "description": "Sets the initial detail page, which is shown on application launch.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialDetail</code> association, or null"
      }
    ],
    "name": "getInitialDetail",
    "longname": "sap.m.SplitContainer#getInitialDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getInitialDetail"
  },
  {
    "description": "Sets the initial master page, which is shown on application launch.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialMaster</code> association, or null"
      }
    ],
    "name": "getInitialMaster",
    "longname": "sap.m.SplitContainer#getInitialMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getInitialMaster"
  },
  {
    "description": "Getter for property <code>masterButtonText</code>.\rThis is the text shown in master button which has a default value \"Navigation\". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.\r</p><p>\rThe master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitContainer manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>masterButtonText</code>"
      }
    ],
    "name": "getMasterButtonText",
    "longname": "sap.m.SplitContainer#getMasterButtonText",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getMasterButtonText"
  },
  {
    "description": "Returns the page with the given id in master area. If there's no page that has the given id, null is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the page that needs to be fetched.",
        "name": "sId"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getMasterPage",
    "longname": "sap.m.SplitContainer#getMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getMasterPage"
  },
  {
    "description": "Getter for aggregation <code>masterPages</code>.<br/>\rThe content entities between which this SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.\r</p><p>\rThese aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getMasterPages",
    "longname": "sap.m.SplitContainer#getMasterPages",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getMasterPages"
  },
  {
    "description": "Getter for property <code>mode</code>.\rThis mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode\r</p><p>\rDefault value is <code>ShowHideMode</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitAppMode"
          ]
        },
        "description": "the value of property <code>mode</code>"
      }
    ],
    "name": "getMode",
    "longname": "sap.m.SplitContainer#getMode",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getMode"
  },
  {
    "description": "Returns the page with the given id from either master area or detail area depending on the master parameter. If there's no page that has the given id, null is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the page that needs to be fetched.",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "If the page with given id should be fetched from the master area. If it's set to false, the page will be fetched from detail area.",
        "name": "bMaster"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getPage",
    "longname": "sap.m.SplitContainer#getPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.getPage"
  },
  {
    "description": "When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.",
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "hideMaster",
    "longname": "sap.m.SplitContainer#hideMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.hideMaster"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>detailPages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage whose index is looked for.",
        "name": "oDetailPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfDetailPage",
    "longname": "sap.m.SplitContainer#indexOfDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.indexOfDetailPage"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>masterPages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage whose index is looked for.",
        "name": "oMasterPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfMasterPage",
    "longname": "sap.m.SplitContainer#indexOfMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.indexOfMasterPage"
  },
  {
    "description": "Inserts a detailPage into the aggregation named <code>detailPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage to insert; if empty, nothing is inserted",
        "name": "oDetailPage"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the detailPage should be inserted at; for \r            a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value \r            greater than the current size of the aggregation, the detailPage is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertDetailPage",
    "longname": "sap.m.SplitContainer#insertDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.insertDetailPage"
  },
  {
    "description": "Inserts a masterPage into the aggregation named <code>masterPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage to insert; if empty, nothing is inserted",
        "name": "oMasterPage"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the masterPage should be inserted at; for \r            a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value \r            greater than the current size of the aggregation, the masterPage is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertMasterPage",
    "longname": "sap.m.SplitContainer#insertMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.insertMasterPage"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>detailPages</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllDetailPages",
    "longname": "sap.m.SplitContainer#removeAllDetailPages",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.removeAllDetailPages"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>masterPages</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllMasterPages",
    "longname": "sap.m.SplitContainer#removeAllMasterPages",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.removeAllMasterPages"
  },
  {
    "description": "Removes an detailPage from the aggregation named <code>detailPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage to remove or its index or id",
        "name": "vDetailPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed detailPage or null"
      }
    ],
    "name": "removeDetailPage",
    "longname": "sap.m.SplitContainer#removeDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.removeDetailPage"
  },
  {
    "description": "Removes an masterPage from the aggregation named <code>masterPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage to remove or its index or id",
        "name": "vMasterPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed masterPage or null"
      }
    ],
    "name": "removeMasterPage",
    "longname": "sap.m.SplitContainer#removeMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.removeMasterPage"
  },
  {
    "description": "Setter for property <code>backgroundColor</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>backgroundColor</code>",
        "name": "sBackgroundColor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundColor",
    "longname": "sap.m.SplitContainer#setBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundColor"
  },
  {
    "description": "Setter for property <code>backgroundImage</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>backgroundImage</code>",
        "name": "sBackgroundImage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundImage",
    "longname": "sap.m.SplitContainer#setBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundImage"
  },
  {
    "description": "Setter for property <code>backgroundOpacity</code>.\r</p><p>\rDefault value is <code>1</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>backgroundOpacity</code>",
        "name": "fBackgroundOpacity"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundOpacity",
    "longname": "sap.m.SplitContainer#setBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundOpacity"
  },
  {
    "description": "Setter for property <code>backgroundRepeat</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>backgroundRepeat</code>",
        "name": "bBackgroundRepeat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundRepeat",
    "longname": "sap.m.SplitContainer#setBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundRepeat"
  },
  {
    "description": "Setter for property <code>defaultTransitionNameDetail</code>.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>defaultTransitionNameDetail</code>",
        "name": "sDefaultTransitionNameDetail"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDefaultTransitionNameDetail",
    "longname": "sap.m.SplitContainer#setDefaultTransitionNameDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setDefaultTransitionNameDetail"
  },
  {
    "description": "Setter for property <code>defaultTransitionNameMaster</code>.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>defaultTransitionNameMaster</code>",
        "name": "sDefaultTransitionNameMaster"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDefaultTransitionNameMaster",
    "longname": "sap.m.SplitContainer#setDefaultTransitionNameMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setDefaultTransitionNameMaster"
  },
  {
    "description": "Sets the initial detail page, which is shown on application launch.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialDetail</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialDetail"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInitialDetail",
    "longname": "sap.m.SplitContainer#setInitialDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setInitialDetail"
  },
  {
    "description": "Setter for property <code>masterButtonText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>masterButtonText</code>",
        "name": "sMasterButtonText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMasterButtonText",
    "longname": "sap.m.SplitContainer#setMasterButtonText",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setMasterButtonText"
  },
  {
    "description": "Setter for property <code>mode</code>.\r</p><p>\rDefault value is <code>ShowHideMode</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SplitAppMode"
          ]
        },
        "description": "new value for property <code>mode</code>",
        "name": "oMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMode",
    "longname": "sap.m.SplitContainer#setMode",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.setMode"
  },
  {
    "description": "When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.",
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "showMaster",
    "longname": "sap.m.SplitContainer#showMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.showMaster"
  },
  {
    "description": "navigate to given detail page",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the transition/animation to apply. This parameter can be omitted; then the default is \"slide\" (horizontal movement from the right).\rOther options are: \"fade\", \"flip\", and \"show\" and the names of any registered custom transitions.\r</p><p>\rNone of the standard transitions is currently making use of any given transition parameters.",
        "name": "sTransitionName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page. The \"beforeShow\" event on the target page will contain this data object as \"data\" property.\r</p><p>\rUse case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.\r</p><p>\rFor a proper parameter order, the \"data\" parameter must be given when the \"transitionParameters\" parameter is used. (it can be given as \"null\")\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.\rThe \"show\", \"slide\" and \"fade\" transitions do not use any parameter.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "toDetail",
    "longname": "sap.m.SplitContainer#toDetail",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.toDetail"
  },
  {
    "description": "navigate to given master page",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The screen to which drilldown should happen. The ID or the control itself can be given.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the transition/animation to apply. This parameter can be omitted; then the default is \"slide\" (horizontal movement from the right).\rOther options are: \"fade\", \"flip\", and \"show\" and the names of any registered custom transitions.\r</p><p>\rNone of the standard transitions is currently making use of any given transition parameters.",
        "name": "sTransitionName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oTransitionParameters"
      }
    ],
    "since": "1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.\r</p><p>\rFor a proper parameter order, the \"data\" parameter must be given when the \"transitionParameters\" parameter is used. (it can be given as \"null\")\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.\rThe \"show\", \"slide\" and \"fade\" transitions do not use any parameter.",
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "toMaster",
    "longname": "sap.m.SplitContainer#toMaster",
    "kind": "function",
    "memberof": "sap.m.SplitContainer",
    "scope": "instance",
    "codeName": "sap.m.SplitContainer.prototype.toMaster"
  },
  {
    "description": "Constructor for a new StandardListItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getDescription description} : string</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getIconInset iconInset} : boolean (default: true)</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>\r<li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>\r<li>{@link #getInfo info} : string</li>\r<li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The StandardListItem is a list item providing image, titel and description.",
    "augments": [
      "sap.m.ListItemBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "StandardListItem",
    "longname": "sap.m.StandardListItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.StandardListItem"
  },
  {
    "description": "Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.StandardListItem.extend",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "codeName": "sap.m.StandardListItem.extend"
  },
  {
    "description": "Getter for property <code>activeIcon</code>.\rList item active icon\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>activeIcon</code>"
      }
    ],
    "name": "getActiveIcon",
    "longname": "sap.m.StandardListItem#getActiveIcon",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getActiveIcon"
  },
  {
    "description": "Getter for property <code>description</code>.\rDescription\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>description</code>"
      }
    ],
    "name": "getDescription",
    "longname": "sap.m.StandardListItem#getDescription",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getDescription"
  },
  {
    "description": "Getter for property <code>icon</code>.\rList item icon\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>icon</code>"
      }
    ],
    "name": "getIcon",
    "longname": "sap.m.StandardListItem#getIcon",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getIcon"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.StandardListItem#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>iconInset</code>.\rIf false image will not be shown as embedded icon. Instead it will take the full height of the listitem.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconInset</code>"
      }
    ],
    "name": "getIconInset",
    "longname": "sap.m.StandardListItem#getIconInset",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getIconInset"
  },
  {
    "description": "Getter for property <code>info</code>.\rInfo text shown on the right side of the description.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>info</code>"
      }
    ],
    "name": "getInfo",
    "longname": "sap.m.StandardListItem#getInfo",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getInfo"
  },
  {
    "description": "Getter for property <code>infoState</code>.\rInfo state defines the color of the info text. E.g. Error, Warning, Success...\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>infoState</code>"
      }
    ],
    "name": "getInfoState",
    "longname": "sap.m.StandardListItem#getInfoState",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getInfoState"
  },
  {
    "description": "Getter for property <code>title</code>.\rList item text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.StandardListItem#getTitle",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.getTitle"
  },
  {
    "description": "Setter for property <code>activeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>activeIcon</code>",
        "name": "sActiveIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveIcon",
    "longname": "sap.m.StandardListItem#setActiveIcon",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setActiveIcon"
  },
  {
    "description": "Setter for property <code>description</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>description</code>",
        "name": "sDescription"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDescription",
    "longname": "sap.m.StandardListItem#setDescription",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setDescription"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.StandardListItem#setIcon",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.StandardListItem#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>iconInset</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconInset</code>",
        "name": "bIconInset"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconInset",
    "longname": "sap.m.StandardListItem#setIconInset",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setIconInset"
  },
  {
    "description": "Setter for property <code>info</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>info</code>",
        "name": "sInfo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfo",
    "longname": "sap.m.StandardListItem#setInfo",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setInfo"
  },
  {
    "description": "Setter for property <code>infoState</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>infoState</code>",
        "name": "oInfoState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfoState",
    "longname": "sap.m.StandardListItem#setInfoState",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setInfoState"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardListItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.StandardListItem#setTitle",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "codeName": "sap.m.StandardListItem.prototype.setTitle"
  },
  {
    "description": "Constructor for a new StandardTile.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getInfo info} : string</li>\r<li>{@link #getIcon icon} : sap.ui.core.URI</li>\r<li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>\r<li>{@link #getNumber number} : string</li>\r<li>{@link #getNumberUnit numberUnit} : string</li>\r<li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>\r<li>{@link #getType type} : sap.m.StandardTileType (default: sap.m.StandardTileType.None)</li>\r<li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The StandardTile",
    "augments": [
      "sap.m.Tile"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "StandardTile",
    "longname": "sap.m.StandardTile",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.StandardTile"
  },
  {
    "description": "Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.StandardTile.extend",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "codeName": "sap.m.StandardTile.extend"
  },
  {
    "description": "Getter for property <code>activeIcon</code>.\rTile active icon\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>activeIcon</code>"
      }
    ],
    "name": "getActiveIcon",
    "longname": "sap.m.StandardTile#getActiveIcon",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getActiveIcon"
  },
  {
    "description": "Getter for property <code>iconDensityAware</code>.\rBy default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.\r</p><p>\rIf bandwidth is the key for the application, set this value to false.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>iconDensityAware</code>"
      }
    ],
    "name": "getIconDensityAware",
    "longname": "sap.m.StandardTile#getIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getIconDensityAware"
  },
  {
    "description": "Getter for property <code>info</code>.\rTile description\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>info</code>"
      }
    ],
    "name": "getInfo",
    "longname": "sap.m.StandardTile#getInfo",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getInfo"
  },
  {
    "description": "Getter for property <code>infoState</code>.\rInfo state defines the color of the info text. E.g. Error, Warning, Success...\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>infoState</code>"
      }
    ],
    "name": "getInfoState",
    "longname": "sap.m.StandardTile#getInfoState",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getInfoState"
  },
  {
    "description": "Getter for property <code>number</code>.\rNumber field\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>number</code>"
      }
    ],
    "name": "getNumber",
    "longname": "sap.m.StandardTile#getNumber",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getNumber"
  },
  {
    "description": "Getter for property <code>numberUnit</code>.\rNumber units qualifier\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>numberUnit</code>"
      }
    ],
    "name": "getNumberUnit",
    "longname": "sap.m.StandardTile#getNumberUnit",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getNumberUnit"
  },
  {
    "description": "Getter for property <code>title</code>.\rTile title\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.StandardTile#getTitle",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getTitle"
  },
  {
    "description": "Getter for property <code>type</code>.\rTile type.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTileType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.StandardTile#getType",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.getType"
  },
  {
    "description": "Setter for property <code>activeIcon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>activeIcon</code>",
        "name": "sActiveIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setActiveIcon",
    "longname": "sap.m.StandardTile#setActiveIcon",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setActiveIcon"
  },
  {
    "description": "Setter for property <code>icon</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>icon</code>",
        "name": "sIcon"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIcon",
    "longname": "sap.m.StandardTile#setIcon",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setIcon"
  },
  {
    "description": "Setter for property <code>iconDensityAware</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>iconDensityAware</code>",
        "name": "bIconDensityAware"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIconDensityAware",
    "longname": "sap.m.StandardTile#setIconDensityAware",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setIconDensityAware"
  },
  {
    "description": "Setter for property <code>info</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>info</code>",
        "name": "sInfo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfo",
    "longname": "sap.m.StandardTile#setInfo",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setInfo"
  },
  {
    "description": "Setter for property <code>infoState</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>infoState</code>",
        "name": "oInfoState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfoState",
    "longname": "sap.m.StandardTile#setInfoState",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setInfoState"
  },
  {
    "description": "Setter for property <code>number</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>number</code>",
        "name": "sNumber"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumber",
    "longname": "sap.m.StandardTile#setNumber",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setNumber"
  },
  {
    "description": "Setter for property <code>numberUnit</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>numberUnit</code>",
        "name": "sNumberUnit"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNumberUnit",
    "longname": "sap.m.StandardTile#setNumberUnit",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setNumberUnit"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.StandardTile#setTitle",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setTitle"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.StandardTileType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.StandardTile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.StandardTile#setType",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "codeName": "sap.m.StandardTile.prototype.setType"
  },
  {
    "description": "Disables support.",
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "sap.m.Support"
      }
    ],
    "access": "protected",
    "memberof": "sap.m.Support",
    "name": "off",
    "longname": "sap.m.Support.off",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.Support.off"
  },
  {
    "description": "Enables support.",
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "sap.m.Support"
      }
    ],
    "access": "protected",
    "memberof": "sap.m.Support",
    "name": "on",
    "longname": "sap.m.Support.on",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.Support.on"
  },
  {
    "description": "Constructor for a new Switch.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getState state} : boolean (default: false)</li>\r<li>{@link #getCustomTextOn customTextOn} : string</li>\r<li>{@link #getCustomTextOff customTextOff} : string</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getEnabled enabled} : boolean (default: true)</li>\r<li>{@link #getName name} : string</li>\r<li>{@link #getType type} : sap.m.SwitchType (default: sap.m.SwitchType.Default)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Switch#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Switch",
    "longname": "sap.m.Switch",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Switch"
  },
  {
    "description": "Triggered when a switch changes the state.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "The new state of the switch.",
        "name": "oControlEvent.getParameters.state"
      }
    ],
    "name": "change",
    "longname": "sap.m.Switch#event:change",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.change"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Switch</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Switch</code>.<br/> itself. \r</p><p>\rTriggered when a switch changes the state.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.Switch#attachChange",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.attachChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Switch</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.Switch#detachChange",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.detachChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.Switch with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Switch.extend",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "codeName": "sap.m.Switch.extend"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'state' of type <code>boolean</code> The new state of the switch.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.Switch#fireChange",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.fireChange"
  },
  {
    "description": "Getter for property <code>customTextOff</code>.\rCustom text for the \"OFF\" state.\r</p><p>\r\"OFF\" translated to the current language is the default value.\rBeware that the given text will be cut off after three characters.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>customTextOff</code>"
      }
    ],
    "name": "getCustomTextOff",
    "longname": "sap.m.Switch#getCustomTextOff",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getCustomTextOff"
  },
  {
    "description": "Getter for property <code>customTextOn</code>.\rCustom text for the \"ON\" state.\r</p><p>\r\"ON\" translated to the current language is the default value.\rBeware that the given text will be cut off after three characters.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>customTextOn</code>"
      }
    ],
    "name": "getCustomTextOn",
    "longname": "sap.m.Switch#getCustomTextOn",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getCustomTextOn"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rWhether the switch is enabled.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.Switch#getEnabled",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.Switch#getName",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getName"
  },
  {
    "description": "Getter for property <code>state</code>.\rA boolean value indicating whether the switch is on or off.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>state</code>"
      }
    ],
    "name": "getState",
    "longname": "sap.m.Switch#getState",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getState"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of a Switch. Possibles values \"Default\", \"AcceptReject\".\r</p><p>\rDefault value is <code>Default</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SwitchType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.Switch#getType",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible switches are not rendered.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Switch#getVisible",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.getVisible"
  },
  {
    "description": "Setter for property <code>customTextOff</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>customTextOff</code>",
        "name": "sCustomTextOff"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomTextOff",
    "longname": "sap.m.Switch#setCustomTextOff",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setCustomTextOff"
  },
  {
    "description": "Setter for property <code>customTextOn</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>customTextOn</code>",
        "name": "sCustomTextOn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomTextOn",
    "longname": "sap.m.Switch#setCustomTextOn",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setCustomTextOn"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.Switch#setEnabled",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.Switch#setName",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setName"
  },
  {
    "description": "Change the switch state between on and off.",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "bState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setState",
    "longname": "sap.m.Switch#setState",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setState"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Default</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SwitchType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.Switch#setType",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Switch"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Switch#setVisible",
    "kind": "function",
    "memberof": "sap.m.Switch",
    "scope": "instance",
    "codeName": "sap.m.Switch.prototype.setVisible"
  },
  {
    "description": "Constructor for a new Table.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign (default: sap.m.ListHeaderDesign.Plain)</li>\r<li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: sap.m.BackgroundDesign.Translucent)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getColumns columns} : sap.m.Column[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Table control provides a set of sophisticated and comfort functions for responsive table design.",
    "augments": [
      "sap.m.ListBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "Table",
    "longname": "sap.m.Table",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Table"
  },
  {
    "description": "Adds some column <code>oColumn</code> \rto the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column to add; if empty, nothing is inserted",
        "name": "oColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Table"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addColumn",
    "longname": "sap.m.Table#addColumn",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.addColumn"
  },
  {
    "description": "Destroys all the columns in the aggregation \rnamed <code>columns</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Table"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyColumns",
    "longname": "sap.m.Table#destroyColumns",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.destroyColumns"
  },
  {
    "description": "Creates a new subclass of class sap.m.Table with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Table.extend",
    "kind": "function",
    "memberof": "sap.m.Table",
    "codeName": "sap.m.Table.extend"
  },
  {
    "description": "Getter for property <code>backgroundDesign</code>.\rThis property is used to set the background color of the table. Depending on the theme you can change the state of the background from \"Solid\" over \"Translucent\" to \"Transparent\".\r</p><p>\rDefault value is <code>Translucent</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BackgroundDesign"
          ]
        },
        "description": "the value of property <code>backgroundDesign</code>"
      }
    ],
    "name": "getBackgroundDesign",
    "longname": "sap.m.Table#getBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.getBackgroundDesign"
  },
  {
    "description": "Getter for aggregation <code>columns</code>.<br/>\rColumns of the Table",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Column>"
          ]
        }
      }
    ],
    "name": "getColumns",
    "longname": "sap.m.Table#getColumns",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.getColumns"
  },
  {
    "description": "Getter for property <code>headerDesign</code>.\rTable header style. Possible vales are \"Standard\" and \"Plain\"\r</p><p>\rDefault value is <code>Plain</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListHeaderDesign"
          ]
        },
        "description": "the value of property <code>headerDesign</code>"
      }
    ],
    "name": "getHeaderDesign",
    "longname": "sap.m.Table#getHeaderDesign",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.getHeaderDesign"
  },
  {
    "description": "Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column whose index is looked for.",
        "name": "oColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfColumn",
    "longname": "sap.m.Table#indexOfColumn",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.indexOfColumn"
  },
  {
    "description": "Inserts a column into the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column to insert; if empty, nothing is inserted",
        "name": "oColumn"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the column should be inserted at; for \r            a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value \r            greater than the current size of the aggregation, the column is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Table"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertColumn",
    "longname": "sap.m.Table#insertColumn",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.insertColumn"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>columns</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Column>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllColumns",
    "longname": "sap.m.Table#removeAllColumns",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.removeAllColumns"
  },
  {
    "description": "Removes an column from the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.Column"
          ]
        },
        "description": "the column to remove or its index or id",
        "name": "vColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the removed column or null"
      }
    ],
    "name": "removeColumn",
    "longname": "sap.m.Table#removeColumn",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.removeColumn"
  },
  {
    "description": "Setter for property <code>backgroundDesign</code>.\r</p><p>\rDefault value is <code>Translucent</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.BackgroundDesign"
          ]
        },
        "description": "new value for property <code>backgroundDesign</code>",
        "name": "oBackgroundDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Table"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setBackgroundDesign",
    "longname": "sap.m.Table#setBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.setBackgroundDesign"
  },
  {
    "description": "Setter for property <code>headerDesign</code>.\r</p><p>\rDefault value is <code>Plain</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListHeaderDesign"
          ]
        },
        "description": "new value for property <code>headerDesign</code>",
        "name": "oHeaderDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Table"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderDesign",
    "longname": "sap.m.Table#setHeaderDesign",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "codeName": "sap.m.Table.prototype.setHeaderDesign"
  },
  {
    "description": "Constructor for a new TablePersoDialog.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getPersoDialogFor persoDialogFor} : string | sap.ui.core.Control</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.TablePersoDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "tags": [
      {
        "originalTitle": "experimental",
        "title": "experimental",
        "text": "Since version 1.15. \rAPI is not yet finished and might change completely",
        "value": "Since version 1.15. \rAPI is not yet finished and might change completely"
      }
    ],
    "name": "TablePersoDialog",
    "longname": "sap.m.TablePersoDialog",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.TablePersoDialog"
  },
  {
    "description": "Fired when the dialog is closed",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "close",
    "longname": "sap.m.TablePersoDialog#event:close",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.close"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.TablePersoDialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.TablePersoDialog</code>.<br/> itself. \r</p><p>\rFired when the dialog is closed",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TablePersoDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachClose",
    "longname": "sap.m.TablePersoDialog#attachClose",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.attachClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.TablePersoDialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TablePersoDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachClose",
    "longname": "sap.m.TablePersoDialog#detachClose",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.detachClose"
  },
  {
    "description": "Creates a new subclass of class sap.m.TablePersoDialog with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.TablePersoDialog.extend",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "codeName": "sap.m.TablePersoDialog.extend"
  },
  {
    "description": "Fire event close to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TablePersoDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireClose",
    "longname": "sap.m.TablePersoDialog#fireClose",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.fireClose"
  },
  {
    "description": "This is the Table with which this persoDialog is to be associated.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>persoDialogFor</code> association, or null"
      }
    ],
    "name": "getPersoDialogFor",
    "longname": "sap.m.TablePersoDialog#getPersoDialogFor",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.getPersoDialogFor"
  },
  {
    "description": "Sets the content of the dialog, being list items representing\rthe associated table's column settings, and opens the dialog",
    "name": "open",
    "longname": "sap.m.TablePersoDialog#open",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.open"
  },
  {
    "description": "Returns the personalizations made. Currently supports\ra 'columns' property which holds an array of settings,\rone element per column in the associated table.",
    "name": "retrievePersonalizations",
    "longname": "sap.m.TablePersoDialog#retrievePersonalizations",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.retrievePersonalizations"
  },
  {
    "description": "This is the Table with which this persoDialog is to be associated.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>persoDialogFor</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vPersoDialogFor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TablePersoDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPersoDialogFor",
    "longname": "sap.m.TablePersoDialog#setPersoDialogFor",
    "kind": "function",
    "memberof": "sap.m.TablePersoDialog",
    "scope": "instance",
    "codeName": "sap.m.TablePersoDialog.prototype.setPersoDialogFor"
  },
  {
    "description": "Constructor for a new Text.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getText text} : string (default: '')</li>\r<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>\r<li>{@link #getVisible visible} : boolean (default: true)</li>\r<li>{@link #getWrapping wrapping} : boolean (default: true)</li>\r<li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize</li>\r<li>{@link #getMaxLines maxLines} : int</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The Text control is used to display some continuous text.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "Text",
    "longname": "sap.m.Text",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Text"
  },
  {
    "description": "Ellipsis(…) text to indicate more text for browser which does not support native line clamp\rCan be overwritten with 3dots(...) if fonts do not support this UTF-8 character.\rNOTE: Changing this does not affect native ellipsis support",
    "since": "1.13.2",
    "access": "protected",
    "name": "ellipsis",
    "longname": "sap.m.Text#ellipsis",
    "kind": "member",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.ellipsis"
  },
  {
    "description": "Defines whether browser supports native line clamp or not",
    "since": "1.13.2",
    "access": "protected",
    "scope": "static",
    "name": "hasNativeLineClamp",
    "longname": "sap.m.Text.hasNativeLineClamp",
    "kind": "member",
    "memberof": "sap.m.Text",
    "codeName": "sap.m.Text.hasNativeLineClamp"
  },
  {
    "description": "Binder for property <code>text</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindText",
    "longname": "sap.m.Text#bindText",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.bindText"
  },
  {
    "description": "Creates a new subclass of class sap.m.Text with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Text.extend",
    "kind": "function",
    "memberof": "sap.m.Text",
    "codeName": "sap.m.Text.extend"
  },
  {
    "description": "Getter for property <code>maxLines</code>.\rLimits the number of lines for wrapping texts.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>maxLines</code>"
      }
    ],
    "since": "1.13.2",
    "name": "getMaxLines",
    "longname": "sap.m.Text#getMaxLines",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getMaxLines"
  },
  {
    "description": "Getter for property <code>text</code>.\rText to be displayed.\r</p><p>\rDefault value is <code>''</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>text</code>"
      }
    ],
    "name": "getText",
    "longname": "sap.m.Text#getText",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getText"
  },
  {
    "description": "Getter for property <code>textAlign</code>.\rSets the horizontal alignment of the text.\r</p><p>\rDefault value is <code>Begin</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "the value of property <code>textAlign</code>"
      }
    ],
    "name": "getTextAlign",
    "longname": "sap.m.Text#getTextAlign",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getTextAlign"
  },
  {
    "description": "Getter for property <code>textDirection</code>.\rAvailable options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.\r</p><p>\rDefault value is <code>Inherit</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "the value of property <code>textDirection</code>"
      }
    ],
    "name": "getTextDirection",
    "longname": "sap.m.Text#getTextDirection",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getTextDirection"
  },
  {
    "description": "Getter for property <code>visible</code>.\rSet this property to false to make text invisible.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Text#getVisible",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rBy default the Text control uses the full width available. Set this property to restrict the width to a custom value.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Text#getWidth",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getWidth"
  },
  {
    "description": "Getter for property <code>wrapping</code>.\rSet this property to false to disable the automatic text wrapping.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>wrapping</code>"
      }
    ],
    "name": "getWrapping",
    "longname": "sap.m.Text#getWrapping",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.getWrapping"
  },
  {
    "description": "Setter for property <code>maxLines</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>maxLines</code>",
        "name": "iMaxLines"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.13.2",
    "name": "setMaxLines",
    "longname": "sap.m.Text#setMaxLines",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setMaxLines"
  },
  {
    "description": "Setter for property <code>text</code>.\r</p><p>\rDefault value is <code>''</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>text</code>",
        "name": "sText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setText",
    "longname": "sap.m.Text#setText",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setText"
  },
  {
    "description": "Setter for property <code>textAlign</code>.\r</p><p>\rDefault value is <code>Begin</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextAlign"
          ]
        },
        "description": "new value for property <code>textAlign</code>",
        "name": "oTextAlign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextAlign",
    "longname": "sap.m.Text#setTextAlign",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setTextAlign"
  },
  {
    "description": "Setter for property <code>textDirection</code>.\r</p><p>\rDefault value is <code>Inherit</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.TextDirection"
          ]
        },
        "description": "new value for property <code>textDirection</code>",
        "name": "oTextDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTextDirection",
    "longname": "sap.m.Text#setTextDirection",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setTextDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Text#setVisible",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Text#setWidth",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setWidth"
  },
  {
    "description": "Setter for property <code>wrapping</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>wrapping</code>",
        "name": "bWrapping"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWrapping",
    "longname": "sap.m.Text#setWrapping",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.setWrapping"
  },
  {
    "description": "Unbinder for property <code>text</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Text"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindText",
    "longname": "sap.m.Text#unbindText",
    "kind": "function",
    "memberof": "sap.m.Text",
    "scope": "instance",
    "codeName": "sap.m.Text.prototype.unbindText"
  },
  {
    "description": "Constructor for a new TextArea.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getRows rows} : int (default: 2)</li>\r<li>{@link #getCols cols} : int (default: 20)</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize</li>\r<li>{@link #getMaxLength maxLength} : int (default: 0)</li>\r<li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.TextArea#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "Enable users to input multi-line text.",
    "augments": [
      "sap.m.InputBase"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.9.0",
    "name": "TextArea",
    "longname": "sap.m.TextArea",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.TextArea"
  },
  {
    "description": "This event is fired when the value of the input is changed - e.g. at each keypress",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The new value of the textarea.",
        "name": "oControlEvent.getParameters.value"
      }
    ],
    "name": "liveChange",
    "longname": "sap.m.TextArea#event:liveChange",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.liveChange"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.TextArea</code>.<br/> itself. \r</p><p>\rThis event is fired when the value of the input is changed - e.g. at each keypress",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachLiveChange",
    "longname": "sap.m.TextArea#attachLiveChange",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.attachLiveChange"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachLiveChange",
    "longname": "sap.m.TextArea#detachLiveChange",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.detachLiveChange"
  },
  {
    "description": "Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.TextArea.extend",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "codeName": "sap.m.TextArea.extend"
  },
  {
    "description": "Fire event liveChange to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'value' of type <code>string</code> The new value of the textarea.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireLiveChange",
    "longname": "sap.m.TextArea#fireLiveChange",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.fireLiveChange"
  },
  {
    "description": "Getter for property <code>cols</code>.\rSpecifies the width of the textarea (in average character width).\r</p><p>\rDefault value is <code>20</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>cols</code>"
      }
    ],
    "name": "getCols",
    "longname": "sap.m.TextArea#getCols",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.getCols"
  },
  {
    "description": "Getter for property <code>height</code>.\rDefines the height of the textarea with CSS. This property can overwrite the rows property.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.TextArea#getHeight",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.getHeight"
  },
  {
    "description": "Getter for property <code>maxLength</code>.\rMaximum number of characters that user can input. If your value property's length bigger than maxLength then value is not truncated and user can see whole value property but cannot write anymore.\r</p><p>\rDefault value is <code>0</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>maxLength</code>"
      }
    ],
    "name": "getMaxLength",
    "longname": "sap.m.TextArea#getMaxLength",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.getMaxLength"
  },
  {
    "description": "Getter for property <code>rows</code>.\rSpecifies the height of the text area (in lines).\r</p><p>\rDefault value is <code>2</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>rows</code>"
      }
    ],
    "name": "getRows",
    "longname": "sap.m.TextArea#getRows",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.getRows"
  },
  {
    "description": "Getter for property <code>wrapping</code>.\rThe wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form. Possible values are: Soft, Hard, Off.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Wrapping"
          ]
        },
        "description": "the value of property <code>wrapping</code>"
      }
    ],
    "name": "getWrapping",
    "longname": "sap.m.TextArea#getWrapping",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.getWrapping"
  },
  {
    "description": "Setter for property <code>cols</code>.\r</p><p>\rDefault value is <code>20</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>cols</code>",
        "name": "iCols"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCols",
    "longname": "sap.m.TextArea#setCols",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.setCols"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.TextArea#setHeight",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>maxLength</code>.\r</p><p>\rDefault value is <code>0</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>maxLength</code>",
        "name": "iMaxLength"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMaxLength",
    "longname": "sap.m.TextArea#setMaxLength",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.setMaxLength"
  },
  {
    "description": "Setter for property <code>rows</code>.\r</p><p>\rDefault value is <code>2</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>rows</code>",
        "name": "iRows"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRows",
    "longname": "sap.m.TextArea#setRows",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.setRows"
  },
  {
    "description": "Setter for property <code>wrapping</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Wrapping"
          ]
        },
        "description": "new value for property <code>wrapping</code>",
        "name": "oWrapping"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TextArea"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWrapping",
    "longname": "sap.m.TextArea#setWrapping",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "codeName": "sap.m.TextArea.prototype.setWrapping"
  },
  {
    "description": "Constructor for a new Tile.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getRemovable removable} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.Tile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A tile to be displayed in the tile container. Use this\rtile as the base class for\rspecialized tile implementations.\rUse the renderers _addOuterClass methods to add a style class to the main\rsurface of the Tile. In this class set the background color, gradients\ror background images.\rInstead of implementing the default render method in the renderer implement\ryour content HTML in the _renderContent method of the specialized\rtile.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "Tile",
    "longname": "sap.m.Tile",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.Tile"
  },
  {
    "description": "Tap event is raised if the user tap or click to the\rcontrol.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.Tile#event:press",
    "memberof": "sap.m.Tile",
    "scope": "instance",
    "codeName": "sap.m.Tile.prototype.press"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Tile</code>.<br/> itself. \r</p><p>\rTap event is raised if the user tap or click to the\rcontrol.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.Tile#attachPress",
    "kind": "function",
    "memberof": "sap.m.Tile",
    "scope": "instance",
    "codeName": "sap.m.Tile.prototype.attachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.Tile#detachPress",
    "kind": "function",
    "memberof": "sap.m.Tile",
    "scope": "instance",
    "codeName": "sap.m.Tile.prototype.detachPress"
  },
  {
    "description": "Creates a new subclass of class sap.m.Tile with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.Tile.extend",
    "kind": "function",
    "memberof": "sap.m.Tile",
    "codeName": "sap.m.Tile.extend"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.Tile#firePress",
    "kind": "function",
    "memberof": "sap.m.Tile",
    "scope": "instance",
    "codeName": "sap.m.Tile.prototype.firePress"
  },
  {
    "description": "Getter for property <code>removable</code>.\rDetermines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>removable</code>"
      }
    ],
    "name": "getRemovable",
    "longname": "sap.m.Tile#getRemovable",
    "kind": "function",
    "memberof": "sap.m.Tile",
    "scope": "instance",
    "codeName": "sap.m.Tile.prototype.getRemovable"
  },
  {
    "description": "Setter for property <code>removable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>removable</code>",
        "name": "bRemovable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRemovable",
    "longname": "sap.m.Tile#setRemovable",
    "kind": "function",
    "memberof": "sap.m.Tile",
    "scope": "instance",
    "codeName": "sap.m.Tile.prototype.setRemovable"
  },
  {
    "description": "Constructor for a new TileContainer.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>\r<li>{@link #getEditable editable} : boolean</li>\r<li>{@link #getAllowAdd allowAdd} : boolean</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getTiles tiles} : sap.ui.core.Control[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.TileContainer#event:tileMove tileMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.TileContainer#event:tileDelete tileDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.TileContainer#event:tileAdd tileAdd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A container that arranges same-size tiles nicely on carousel pages",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.12",
    "name": "TileContainer",
    "longname": "sap.m.TileContainer",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.TileContainer"
  },
  {
    "description": "Fired if a Tile is added",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tileAdd",
    "longname": "sap.m.TileContainer#event:tileAdd",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.tileAdd"
  },
  {
    "description": "Fired if a tile is deleted during edit mode.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "The tile",
        "name": "oControlEvent.getParameters.tile"
      }
    ],
    "name": "tileDelete",
    "longname": "sap.m.TileContainer#event:tileDelete",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.tileDelete"
  },
  {
    "description": "Fired if a tile was moved",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "The tile that has been moved",
        "name": "oControlEvent.getParameters.tile"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The new index of the tile in the tiles aggregation",
        "name": "oControlEvent.getParameters.newIndex"
      }
    ],
    "name": "tileMove",
    "longname": "sap.m.TileContainer#event:tileMove",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.tileMove"
  },
  {
    "description": "Adds a tile to the end of the tiles collection",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "The tile to add",
        "name": "oTile"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "This tile container."
      }
    ],
    "tags": [
      {
        "originalTitle": "override",
        "title": "override",
        "text": ""
      }
    ],
    "name": "addTile",
    "longname": "sap.m.TileContainer#addTile",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.addTile"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.TileContainer</code>.<br/> itself. \r</p><p>\rFired if a Tile is added",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTileAdd",
    "longname": "sap.m.TileContainer#attachTileAdd",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.attachTileAdd"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.TileContainer</code>.<br/> itself. \r</p><p>\rFired if a tile is deleted during edit mode.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTileDelete",
    "longname": "sap.m.TileContainer#attachTileDelete",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.attachTileDelete"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.TileContainer</code>.<br/> itself. \r</p><p>\rFired if a tile was moved",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTileMove",
    "longname": "sap.m.TileContainer#attachTileMove",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.attachTileMove"
  },
  {
    "description": "Deletes a tile",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "The tile to move",
        "name": "oTile"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "This tile container."
      }
    ],
    "tags": [
      {
        "originalTitle": "override",
        "title": "override",
        "text": ""
      }
    ],
    "name": "deleteTile",
    "longname": "sap.m.TileContainer#deleteTile",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.deleteTile"
  },
  {
    "description": "Destroys all the tiles in the aggregation \rnamed <code>tiles</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyTiles",
    "longname": "sap.m.TileContainer#destroyTiles",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.destroyTiles"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTileAdd",
    "longname": "sap.m.TileContainer#detachTileAdd",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.detachTileAdd"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTileDelete",
    "longname": "sap.m.TileContainer#detachTileDelete",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.detachTileDelete"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTileMove",
    "longname": "sap.m.TileContainer#detachTileMove",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.detachTileMove"
  },
  {
    "description": "Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.TileContainer.extend",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "codeName": "sap.m.TileContainer.extend"
  },
  {
    "description": "Fire event tileAdd to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTileAdd",
    "longname": "sap.m.TileContainer#fireTileAdd",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.fireTileAdd"
  },
  {
    "description": "Fire event tileDelete to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'tile' of type <code>sap.m.Tile</code> The tile\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTileDelete",
    "longname": "sap.m.TileContainer#fireTileDelete",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.fireTileDelete"
  },
  {
    "description": "Fire event tileMove to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'tile' of type <code>sap.m.Tile</code> The tile that has been moved</li>\r<li>'newIndex' of type <code>int</code> The new index of the tile in the tiles aggregation</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTileMove",
    "longname": "sap.m.TileContainer#fireTileMove",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.fireTileMove"
  },
  {
    "description": "Getter for property <code>allowAdd</code>.\rDetermines whether the user is allowed to add tiles in edit mode (editable = true)\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>allowAdd</code>"
      }
    ],
    "name": "getAllowAdd",
    "longname": "sap.m.TileContainer#getAllowAdd",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.getAllowAdd"
  },
  {
    "description": "Getter for property <code>editable</code>.\rWhether the tile container is editable and you can move or delete or add tiles.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>editable</code>"
      }
    ],
    "name": "getEditable",
    "longname": "sap.m.TileContainer#getEditable",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.getEditable"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the container in pixel\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.TileContainer#getHeight",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.getHeight"
  },
  {
    "description": "Returns the index of the first tile that is visible in the current page",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "The index of the first tile that is visible in the current page."
      }
    ],
    "name": "getPageFirstTileIndex",
    "longname": "sap.m.TileContainer#getPageFirstTileIndex",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.getPageFirstTileIndex"
  },
  {
    "description": "Getter for aggregation <code>tiles</code>.<br/>\rThe tiles to be displayed by the tile container",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getTiles",
    "longname": "sap.m.TileContainer#getTiles",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.getTiles"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the container in pixel\r</p><p>\rDefault value is <code>100%</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.TileContainer#getWidth",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the tile whose index is looked for.",
        "name": "oTile"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfTile",
    "longname": "sap.m.TileContainer#indexOfTile",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.indexOfTile"
  },
  {
    "description": "Inserts a tile to the given index",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "The tile to insert",
        "name": "oTile"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The new Tile position in the tiles aggregation.",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "This tile container."
      }
    ],
    "tags": [
      {
        "originalTitle": "override",
        "title": "override",
        "text": ""
      }
    ],
    "name": "insertTile",
    "longname": "sap.m.TileContainer#insertTile",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.insertTile"
  },
  {
    "description": "Moves a given tile to the given index",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "The tile to move",
        "name": "oTile"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "The new Tile position in the tiles aggregation.",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "This tile container."
      }
    ],
    "name": "moveTile",
    "longname": "sap.m.TileContainer#moveTile",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.moveTile"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>tiles</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllTiles",
    "longname": "sap.m.TileContainer#removeAllTiles",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.removeAllTiles"
  },
  {
    "description": "Removes an tile from the aggregation named <code>tiles</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the tile to remove or its index or id",
        "name": "vTile"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed tile or null"
      }
    ],
    "name": "removeTile",
    "longname": "sap.m.TileContainer#removeTile",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.removeTile"
  },
  {
    "description": "Scrolls to the page where the given tile or tile index is included. \rOptionally this can be done animated or not. With IE9 the scroll is never animated.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Tile",
            "int"
          ]
        },
        "description": "The tile or tile index to be scrolled into view",
        "name": "vTile"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the scroll should be animated.",
        "name": "bAnimated"
      }
    ],
    "name": "scrollIntoView",
    "longname": "sap.m.TileContainer#scrollIntoView",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.scrollIntoView"
  },
  {
    "description": "Scrolls one page to the left",
    "name": "scrollLeft",
    "longname": "sap.m.TileContainer#scrollLeft",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.scrollLeft"
  },
  {
    "description": "Scrolls one page to the right",
    "name": "scrollRight",
    "longname": "sap.m.TileContainer#scrollRight",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.scrollRight"
  },
  {
    "description": "Setter for property <code>allowAdd</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>allowAdd</code>",
        "name": "bAllowAdd"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAllowAdd",
    "longname": "sap.m.TileContainer#setAllowAdd",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.setAllowAdd"
  },
  {
    "description": "Sets the editable property to the tile container that allows to move icons\rThis is currently also set with a long tap",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the container is in edit mode or not.",
        "name": "Whether"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "This tile container."
      }
    ],
    "name": "setEditable",
    "longname": "sap.m.TileContainer#setEditable",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.setEditable"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is <code>100%</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.TileContainer#setHeight",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>100%</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.TileContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.TileContainer#setWidth",
    "kind": "function",
    "memberof": "sap.m.TileContainer",
    "scope": "instance",
    "codeName": "sap.m.TileContainer.prototype.setWidth"
  },
  {
    "description": "Given a list of touches, count the number of touches related with the given element.",
    "params": [
      {
        "type": {
          "names": [
            "TouchList"
          ]
        },
        "description": "The list of touch objects to search.",
        "name": "oTouchList"
      },
      {
        "type": {
          "names": [
            "jQuery",
            "Element",
            "string"
          ]
        },
        "description": "A jQuery element or an element reference or an element id.",
        "name": "vElement"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of touches related with the given element."
      }
    ],
    "memberof": "sap.m.touch",
    "name": "countContained",
    "longname": "sap.m.touch.countContained",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.touch.countContained"
  },
  {
    "description": "Given a list of touch objects, find the touch that matches the given one.",
    "params": [
      {
        "type": {
          "names": [
            "TouchList"
          ]
        },
        "description": "The list of touch objects to search.",
        "name": "oTouchList"
      },
      {
        "type": {
          "names": [
            "Touch",
            "number"
          ]
        },
        "description": "A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.",
        "name": "oTouch"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object",
            "undefined"
          ]
        },
        "description": "The touch matching if any."
      }
    ],
    "memberof": "sap.m.touch",
    "name": "find",
    "longname": "sap.m.touch.find",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.touch.find"
  },
  {
    "description": "Adds an event registration for redirect",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The object, that wants to be notified, when the event occurs",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "sap.m.URLHelper instance"
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "attachRedirect",
    "longname": "sap.m.URLHelper.attachRedirect",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.attachRedirect"
  },
  {
    "description": "Detach already registered redirect event",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The object, that wants to be notified, when the event occurs",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "sap.m.URLHelper instance"
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "detachRedirect",
    "longname": "sap.m.URLHelper.detachRedirect",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.detachRedirect"
  },
  {
    "description": "Builds Email URI from given parameter.\rTrims spaces from email addresses",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Destination email address.",
        "name": "sEmail"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Subject of the email address.",
        "name": "sSubject"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Default message text.",
        "name": "sBody"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Carbon Copy email address.",
        "name": "sCC"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Blind carbon copy email address.",
        "name": "sBCC"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Email URI scheme."
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "normalizeEmail",
    "longname": "sap.m.URLHelper.normalizeEmail",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.normalizeEmail"
  },
  {
    "description": "Sanitize the given telephone number and returns SMS URI scheme",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "telephone number.",
        "name": "sTel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "SMS URI scheme."
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "normalizeSms",
    "longname": "sap.m.URLHelper.normalizeSms",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.normalizeSms"
  },
  {
    "description": "Sanitize the given telephone number and returns telephone URI scheme",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "telephone number.",
        "name": "sTel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "telephone URI scheme."
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "normalizeTel",
    "longname": "sap.m.URLHelper.normalizeTel",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.normalizeTel"
  },
  {
    "description": "Redirects to given URL\rThis method fires \"redirect\" event before open the URL",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Uniform resource locator.",
        "name": "sURL"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "description": "Opens URL in a new browser window",
        "name": "bNewWindow"
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "redirect",
    "longname": "sap.m.URLHelper.redirect",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.redirect"
  },
  {
    "description": "Trigger email application to send email\rTrims spaces from email addresses",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Destination email address.",
        "name": "sEmail"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Subject of the email address.",
        "name": "sSubject"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Default message text.",
        "name": "sBody"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Carbon Copy email address.",
        "name": "sCC"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Blind carbon copy email address.",
        "name": "sBCC"
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "triggerEmail",
    "longname": "sap.m.URLHelper.triggerEmail",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.triggerEmail"
  },
  {
    "description": "Trigger SMS application to send SMS to given telephone number",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "telephone number.",
        "name": "sTel"
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "triggerSms",
    "longname": "sap.m.URLHelper.triggerSms",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.triggerSms"
  },
  {
    "description": "Trigger telephone to call given telephone number",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "telephone number.",
        "name": "sTel"
      }
    ],
    "memberof": "sap.m.URLHelper",
    "name": "triggerTel",
    "longname": "sap.m.URLHelper.triggerTel",
    "kind": "function",
    "scope": "static",
    "codeName": "sap.m.URLHelper.triggerTel"
  },
  {
    "description": "Constructor for a new VBox.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.",
    "augments": [
      "sap.m.FlexBox"
    ],
    "version": "1.15.1-SNAPSHOT",
    "name": "VBox",
    "longname": "sap.m.VBox",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.VBox"
  },
  {
    "description": "Creates a new subclass of class sap.m.VBox with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.VBox.extend",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "codeName": "sap.m.VBox.extend"
  },
  {
    "description": "Constructor for a new ViewSettingsCustomItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getCustomControl customControl} : sap.ui.core.Control</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ViewSettingsCustomItem is used for modelling custom filters in the ViewSettingsDialog.",
    "augments": [
      "sap.m.ViewSettingsItem"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "ViewSettingsCustomItem",
    "longname": "sap.m.ViewSettingsCustomItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ViewSettingsCustomItem"
  },
  {
    "description": "Destroys the customControl in the aggregation \rnamed <code>customControl</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsCustomItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyCustomControl",
    "longname": "sap.m.ViewSettingsCustomItem#destroyCustomControl",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsCustomItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsCustomItem.prototype.destroyCustomControl"
  },
  {
    "description": "Creates a new subclass of class sap.m.ViewSettingsCustomItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ViewSettingsCustomItem.extend",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsCustomItem",
    "codeName": "sap.m.ViewSettingsCustomItem.extend"
  },
  {
    "description": "Getter for aggregation <code>customControl</code>.<br/>\rA custom control for the filter field. It can be used for complex filtering mechanisms.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getCustomControl",
    "longname": "sap.m.ViewSettingsCustomItem#getCustomControl",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsCustomItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsCustomItem.prototype.getCustomControl"
  },
  {
    "description": "Setter for the aggregated <code>customControl</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oCustomControl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsCustomItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCustomControl",
    "longname": "sap.m.ViewSettingsCustomItem#setCustomControl",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsCustomItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsCustomItem.prototype.setCustomControl"
  },
  {
    "description": "Constructor for a new ViewSettingsDialog.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getTitle title} : string</li>\r<li>{@link #getSortAscending sortAscending} : boolean (default: true)</li>\r<li>{@link #getGroupAscending groupAscending} : boolean (default: true)</li></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getSortItems sortItems} : sap.m.ViewSettingsItem[]</li>\r<li>{@link #getGroupItems groupItems} : sap.m.ViewSettingsItem[]</li>\r<li>{@link #getFilterItems filterItems} : sap.m.ViewSettingsItem[]</li>\r<li>{@link #getPresetFilterItems presetFilterItems} : sap.m.ViewSettingsItem[]</li></ul>\r</li>\r<li>Associations\r<ul>\r<li>{@link #getSelectedSortItem selectedSortItem} : string | sap.m.ViewSettingsItem</li>\r<li>{@link #getSelectedGroupItem selectedGroupItem} : string | sap.m.ViewSettingsItem</li>\r<li>{@link #getSelectedPresetFilterItem selectedPresetFilterItem} : string | sap.m.ViewSettingsItem</li></ul>\r</li>\r<li>Events\r<ul>\r<li>{@link sap.m.ViewSettingsDialog#event:applySettings applySettings} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>\r<li>{@link sap.m.ViewSettingsDialog#event:resetFilters resetFilters} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>\r</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ViewSettingsDialog provides functionality to easily select the options for sorting, grouping, and filtering data. It is a composite control, consisting of a modal popover and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respecive associations. If only one assication is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.",
    "augments": [
      "sap.ui.core.Control"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "ViewSettingsDialog",
    "longname": "sap.m.ViewSettingsDialog",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ViewSettingsDialog"
  },
  {
    "description": "The event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "Selected sort item.",
        "name": "oControlEvent.getParameters.sortItem"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Selected sort order (true = ascending, false = descending).",
        "name": "oControlEvent.getParameters.sortAscending"
      },
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "Selected group item",
        "name": "oControlEvent.getParameters.groupItem"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Selected group order (true = ascending, false = descending).",
        "name": "oControlEvent.getParameters.groupAscending"
      },
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "Selected preset filter item.",
        "name": "oControlEvent.getParameters.presetFilterItem"
      },
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "Selected filters in an array of ViewSettingsItem.",
        "name": "oControlEvent.getParameters.filterItems"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.",
        "name": "oControlEvent.getParameters.filterKeys"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Selected filter items in string format to display in a control's header bar in format \"Filtered by: key (subkey1, subkey2, subkey3)\".",
        "name": "oControlEvent.getParameters.filterString"
      }
    ],
    "name": "applySettings",
    "longname": "sap.m.ViewSettingsDialog#event:applySettings",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.applySettings"
  },
  {
    "description": "Event is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "resetFilters",
    "longname": "sap.m.ViewSettingsDialog#event:resetFilters",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.resetFilters"
  },
  {
    "description": "Adds some filterItem <code>oFilterItem</code> \rto the aggregation named <code>filterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the filterItem to add; if empty, nothing is inserted",
        "name": "oFilterItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addFilterItem",
    "longname": "sap.m.ViewSettingsDialog#addFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.addFilterItem"
  },
  {
    "description": "Adds a group item and sets the association to reflect the selected state",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the item to be added to the aggregation",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "addGroupItem",
    "longname": "sap.m.ViewSettingsDialog#addGroupItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.addGroupItem"
  },
  {
    "description": "Adds a preset filter item and sets the association to reflect the selected state",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the selected item or a string with the key",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "addPresetFilterItem",
    "longname": "sap.m.ViewSettingsDialog#addPresetFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.addPresetFilterItem"
  },
  {
    "description": "Adds a sort item and sets the association to reflect the selected state",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the item to be added to the aggregation",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "addSortItem",
    "longname": "sap.m.ViewSettingsDialog#addSortItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.addSortItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'applySettings' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. \r</p><p>\rThe event indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachApplySettings",
    "longname": "sap.m.ViewSettingsDialog#attachApplySettings",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.attachApplySettings"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself. \r</p><p>\rEvent is called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachResetFilters",
    "longname": "sap.m.ViewSettingsDialog#attachResetFilters",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.attachResetFilters"
  },
  {
    "description": "Binder for aggregation <code>filterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindFilterItems",
    "longname": "sap.m.ViewSettingsDialog#bindFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.bindFilterItems"
  },
  {
    "description": "Binder for aggregation <code>groupItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindGroupItems",
    "longname": "sap.m.ViewSettingsDialog#bindGroupItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.bindGroupItems"
  },
  {
    "description": "Binder for aggregation <code>presetFilterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindPresetFilterItems",
    "longname": "sap.m.ViewSettingsDialog#bindPresetFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.bindPresetFilterItems"
  },
  {
    "description": "Binder for aggregation <code>sortItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindSortItems",
    "longname": "sap.m.ViewSettingsDialog#bindSortItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.bindSortItems"
  },
  {
    "description": "Destroys all the filterItems in the aggregation \rnamed <code>filterItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyFilterItems",
    "longname": "sap.m.ViewSettingsDialog#destroyFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.destroyFilterItems"
  },
  {
    "description": "Destroys all the groupItems in the aggregation \rnamed <code>groupItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyGroupItems",
    "longname": "sap.m.ViewSettingsDialog#destroyGroupItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.destroyGroupItems"
  },
  {
    "description": "Destroys all the presetFilterItems in the aggregation \rnamed <code>presetFilterItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyPresetFilterItems",
    "longname": "sap.m.ViewSettingsDialog#destroyPresetFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.destroyPresetFilterItems"
  },
  {
    "description": "Destroys all the sortItems in the aggregation \rnamed <code>sortItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySortItems",
    "longname": "sap.m.ViewSettingsDialog#destroySortItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.destroySortItems"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'applySettings' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachApplySettings",
    "longname": "sap.m.ViewSettingsDialog#detachApplySettings",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.detachApplySettings"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'resetFilters' event of this <code>sap.m.ViewSettingsDialog</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachResetFilters",
    "longname": "sap.m.ViewSettingsDialog#detachResetFilters",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.detachResetFilters"
  },
  {
    "description": "Creates a new subclass of class sap.m.ViewSettingsDialog with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ViewSettingsDialog.extend",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "codeName": "sap.m.ViewSettingsDialog.extend"
  },
  {
    "description": "Fire event applySettings to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'sortItem' of type <code>sap.m.ViewSettingsItem</code> Selected sort item.</li>\r<li>'sortAscending' of type <code>boolean</code> Selected sort order (true = ascending, false = descending).</li>\r<li>'groupItem' of type <code>sap.m.ViewSettingsItem</code> Selected group item</li>\r<li>'groupAscending' of type <code>boolean</code> Selected group order (true = ascending, false = descending).</li>\r<li>'presetFilterItem' of type <code>sap.m.ViewSettingsItem</code> Selected preset filter item.</li>\r<li>'filterItems' of type <code>sap.m.ViewSettingsItem[]</code> Selected filters in an array of ViewSettingsItem.</li>\r<li>'filterKeys' of type <code>object</code> Selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (e.g. the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.</li>\r<li>'filterString' of type <code>string</code> Selected filter items in string format to display in a control's header bar in format \"Filtered by: key (subkey1, subkey2, subkey3)\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireApplySettings",
    "longname": "sap.m.ViewSettingsDialog#fireApplySettings",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.fireApplySettings"
  },
  {
    "description": "Fire event resetFilters to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireResetFilters",
    "longname": "sap.m.ViewSettingsDialog#fireResetFilters",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.fireResetFilters"
  },
  {
    "description": "Getter for aggregation <code>filterItems</code>.<br/>\rList of items with key and value that can be filtered on (e.g. a list of columns for a table). A filterItem is associated with one or more detail filters.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        }
      }
    ],
    "name": "getFilterItems",
    "longname": "sap.m.ViewSettingsDialog#getFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getFilterItems"
  },
  {
    "description": "Getter for property <code>groupAscending</code>.\rIf set to true (default), the group order is ascending, otherwise descending.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>groupAscending</code>"
      }
    ],
    "name": "getGroupAscending",
    "longname": "sap.m.ViewSettingsDialog#getGroupAscending",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getGroupAscending"
  },
  {
    "description": "Getter for aggregation <code>groupItems</code>.<br/>\rList of items with key and value that can be grouped on (e.g. a list of columns for a table).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        }
      }
    ],
    "name": "getGroupItems",
    "longname": "sap.m.ViewSettingsDialog#getGroupItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getGroupItems"
  },
  {
    "description": "Getter for aggregation <code>presetFilterItems</code>.<br/>\rList of preset filter items that allow the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        }
      }
    ],
    "name": "getPresetFilterItems",
    "longname": "sap.m.ViewSettingsDialog#getPresetFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getPresetFilterItems"
  },
  {
    "description": "Returns the selected filters in an array of ViewSettingsItem.",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "an array of selected filter items"
      }
    ],
    "name": "getSelectedFilterItems",
    "longname": "sap.m.ViewSettingsDialog#getSelectedFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedFilterItems"
  },
  {
    "description": "Get the selected filter object in format {key: boolean}",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core/object"
          ]
        },
        "description": "an object with item and subitem keys"
      }
    ],
    "name": "getSelectedFilterKeys",
    "longname": "sap.m.ViewSettingsDialog#getSelectedFilterKeys",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedFilterKeys"
  },
  {
    "description": "Returns the selected filters as an array of ViewSettingsItems. It can be used to create matching sorters and filters to apply the selected settings to the data.",
    "type": {
      "names": [
        "Array.<sap.m.ViewSettingsItem>"
      ]
    },
    "name": "getSelectedFilters",
    "longname": "sap.m.ViewSettingsDialog#getSelectedFilters",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedFilters"
  },
  {
    "description": "Get the filter string in the format \"filter name (subfilter1 name, subfilter2 name, ...), ...\"\rFor custom filters and preset filters it will only add the filter name to the resulting string",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core/string"
          ]
        },
        "description": "the selected filter string"
      }
    ],
    "name": "getSelectedFilterString",
    "longname": "sap.m.ViewSettingsDialog#getSelectedFilterString",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedFilterString"
  },
  {
    "description": "Group item that is selected. It can be set by either passing a key or the item itself to the function \"setSelectedGrouptItem\"",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>selectedGroupItem</code> association, or null"
      }
    ],
    "name": "getSelectedGroupItem",
    "longname": "sap.m.ViewSettingsDialog#getSelectedGroupItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedGroupItem"
  },
  {
    "description": "Preset filter item that is selected. It can be set by either passing a key or the item itself to the function \"setSelectedPresetFilterItem\". Note that either a preset filter OR multiple detail filters can be active at the same time.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>selectedPresetFilterItem</code> association, or null"
      }
    ],
    "name": "getSelectedPresetFilterItem",
    "longname": "sap.m.ViewSettingsDialog#getSelectedPresetFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedPresetFilterItem"
  },
  {
    "description": "Sort item that is selected. It can be set by either passing a key or the item itself to the function \"setSelectedSortItem\"",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>selectedSortItem</code> association, or null"
      }
    ],
    "name": "getSelectedSortItem",
    "longname": "sap.m.ViewSettingsDialog#getSelectedSortItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSelectedSortItem"
  },
  {
    "description": "Getter for property <code>sortAscending</code>.\rIf set to true (default), the sort order is ascending, otherwise descending.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>sortAscending</code>"
      }
    ],
    "name": "getSortAscending",
    "longname": "sap.m.ViewSettingsDialog#getSortAscending",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSortAscending"
  },
  {
    "description": "Getter for aggregation <code>sortItems</code>.<br/>\rList of items with key and value that can be sorted over (e.g. a list of columns for a table).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        }
      }
    ],
    "name": "getSortItems",
    "longname": "sap.m.ViewSettingsDialog#getSortItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getSortItems"
  },
  {
    "description": "Getter for property <code>title</code>.\rTitle of the dialog. If not set, the dialog uses the default \"View\" or \"Sort\", \"Group\", \"Filter\" respectively if there is only one active tab.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>title</code>"
      }
    ],
    "name": "getTitle",
    "longname": "sap.m.ViewSettingsDialog#getTitle",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.getTitle"
  },
  {
    "description": "Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>filterItems</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the filterItem whose index is looked for.",
        "name": "oFilterItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfFilterItem",
    "longname": "sap.m.ViewSettingsDialog#indexOfFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.indexOfFilterItem"
  },
  {
    "description": "Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>groupItems</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the groupItem whose index is looked for.",
        "name": "oGroupItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfGroupItem",
    "longname": "sap.m.ViewSettingsDialog#indexOfGroupItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.indexOfGroupItem"
  },
  {
    "description": "Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>presetFilterItems</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the presetFilterItem whose index is looked for.",
        "name": "oPresetFilterItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfPresetFilterItem",
    "longname": "sap.m.ViewSettingsDialog#indexOfPresetFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.indexOfPresetFilterItem"
  },
  {
    "description": "Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>sortItems</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the sortItem whose index is looked for.",
        "name": "oSortItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfSortItem",
    "longname": "sap.m.ViewSettingsDialog#indexOfSortItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.indexOfSortItem"
  },
  {
    "description": "Inserts a filterItem into the aggregation named <code>filterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the filterItem to insert; if empty, nothing is inserted",
        "name": "oFilterItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the filterItem should be inserted at; for \r            a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value \r            greater than the current size of the aggregation, the filterItem is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertFilterItem",
    "longname": "sap.m.ViewSettingsDialog#insertFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.insertFilterItem"
  },
  {
    "description": "Inserts a groupItem into the aggregation named <code>groupItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the groupItem to insert; if empty, nothing is inserted",
        "name": "oGroupItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the groupItem should be inserted at; for \r            a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value \r            greater than the current size of the aggregation, the groupItem is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertGroupItem",
    "longname": "sap.m.ViewSettingsDialog#insertGroupItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.insertGroupItem"
  },
  {
    "description": "Inserts a presetFilterItem into the aggregation named <code>presetFilterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the presetFilterItem to insert; if empty, nothing is inserted",
        "name": "oPresetFilterItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the presetFilterItem should be inserted at; for \r            a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value \r            greater than the current size of the aggregation, the presetFilterItem is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertPresetFilterItem",
    "longname": "sap.m.ViewSettingsDialog#insertPresetFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.insertPresetFilterItem"
  },
  {
    "description": "Inserts a sortItem into the aggregation named <code>sortItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the sortItem to insert; if empty, nothing is inserted",
        "name": "oSortItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the sortItem should be inserted at; for \r            a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value \r            greater than the current size of the aggregation, the sortItem is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertSortItem",
    "longname": "sap.m.ViewSettingsDialog#insertSortItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.insertSortItem"
  },
  {
    "description": "Opens the view settings dialog relative to the parent control",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core/Control"
          ]
        },
        "description": "the parent control",
        "name": "oParentControl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "openBy",
    "longname": "sap.m.ViewSettingsDialog#openBy",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.openBy"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>filterItems</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllFilterItems",
    "longname": "sap.m.ViewSettingsDialog#removeAllFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeAllFilterItems"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>groupItems</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllGroupItems",
    "longname": "sap.m.ViewSettingsDialog#removeAllGroupItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeAllGroupItems"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>presetFilterItems</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllPresetFilterItems",
    "longname": "sap.m.ViewSettingsDialog#removeAllPresetFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeAllPresetFilterItems"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>sortItems</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllSortItems",
    "longname": "sap.m.ViewSettingsDialog#removeAllSortItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeAllSortItems"
  },
  {
    "description": "Removes an filterItem from the aggregation named <code>filterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the filterItem to remove or its index or id",
        "name": "vFilterItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the removed filterItem or null"
      }
    ],
    "name": "removeFilterItem",
    "longname": "sap.m.ViewSettingsDialog#removeFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeFilterItem"
  },
  {
    "description": "Removes an groupItem from the aggregation named <code>groupItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the groupItem to remove or its index or id",
        "name": "vGroupItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the removed groupItem or null"
      }
    ],
    "name": "removeGroupItem",
    "longname": "sap.m.ViewSettingsDialog#removeGroupItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeGroupItem"
  },
  {
    "description": "Removes an presetFilterItem from the aggregation named <code>presetFilterItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the presetFilterItem to remove or its index or id",
        "name": "vPresetFilterItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the removed presetFilterItem or null"
      }
    ],
    "name": "removePresetFilterItem",
    "longname": "sap.m.ViewSettingsDialog#removePresetFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removePresetFilterItem"
  },
  {
    "description": "Removes an sortItem from the aggregation named <code>sortItems</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the sortItem to remove or its index or id",
        "name": "vSortItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the removed sortItem or null"
      }
    ],
    "name": "removeSortItem",
    "longname": "sap.m.ViewSettingsDialog#removeSortItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.removeSortItem"
  },
  {
    "description": "Setter for property <code>groupAscending</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>groupAscending</code>",
        "name": "bGroupAscending"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setGroupAscending",
    "longname": "sap.m.ViewSettingsDialog#setGroupAscending",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setGroupAscending"
  },
  {
    "description": "Set the selected filter object in format {key: boolean}",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core/object"
          ]
        },
        "description": "an object with filter item and sub keys",
        "name": "oAny"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "setSelectedFilterKeys",
    "longname": "sap.m.ViewSettingsDialog#setSelectedFilterKeys",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setSelectedFilterKeys"
  },
  {
    "description": "Set the selected group item (either by key or by item)",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the selected item or a string with the key",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "setSelectedGroupItem",
    "longname": "sap.m.ViewSettingsDialog#setSelectedGroupItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setSelectedGroupItem"
  },
  {
    "description": "Set the selected preset filter item",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the selected item or a string with the key",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "setSelectedPresetFilterItem",
    "longname": "sap.m.ViewSettingsDialog#setSelectedPresetFilterItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setSelectedPresetFilterItem"
  },
  {
    "description": "Set the selected sort item (either by key or by item)",
    "tags": [
      {
        "originalTitle": "overwrite",
        "title": "overwrite",
        "text": ""
      }
    ],
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the selected item or a string with the key",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m/ViewSettingsDialog"
          ]
        },
        "description": "this pointer for chaining"
      }
    ],
    "name": "setSelectedSortItem",
    "longname": "sap.m.ViewSettingsDialog#setSelectedSortItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setSelectedSortItem"
  },
  {
    "description": "Setter for property <code>sortAscending</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>sortAscending</code>",
        "name": "bSortAscending"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSortAscending",
    "longname": "sap.m.ViewSettingsDialog#setSortAscending",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setSortAscending"
  },
  {
    "description": "Setter for property <code>title</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>title</code>",
        "name": "sTitle"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setTitle",
    "longname": "sap.m.ViewSettingsDialog#setTitle",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.setTitle"
  },
  {
    "description": "Unbinder for aggregation <code>filterItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindFilterItems",
    "longname": "sap.m.ViewSettingsDialog#unbindFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.unbindFilterItems"
  },
  {
    "description": "Unbinder for aggregation <code>groupItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindGroupItems",
    "longname": "sap.m.ViewSettingsDialog#unbindGroupItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.unbindGroupItems"
  },
  {
    "description": "Unbinder for aggregation <code>presetFilterItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindPresetFilterItems",
    "longname": "sap.m.ViewSettingsDialog#unbindPresetFilterItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.unbindPresetFilterItems"
  },
  {
    "description": "Unbinder for aggregation <code>sortItems</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsDialog"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindSortItems",
    "longname": "sap.m.ViewSettingsDialog#unbindSortItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsDialog",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsDialog.prototype.unbindSortItems"
  },
  {
    "description": "Constructor for a new ViewSettingsFilterItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul></ul>\r</li>\r<li>Aggregations\r<ul>\r<li>{@link #getItems items} : sap.m.ViewSettingsItem[]</li></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "A ViewSettingsFilterItem is used for modelling filter behaviour in the ViewSettingsDialog.",
    "augments": [
      "sap.m.ViewSettingsItem"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "ViewSettingsFilterItem",
    "longname": "sap.m.ViewSettingsFilterItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ViewSettingsFilterItem"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsFilterItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.ViewSettingsFilterItem#addItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.addItem"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsFilterItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.ViewSettingsFilterItem#destroyItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.destroyItems"
  },
  {
    "description": "Creates a new subclass of class sap.m.ViewSettingsFilterItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ViewSettingsFilterItem.extend",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "codeName": "sap.m.ViewSettingsFilterItem.extend"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rItems that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.ViewSettingsFilterItem#getItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.getItems"
  },
  {
    "description": "Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.ViewSettingsFilterItem#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsFilterItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.ViewSettingsFilterItem#insertItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ViewSettingsItem>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.ViewSettingsFilterItem#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.ViewSettingsFilterItem#removeItem",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsFilterItem.prototype.removeItem"
  },
  {
    "description": "Constructor for a new ViewSettingsItem.\r</p><p>\rAccepts an object literal <code>mSettings</code> that defines initial \rproperty values, aggregated and associated objects as well as event handlers. \r</p><p>\rIf the name of a setting is ambiguous (e.g. a property has the same name as an event), \rthen the framework assumes property, aggregation, association, event in that order. \rTo override this automatic resolution, one of the prefixes \"aggregation:\", \"association:\" \ror \"event:\" can be added to the name of the setting (such a prefixed name must be\renclosed in single or double quotes).\r</p><p>\rThe supported settings are:\r<ul>\r<li>Properties\r<ul>\r<li>{@link #getSelected selected} : boolean (default: false)</li></ul>\r</li>\r<li>Aggregations\r<ul></ul>\r</li>\r<li>Associations\r<ul></ul>\r</li>\r<li>Events\r<ul></ul>\r</li>\r</ul> \r</p><p>\r</p><p>\rIn addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}\rcan be used as well.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "id for the new control, generated automatically if no id is given",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "initial settings for the new control",
        "name": "mSettings"
      }
    ],
    "kind": "class",
    "classdesc": "ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.",
    "augments": [
      "sap.ui.core.Item"
    ],
    "version": "1.15.1-SNAPSHOT",
    "since": "1.16",
    "name": "ViewSettingsItem",
    "longname": "sap.m.ViewSettingsItem",
    "memberof": "sap.m",
    "scope": "static",
    "codeName": "sap.m.ViewSettingsItem"
  },
  {
    "description": "Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code> \rand enriches it with the information contained in <code>oClassInfo</code>.\r</p><p>\r<code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "name of the class to be created",
        "name": "sClassName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "object literal with informations about the class",
        "name": "oClassInfo"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.",
        "name": "FNMetaImpl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the created class / constructor function"
      }
    ],
    "scope": "static",
    "name": "extend",
    "longname": "sap.m.ViewSettingsItem.extend",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsItem",
    "codeName": "sap.m.ViewSettingsItem.extend"
  },
  {
    "description": "Getter for property <code>selected</code>.\rSelected state of the item. If set to \"true\", the item will be displayed as selected in the view settings dialog.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ViewSettingsItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsItem.prototype.getSelected"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ViewSettingsItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsItem",
    "scope": "instance",
    "codeName": "sap.m.ViewSettingsItem.prototype.setSelected"
  },
  {
    "description": "Search given control's parents and try to find iScroll",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oControl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "iScroll",
            "undefined"
          ]
        },
        "description": "iScroll reference or undefined if cannot find"
      }
    ],
    "since": "1.11",
    "memberof": "sap.m",
    "name": "getIScroll",
    "longname": "sap.m.getIScroll",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.getIScroll"
  },
  {
    "description": "Search given control's parents and try to find ScrollDelegate",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oControl"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object",
            "undefined"
          ]
        },
        "description": "ScrollDelegate or undefined if cannot find"
      }
    ],
    "since": "1.11",
    "memberof": "sap.m",
    "name": "getScrollDelegate",
    "longname": "sap.m.getScrollDelegate",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.getScrollDelegate"
  },
  {
    "description": "A solid background color dependent on the theme.",
    "memberof": "sap.m.BackgroundDesign",
    "name": "Solid",
    "longname": "sap.m.BackgroundDesign.Solid",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.BackgroundDesign.Solid"
  },
  {
    "description": "A translucent background depending on the opacity value of the theme.",
    "memberof": "sap.m.BackgroundDesign",
    "name": "Translucent",
    "longname": "sap.m.BackgroundDesign.Translucent",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.BackgroundDesign.Translucent"
  },
  {
    "description": "Transparent background.",
    "memberof": "sap.m.BackgroundDesign",
    "name": "Transparent",
    "longname": "sap.m.BackgroundDesign.Transparent",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.BackgroundDesign.Transparent"
  },
  {
    "description": "accept type (blue button)",
    "memberof": "sap.m.ButtonType",
    "name": "Accept",
    "longname": "sap.m.ButtonType.Accept",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Accept"
  },
  {
    "description": "back type (back navigation button for header)",
    "memberof": "sap.m.ButtonType",
    "name": "Back",
    "longname": "sap.m.ButtonType.Back",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Back"
  },
  {
    "description": "default type (no special styling)",
    "memberof": "sap.m.ButtonType",
    "name": "Default",
    "longname": "sap.m.ButtonType.Default",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Default"
  },
  {
    "description": "emphasized type",
    "memberof": "sap.m.ButtonType",
    "name": "Emphasized",
    "longname": "sap.m.ButtonType.Emphasized",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Emphasized"
  },
  {
    "description": "reject style (red button)",
    "memberof": "sap.m.ButtonType",
    "name": "Reject",
    "longname": "sap.m.ButtonType.Reject",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Reject"
  },
  {
    "description": "transparent type",
    "memberof": "sap.m.ButtonType",
    "name": "Transparent",
    "longname": "sap.m.ButtonType.Transparent",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Transparent"
  },
  {
    "description": "Unstyled type (no styling)",
    "memberof": "sap.m.ButtonType",
    "name": "Unstyled",
    "longname": "sap.m.ButtonType.Unstyled",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Unstyled"
  },
  {
    "description": "up type (up navigation button for header)",
    "memberof": "sap.m.ButtonType",
    "name": "Up",
    "longname": "sap.m.ButtonType.Up",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ButtonType.Up"
  },
  {
    "description": "An input control for specifying a date value. The user can select a month, day of the month, and year.",
    "memberof": "sap.m.DateTimeInputType",
    "name": "Date",
    "longname": "sap.m.DateTimeInputType.Date",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.DateTimeInputType.Date"
  },
  {
    "description": "An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.",
    "memberof": "sap.m.DateTimeInputType",
    "name": "DateTime",
    "longname": "sap.m.DateTimeInputType.DateTime",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.DateTimeInputType.DateTime"
  },
  {
    "description": "An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.",
    "memberof": "sap.m.DateTimeInputType",
    "name": "Time",
    "longname": "sap.m.DateTimeInputType.Time",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.DateTimeInputType.Time"
  },
  {
    "description": "Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS.",
    "memberof": "sap.m.DialogType",
    "name": "Message",
    "longname": "sap.m.DialogType.Message",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.DialogType.Message"
  },
  {
    "description": "This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog.",
    "memberof": "sap.m.DialogType",
    "name": "Standard",
    "longname": "sap.m.DialogType.Standard",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.DialogType.Standard"
  },
  {
    "description": "Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.",
    "memberof": "sap.m.FacetFilterType",
    "name": "Simple",
    "longname": "sap.m.FacetFilterType.Simple",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FacetFilterType.Simple"
  },
  {
    "description": "If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.",
    "memberof": "sap.m.FlexAlignItems",
    "name": "Baseline",
    "longname": "sap.m.FlexAlignItems.Baseline",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignItems.Baseline"
  },
  {
    "description": "The box items' margin boxes are centered in the cross axis within the line.",
    "memberof": "sap.m.FlexAlignItems",
    "name": "Center",
    "longname": "sap.m.FlexAlignItems.Center",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignItems.Center"
  },
  {
    "description": "The cross-start margin edges of the box items are placed flush with the cross-end edge of the line.",
    "memberof": "sap.m.FlexAlignItems",
    "name": "End",
    "longname": "sap.m.FlexAlignItems.End",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignItems.End"
  },
  {
    "description": "Inherits the value from its parent.",
    "memberof": "sap.m.FlexAlignItems",
    "name": "Inherit",
    "longname": "sap.m.FlexAlignItems.Inherit",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignItems.Inherit"
  },
  {
    "description": "The cross-start margin edges of the box items are placed flush with the cross-start edge of the line.",
    "memberof": "sap.m.FlexAlignItems",
    "name": "Start",
    "longname": "sap.m.FlexAlignItems.Start",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignItems.Start"
  },
  {
    "description": "Make the cross size of the items' margin boxes as close to the same size as the line as possible.",
    "memberof": "sap.m.FlexAlignItems",
    "name": "Stretch",
    "longname": "sap.m.FlexAlignItems.Stretch",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignItems.Stretch"
  },
  {
    "description": "Takes up the value of alignItems from the parent FlexBox",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "Auto",
    "longname": "sap.m.FlexAlignSelf.Auto",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.Auto"
  },
  {
    "description": "If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "Baseline",
    "longname": "sap.m.FlexAlignSelf.Baseline",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.Baseline"
  },
  {
    "description": "The box item's margin box is centered in the cross axis within the line.",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "Center",
    "longname": "sap.m.FlexAlignSelf.Center",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.Center"
  },
  {
    "description": "The cross-start margin edges of the box item is placed flush with the cross-end edge of the line.",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "End",
    "longname": "sap.m.FlexAlignSelf.End",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.End"
  },
  {
    "description": "Inherits the value from its parent.",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "Inherit",
    "longname": "sap.m.FlexAlignSelf.Inherit",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.Inherit"
  },
  {
    "description": "The cross-start margin edges of the box item is placed flush with the cross-start edge of the line.",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "Start",
    "longname": "sap.m.FlexAlignSelf.Start",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.Start"
  },
  {
    "description": "Make the cross size of the item's margin box as close to the same size as the line as possible.",
    "memberof": "sap.m.FlexAlignSelf",
    "name": "Stretch",
    "longname": "sap.m.FlexAlignSelf.Stretch",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexAlignSelf.Stretch"
  },
  {
    "description": "Elements are layed out along the direction of the block axis (usually top to bottom).",
    "memberof": "sap.m.FlexDirection",
    "name": "Column",
    "longname": "sap.m.FlexDirection.Column",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexDirection.Column"
  },
  {
    "description": "Elements are layed out along the reverse direction of the block axis (usually bottom to top).",
    "memberof": "sap.m.FlexDirection",
    "name": "ColumnReverse",
    "longname": "sap.m.FlexDirection.ColumnReverse",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexDirection.ColumnReverse"
  },
  {
    "description": "Inherits the value from its parent.",
    "memberof": "sap.m.FlexDirection",
    "name": "Inherit",
    "longname": "sap.m.FlexDirection.Inherit",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexDirection.Inherit"
  },
  {
    "description": "Elements are layed out along the direction of the inline axis (text direction).",
    "memberof": "sap.m.FlexDirection",
    "name": "Row",
    "longname": "sap.m.FlexDirection.Row",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexDirection.Row"
  },
  {
    "description": "Elements are layed out along the reverse direction of the inline axis (against the text direction).",
    "memberof": "sap.m.FlexDirection",
    "name": "RowReverse",
    "longname": "sap.m.FlexDirection.RowReverse",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexDirection.RowReverse"
  },
  {
    "description": "Box items are packed toward the center of the line.",
    "memberof": "sap.m.FlexJustifyContent",
    "name": "Center",
    "longname": "sap.m.FlexJustifyContent.Center",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexJustifyContent.Center"
  },
  {
    "description": "Box items are packed toward the end of the line.",
    "memberof": "sap.m.FlexJustifyContent",
    "name": "End",
    "longname": "sap.m.FlexJustifyContent.End",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexJustifyContent.End"
  },
  {
    "description": "Inherits the value from its parent.",
    "memberof": "sap.m.FlexJustifyContent",
    "name": "Inherit",
    "longname": "sap.m.FlexJustifyContent.Inherit",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexJustifyContent.Inherit"
  },
  {
    "description": "Box items are evenly distributed in the line, with half-size spaces on either end.",
    "memberof": "sap.m.FlexJustifyContent",
    "name": "SpaceAround",
    "longname": "sap.m.FlexJustifyContent.SpaceAround",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexJustifyContent.SpaceAround"
  },
  {
    "description": "Box items are evenly distributed in the line.",
    "memberof": "sap.m.FlexJustifyContent",
    "name": "SpaceBetween",
    "longname": "sap.m.FlexJustifyContent.SpaceBetween",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexJustifyContent.SpaceBetween"
  },
  {
    "description": "Box items are packed toward the start of the line.",
    "memberof": "sap.m.FlexJustifyContent",
    "name": "Start",
    "longname": "sap.m.FlexJustifyContent.Start",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexJustifyContent.Start"
  },
  {
    "description": "DIV elements are used for rendering",
    "memberof": "sap.m.FlexRendertype",
    "name": "Div",
    "longname": "sap.m.FlexRendertype.Div",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexRendertype.Div"
  },
  {
    "description": "Unordered lists are used for rendering.",
    "memberof": "sap.m.FlexRendertype",
    "name": "List",
    "longname": "sap.m.FlexRendertype.List",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.FlexRendertype.List"
  },
  {
    "description": "Header level 1",
    "memberof": "sap.m.HeaderLevel",
    "name": "H1",
    "longname": "sap.m.HeaderLevel.H1",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.HeaderLevel.H1"
  },
  {
    "description": "Header level 2",
    "memberof": "sap.m.HeaderLevel",
    "name": "H2",
    "longname": "sap.m.HeaderLevel.H2",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.HeaderLevel.H2"
  },
  {
    "description": "Header level 3",
    "memberof": "sap.m.HeaderLevel",
    "name": "H3",
    "longname": "sap.m.HeaderLevel.H3",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.HeaderLevel.H3"
  },
  {
    "description": "Header level 4",
    "memberof": "sap.m.HeaderLevel",
    "name": "H4",
    "longname": "sap.m.HeaderLevel.H4",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.HeaderLevel.H4"
  },
  {
    "description": "Header level 5",
    "memberof": "sap.m.HeaderLevel",
    "name": "H5",
    "longname": "sap.m.HeaderLevel.H5",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.HeaderLevel.H5"
  },
  {
    "description": "Header level 6",
    "memberof": "sap.m.HeaderLevel",
    "name": "H6",
    "longname": "sap.m.HeaderLevel.H6",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.HeaderLevel.H6"
  },
  {
    "description": "An input control for specifying a date value. The user can select a month, day of the month, and year.",
    "deprecated": "Since version 1.9.1. \rPlease use sap.m.DateTimeInput control with type \"Date\" to create date input.",
    "memberof": "sap.m.InputType",
    "name": "Date",
    "longname": "sap.m.InputType.Date",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Date"
  },
  {
    "description": "An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.",
    "deprecated": "Since version 1.9.1. \rPlease use dedicated sap.m.DateTimeInput control with type \"DateTime\" to create date-time input.",
    "memberof": "sap.m.InputType",
    "name": "Datetime",
    "longname": "sap.m.InputType.Datetime",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Datetime"
  },
  {
    "description": "An input control for specifying a date and time value where the format depends on the locale.",
    "deprecated": "Since version 1.9.1. \rPlease use dedicated sap.m.DateTimeInput control with type \"DateTime\" to create date-time input.",
    "memberof": "sap.m.InputType",
    "name": "DatetimeLocale",
    "longname": "sap.m.InputType.DatetimeLocale",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.DatetimeLocale"
  },
  {
    "description": "A text field for specifying an email address. Brings up a keyboard optimized for email address entry.",
    "memberof": "sap.m.InputType",
    "name": "Email",
    "longname": "sap.m.InputType.Email",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Email"
  },
  {
    "description": "An input control for selecting a month.",
    "deprecated": "Since version 1.9.1. \rThere is no cross-platform support. Please do not use this Input type.",
    "memberof": "sap.m.InputType",
    "name": "Month",
    "longname": "sap.m.InputType.Month",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Month"
  },
  {
    "description": "A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \\d* or [0-9]* is equivalent to using this type.",
    "memberof": "sap.m.InputType",
    "name": "Number",
    "longname": "sap.m.InputType.Number",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Number"
  },
  {
    "description": "Password input where the user entry cannot be seen.",
    "memberof": "sap.m.InputType",
    "name": "Password",
    "longname": "sap.m.InputType.Password",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Password"
  },
  {
    "description": "A text field for specifying a phone number. Brings up a phone pad keyboard.",
    "memberof": "sap.m.InputType",
    "name": "Tel",
    "longname": "sap.m.InputType.Tel",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Tel"
  },
  {
    "description": "default (text)",
    "memberof": "sap.m.InputType",
    "name": "Text",
    "longname": "sap.m.InputType.Text",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Text"
  },
  {
    "description": "An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.",
    "deprecated": "Since version 1.9.1. \rPlease use dedicated sap.m.DateTimeInput control with type \"Time\" to create time input.",
    "memberof": "sap.m.InputType",
    "name": "Time",
    "longname": "sap.m.InputType.Time",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Time"
  },
  {
    "description": "A text field for specifying a URL. Brings up a keyboard optimized for URL entry.",
    "memberof": "sap.m.InputType",
    "name": "Url",
    "longname": "sap.m.InputType.Url",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Url"
  },
  {
    "description": "An input control for selecting a week.",
    "deprecated": "Since version 1.9.1. \rThere is no cross-platform support. Please do not use this Input type.",
    "memberof": "sap.m.InputType",
    "name": "Week",
    "longname": "sap.m.InputType.Week",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.InputType.Week"
  },
  {
    "description": "Displays the label in bold.",
    "memberof": "sap.m.LabelDesign",
    "name": "Bold",
    "longname": "sap.m.LabelDesign.Bold",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.LabelDesign.Bold"
  },
  {
    "description": "Displays the label in normal mode.",
    "memberof": "sap.m.LabelDesign",
    "name": "Standard",
    "longname": "sap.m.LabelDesign.Standard",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.LabelDesign.Standard"
  },
  {
    "description": "Plain header style",
    "memberof": "sap.m.ListHeaderDesign",
    "name": "Plain",
    "longname": "sap.m.ListHeaderDesign.Plain",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListHeaderDesign.Plain"
  },
  {
    "description": "Standard header style",
    "memberof": "sap.m.ListHeaderDesign",
    "name": "Standard",
    "longname": "sap.m.ListHeaderDesign.Standard",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListHeaderDesign.Standard"
  },
  {
    "description": "delete mode (only one list item can be deleted)",
    "memberof": "sap.m.ListMode",
    "name": "Delete",
    "longname": "sap.m.ListMode.Delete",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListMode.Delete"
  },
  {
    "description": "multi selection mode (whole list item including checkbox will be selected)",
    "memberof": "sap.m.ListMode",
    "name": "MultiSelect",
    "longname": "sap.m.ListMode.MultiSelect",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListMode.MultiSelect"
  },
  {
    "description": "default mode (no selection)",
    "memberof": "sap.m.ListMode",
    "name": "None",
    "longname": "sap.m.ListMode.None",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListMode.None"
  },
  {
    "description": "right positioned single selection mode (only one list item can be selected)",
    "memberof": "sap.m.ListMode",
    "name": "SingleSelect",
    "longname": "sap.m.ListMode.SingleSelect",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListMode.SingleSelect"
  },
  {
    "description": "left positioned single selection mode (only one list item can be selected)",
    "memberof": "sap.m.ListMode",
    "name": "SingleSelectLeft",
    "longname": "sap.m.ListMode.SingleSelectLeft",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListMode.SingleSelectLeft"
  },
  {
    "description": "Single selection master mode (only one list item can be selected), selected item is highlighted but no radiobutton is visible.",
    "memberof": "sap.m.ListMode",
    "name": "SingleSelectMaster",
    "longname": "sap.m.ListMode.SingleSelectMaster",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListMode.SingleSelectMaster"
  },
  {
    "description": "Separators around all items.",
    "memberof": "sap.m.ListSeparators",
    "name": "All",
    "longname": "sap.m.ListSeparators.All",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListSeparators.All"
  },
  {
    "description": "Separators only between the items.",
    "memberof": "sap.m.ListSeparators",
    "name": "Inner",
    "longname": "sap.m.ListSeparators.Inner",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListSeparators.Inner"
  },
  {
    "description": "No Separators are used.",
    "memberof": "sap.m.ListSeparators",
    "name": "None",
    "longname": "sap.m.ListSeparators.None",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListSeparators.None"
  },
  {
    "description": "Active",
    "memberof": "sap.m.ListType",
    "name": "Active",
    "longname": "sap.m.ListType.Active",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListType.Active"
  },
  {
    "description": "Detail",
    "memberof": "sap.m.ListType",
    "name": "Detail",
    "longname": "sap.m.ListType.Detail",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListType.Detail"
  },
  {
    "description": "DetailAndActive",
    "memberof": "sap.m.ListType",
    "name": "DetailAndActive",
    "longname": "sap.m.ListType.DetailAndActive",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListType.DetailAndActive"
  },
  {
    "description": "Inactive",
    "memberof": "sap.m.ListType",
    "name": "Inactive",
    "longname": "sap.m.ListType.Inactive",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListType.Inactive"
  },
  {
    "description": "Navigation",
    "memberof": "sap.m.ListType",
    "name": "Navigation",
    "longname": "sap.m.ListType.Navigation",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ListType.Navigation"
  },
  {
    "description": "Adds an \"Abort\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "ABORT",
    "longname": "sap.m.MessageBox.Action.ABORT",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.ABORT"
  },
  {
    "description": "Adds a \"Cancel\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "CANCEL",
    "longname": "sap.m.MessageBox.Action.CANCEL",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.CANCEL"
  },
  {
    "description": "Adds a \"Close\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "CLOSE",
    "longname": "sap.m.MessageBox.Action.CLOSE",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.CLOSE"
  },
  {
    "description": "Adds a \"Delete\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "DELETE",
    "longname": "sap.m.MessageBox.Action.DELETE",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.DELETE"
  },
  {
    "description": "Adds an \"Ignore\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "IGNORE",
    "longname": "sap.m.MessageBox.Action.IGNORE",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.IGNORE"
  },
  {
    "description": "Adds a \"No\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "NO",
    "longname": "sap.m.MessageBox.Action.NO",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.NO"
  },
  {
    "description": "Adds an \"Ok\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "OK",
    "longname": "sap.m.MessageBox.Action.OK",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.OK"
  },
  {
    "description": "Adds a \"Retry\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "RETRY",
    "longname": "sap.m.MessageBox.Action.RETRY",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.RETRY"
  },
  {
    "description": "Adds a \"Yes\" button to the message box.",
    "memberof": "sap.m.MessageBox.Action",
    "name": "YES",
    "longname": "sap.m.MessageBox.Action.YES",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Action.YES"
  },
  {
    "description": "Shows the error icon in the message box.",
    "memberof": "sap.m.MessageBox.Icon",
    "name": "ERROR",
    "longname": "sap.m.MessageBox.Icon.ERROR",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Icon.ERROR"
  },
  {
    "description": "Shows the information icon in the message box.",
    "memberof": "sap.m.MessageBox.Icon",
    "name": "INFORMATION",
    "longname": "sap.m.MessageBox.Icon.INFORMATION",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Icon.INFORMATION"
  },
  {
    "description": "Shows no icon in the message box.",
    "memberof": "sap.m.MessageBox.Icon",
    "name": "NONE",
    "longname": "sap.m.MessageBox.Icon.NONE",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Icon.NONE"
  },
  {
    "description": "Shows the question icon in the message box.",
    "memberof": "sap.m.MessageBox.Icon",
    "name": "QUESTION",
    "longname": "sap.m.MessageBox.Icon.QUESTION",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Icon.QUESTION"
  },
  {
    "description": "Shows the success icon in the message box.",
    "memberof": "sap.m.MessageBox.Icon",
    "name": "SUCCESS",
    "longname": "sap.m.MessageBox.Icon.SUCCESS",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Icon.SUCCESS"
  },
  {
    "description": "Shows the warning icon in the message box.",
    "memberof": "sap.m.MessageBox.Icon",
    "name": "WARNING",
    "longname": "sap.m.MessageBox.Icon.WARNING",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.MessageBox.Icon.WARNING"
  },
  {
    "description": "Page background color when a List is set as the Page content.",
    "memberof": "sap.m.PageBackgroundDesign",
    "name": "List",
    "longname": "sap.m.PageBackgroundDesign.List",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PageBackgroundDesign.List"
  },
  {
    "description": "A solid background color dependent on the theme.",
    "memberof": "sap.m.PageBackgroundDesign",
    "name": "Solid",
    "longname": "sap.m.PageBackgroundDesign.Solid",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PageBackgroundDesign.Solid"
  },
  {
    "description": "Standard Page background color.",
    "memberof": "sap.m.PageBackgroundDesign",
    "name": "Standard",
    "longname": "sap.m.PageBackgroundDesign.Standard",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PageBackgroundDesign.Standard"
  },
  {
    "description": "Transparent background for the page.",
    "memberof": "sap.m.PageBackgroundDesign",
    "name": "Transparent",
    "longname": "sap.m.PageBackgroundDesign.Transparent",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PageBackgroundDesign.Transparent"
  },
  {
    "description": "Popover will be placed automatically at the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Auto",
    "longname": "sap.m.PlacementType.Auto",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Auto"
  },
  {
    "description": "Popover will be placed at the bottom of the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Bottom",
    "longname": "sap.m.PlacementType.Bottom",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Bottom"
  },
  {
    "description": "Popover will be placed at the right or left side of the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Horizontal",
    "longname": "sap.m.PlacementType.Horizontal",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Horizontal"
  },
  {
    "description": "Popover will be placed at the left side of the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Left",
    "longname": "sap.m.PlacementType.Left",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Left"
  },
  {
    "description": "Popover will be placed at the right side of the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Right",
    "longname": "sap.m.PlacementType.Right",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Right"
  },
  {
    "description": "Popover will be placed at the top of the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Top",
    "longname": "sap.m.PlacementType.Top",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Top"
  },
  {
    "description": "Popover will be placed at the top or bottom of the reference control.",
    "memberof": "sap.m.PlacementType",
    "name": "Vertical",
    "longname": "sap.m.PlacementType.Vertical",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PlacementType.Vertical"
  },
  {
    "description": "Inside the table popin, header is displayed in first line and value field is displayed in next line.",
    "memberof": "sap.m.PopinDisplay",
    "name": "Block",
    "longname": "sap.m.PopinDisplay.Block",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PopinDisplay.Block"
  },
  {
    "description": "Inside the table popin, value field is displayed next to the header in the same line. Note: If there is no enough space for the value field then goes to next line.",
    "memberof": "sap.m.PopinDisplay",
    "name": "Inline",
    "longname": "sap.m.PopinDisplay.Inline",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.PopinDisplay.Inline"
  },
  {
    "description": "Values are rounded to the nearest integer value (e.g. 1.7 -> 2).",
    "memberof": "sap.m.RatingIndicatorVisualMode",
    "name": "Full",
    "longname": "sap.m.RatingIndicatorVisualMode.Full",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.RatingIndicatorVisualMode.Full"
  },
  {
    "description": "Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).",
    "memberof": "sap.m.RatingIndicatorVisualMode",
    "name": "Half",
    "longname": "sap.m.RatingIndicatorVisualMode.Half",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.RatingIndicatorVisualMode.Half"
  },
  {
    "description": "1024px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "Desktop",
    "longname": "sap.m.ScreenSize.Desktop",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.Desktop"
  },
  {
    "description": "768px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "Large",
    "longname": "sap.m.ScreenSize.Large",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.Large"
  },
  {
    "description": "560px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "Medium",
    "longname": "sap.m.ScreenSize.Medium",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.Medium"
  },
  {
    "description": "240px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "Phone",
    "longname": "sap.m.ScreenSize.Phone",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.Phone"
  },
  {
    "description": "480px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "Small",
    "longname": "sap.m.ScreenSize.Small",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.Small"
  },
  {
    "description": "600px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "Tablet",
    "longname": "sap.m.ScreenSize.Tablet",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.Tablet"
  },
  {
    "description": "960px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "XLarge",
    "longname": "sap.m.ScreenSize.XLarge",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.XLarge"
  },
  {
    "description": "320px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "XSmall",
    "longname": "sap.m.ScreenSize.XSmall",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.XSmall"
  },
  {
    "description": "1120px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "XXLarge",
    "longname": "sap.m.ScreenSize.XXLarge",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.XXLarge"
  },
  {
    "description": "240px wide",
    "memberof": "sap.m.ScreenSize",
    "name": "XXSmall",
    "longname": "sap.m.ScreenSize.XXSmall",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.ScreenSize.XXSmall"
  },
  {
    "description": "Will show the text and the arrow.",
    "memberof": "sap.m.SelectType",
    "name": "Default",
    "longname": "sap.m.SelectType.Default",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SelectType.Default"
  },
  {
    "description": "Will show only the specified icon.",
    "memberof": "sap.m.SelectType",
    "name": "IconOnly",
    "longname": "sap.m.SelectType.IconOnly",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SelectType.IconOnly"
  },
  {
    "description": "Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.",
    "memberof": "sap.m.SplitAppMode",
    "name": "HideMode",
    "longname": "sap.m.SplitAppMode.HideMode",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SplitAppMode.HideMode"
  },
  {
    "description": "Master will be shown inside a Popover when in portrait mode",
    "memberof": "sap.m.SplitAppMode",
    "name": "PopoverMode",
    "longname": "sap.m.SplitAppMode.PopoverMode",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SplitAppMode.PopoverMode"
  },
  {
    "description": "Master will automatically be hidden in portrait mode.",
    "memberof": "sap.m.SplitAppMode",
    "name": "ShowHideMode",
    "longname": "sap.m.SplitAppMode.ShowHideMode",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SplitAppMode.ShowHideMode"
  },
  {
    "description": "Master will always be shown but in a compressed version when in portrait mode.",
    "memberof": "sap.m.SplitAppMode",
    "name": "StretchCompressMode",
    "longname": "sap.m.SplitAppMode.StretchCompressMode",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SplitAppMode.StretchCompressMode"
  },
  {
    "description": "Tile representing that something needs to be created",
    "memberof": "sap.m.StandardTileType",
    "name": "Create",
    "longname": "sap.m.StandardTileType.Create",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.StandardTileType.Create"
  },
  {
    "description": "Monitor tile",
    "memberof": "sap.m.StandardTileType",
    "name": "Monitor",
    "longname": "sap.m.StandardTileType.Monitor",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.StandardTileType.Monitor"
  },
  {
    "description": "Default type",
    "memberof": "sap.m.StandardTileType",
    "name": "None",
    "longname": "sap.m.StandardTileType.None",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.StandardTileType.None"
  },
  {
    "description": "Both directions (left to right or right to left)",
    "memberof": "sap.m.SwipeDirection",
    "name": "Both",
    "longname": "sap.m.SwipeDirection.Both",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SwipeDirection.Both"
  },
  {
    "description": "Swipe from left to right",
    "memberof": "sap.m.SwipeDirection",
    "name": "LeftToRight",
    "longname": "sap.m.SwipeDirection.LeftToRight",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SwipeDirection.LeftToRight"
  },
  {
    "description": "Swipe from right to left.",
    "memberof": "sap.m.SwipeDirection",
    "name": "RightToLeft",
    "longname": "sap.m.SwipeDirection.RightToLeft",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SwipeDirection.RightToLeft"
  },
  {
    "description": "Switch with accept and reject icons",
    "memberof": "sap.m.SwitchType",
    "name": "AcceptReject",
    "longname": "sap.m.SwitchType.AcceptReject",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SwitchType.AcceptReject"
  },
  {
    "description": "Will show \"ON\" and \"OFF\" translated to the current language or the custom text if provided",
    "memberof": "sap.m.SwitchType",
    "name": "Default",
    "longname": "sap.m.SwitchType.Default",
    "kind": "member",
    "scope": "static",
    "codeName": "sap.m.SwitchType.Default"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.ActionListItem#event:detailPress",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.ActionListItem#event:detailTap",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.ActionListItem#event:press",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.ActionListItem#event:tap",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.ActionListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.ActionListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.ActionListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.ActionListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.ActionListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.ActionListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.ActionListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.ActionListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.ActionListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.ActionListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.ActionListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.ActionListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.ActionListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ActionListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.ActionListItem#getType",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.ActionListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ActionListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.ActionListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.ActionListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ActionListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.ActionListItem#setType",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.ActionListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ActionListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.ActionListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "kind": "event",
    "since": "1.7.1",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether was a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "afterNavigate",
    "longname": "sap.m.App#event:afterNavigate",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#event:afterNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.afterNavigate"
  },
  {
    "description": "The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "kind": "event",
    "since": "1.7.1",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "navigate",
    "longname": "sap.m.App#event:navigate",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#event:navigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.navigate"
  },
  {
    "description": "Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a \"name\". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix \"c_\" or \"_\" for your custom transitions to ensure this.\r</p><p>\r\"to\" and \"back\" are the transition functions for the forward and backward navigation.\rBoth will be called with the following parameters:\r- oFromPage: the Control which is currently being displayed by the NavContainer\r- oToPage: the Control which should be displayed by the NavContainer after the transition\r- fCallback: a function which MUST be called when the transition has completed\r- oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration\r</p><p>\rThe contract for \"to\" and \"back\" is that they may do an animation of their choice, but it should not take \"too long\". At the beginning of the transition the target page \"oToPage\" does have the CSS class \"sapMNavItemHidden\" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.\rAfter the animation the target page \"oToPage\" should cover the entire screen and the source page \"oFromPage\" should not be visible anymore. This page should then have the CSS class \"sapMNavItemHidden\".\rFor adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:\roFromPage.addStyleClass(\"sapMNavItemHidden\");\rWhen the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!\r</p><p>\rHint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a\rsetTimeout(..., 0)\rblock (delayed, but without waiting).\r</p><p>\rThis method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.\r</p><p>\rReturns the sap.m.NavContainer type if called statically, or \"this\" (to allow method chaining) if called on a particular NavContainer instance.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the transition. This name can be used by the application to choose this transition when navigating \"to()\" or \"back()\": the \"transitionName\" parameter of \"NavContainer.to()\" corresponds to this name, the back() navigation will automatically use the same transition.\r</p><p>\rMake sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix \"c_\" or \"_\" for your custom transitions to ensure this.",
        "name": "sName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The function which will be called by the NavContainer when the application navigates \"to()\", using this animation's name. The NavContainer instance is the \"this\" context within the animation function.\r</p><p>\rSee the documentation of NavContainer.addCustomTransitions for more details about this function.",
        "name": "oTo"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The function which will be called by the NavContainer when the application navigates \"back()\" from a page where it had navigated to using this animation's name. The NavContainer instance is the \"this\" context within the animation function.\r</p><p>\rSee the documentation of NavContainer.addCustomTransitions for more details about this function.",
        "name": "oBack"
      }
    ],
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "name": "addCustomTransition",
    "longname": "sap.m.App#addCustomTransition",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#addCustomTransition",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.addCustomTransition"
  },
  {
    "description": "Adds some page <code>oPage</code> \rto the aggregation named <code>pages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page to add; if empty, nothing is inserted",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addPage",
    "longname": "sap.m.App#addPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#addPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.addPage"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.NavContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "attachAfterNavigate",
    "longname": "sap.m.App#attachAfterNavigate",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#attachAfterNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.attachAfterNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.NavContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "attachNavigate",
    "longname": "sap.m.App#attachNavigate",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#attachNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.attachNavigate"
  },
  {
    "description": "Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property. The original \"data\" object from the \"to\" navigation is also available in these event objects.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oTransitionParameters"
      }
    ],
    "since": "1.7.1 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "name": "back",
    "longname": "sap.m.App#back",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#back",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.back"
  },
  {
    "description": "Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property. The original \"data\" object from the \"to\" navigation is also available in these event objects.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the screen to which back navigation should happen. The nearest page with this ID among the previous pages in the history stack will be used.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the \"backToPage\" navigation. The event on the target page will contain this data object as \"backData\" property.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameters"
      }
    ],
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "since": "1.7.2",
    "name": "backToPage",
    "longname": "sap.m.App#backToPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#backToPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.backToPage"
  },
  {
    "description": "Navigates back to the initial/top level (this is the element aggregated as \"initialPage\", or the first added element). If already on the initial page, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the \"backToTop\" navigation. The event on the target page will contain this data object as \"backData\" property.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameters"
      }
    ],
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "since": "1.7.1",
    "name": "backToTop",
    "longname": "sap.m.App#backToTop",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#backToTop",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.backToTop"
  },
  {
    "description": "Destroys all the pages in the aggregation \rnamed <code>pages</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyPages",
    "longname": "sap.m.App#destroyPages",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#destroyPages",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.destroyPages"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "detachAfterNavigate",
    "longname": "sap.m.App#detachAfterNavigate",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#detachAfterNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.detachAfterNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "detachNavigate",
    "longname": "sap.m.App#detachNavigate",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#detachNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.detachNavigate"
  },
  {
    "description": "Fire event afterNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "since": "1.7.1",
    "name": "fireAfterNavigate",
    "longname": "sap.m.App#fireAfterNavigate",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#fireAfterNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.fireAfterNavigate"
  },
  {
    "description": "Fire event navigate to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.\r* \rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "since": "1.7.1",
    "name": "fireNavigate",
    "longname": "sap.m.App#fireNavigate",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#fireNavigate",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.fireNavigate"
  },
  {
    "description": "Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getCurrentPage",
    "longname": "sap.m.App#getCurrentPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getCurrentPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getCurrentPage"
  },
  {
    "description": "Getter for property <code>defaultTransitionName</code>.\rThe type of the transition/animation to apply when \"to()\" is called without defining a transition type to use. The default is \"slide\" on iOS and Android; on Windows Phone the default is \"door\". Other options are: \"fade\", \"flip\" and \"show\" - and the names of any registered custom transitions.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>defaultTransitionName</code>"
      }
    ],
    "since": "1.7.1",
    "name": "getDefaultTransitionName",
    "longname": "sap.m.App#getDefaultTransitionName",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getDefaultTransitionName",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getDefaultTransitionName"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.\r</p><p>\rDefault value is <code>'100%'</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "name": "getHeight",
    "longname": "sap.m.App#getHeight",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getHeight",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getHeight"
  },
  {
    "description": "This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.\rThis value should be set initially and not set/modified while the application is running.\r</p><p>\rThis could be used not only for the initial display, but also if the user wants to navigate \"up to top\", so this page serves as a sort of \"home/root page\".",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialPage</code> association, or null"
      }
    ],
    "name": "getInitialPage",
    "longname": "sap.m.App#getInitialPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getInitialPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getInitialPage"
  },
  {
    "description": "Returns the control with the given ID from the \"pages\" aggregation (if available).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the aggregated control to find.",
        "name": "sId"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getPage",
    "longname": "sap.m.App#getPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getPage"
  },
  {
    "description": "Getter for aggregation <code>pages</code>.<br/>\rThe content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.\r</p><p>\rThese aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getPages",
    "longname": "sap.m.App#getPages",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getPages",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getPages"
  },
  {
    "description": "Returns the previous page (the page from which the user drilled down to the current page with \"to()\").\rNote: this is not the page which the user has seen before, but the page which is the target of the next \"back()\" navigation.\rIf there is no previous page, \"undefined\" is returned.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.7.1",
    "name": "getPreviousPage",
    "longname": "sap.m.App#getPreviousPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getPreviousPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getPreviousPage"
  },
  {
    "description": "Getter for property <code>visible</code>.\rWhether the NavContainer is visible.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.App#getVisible",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getVisible",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.\r</p><p>\rDefault value is <code>'100%'</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.App#getWidth",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#getWidth",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page whose index is looked for.",
        "name": "oPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfPage",
    "longname": "sap.m.App#indexOfPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#indexOfPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.indexOfPage"
  },
  {
    "description": "Inserts a page into the aggregation named <code>pages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the page to insert; if empty, nothing is inserted",
        "name": "oPage"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the page should be inserted at; for \r            a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value \r            greater than the current size of the aggregation, the page is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertPage",
    "longname": "sap.m.App#insertPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#insertPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.insertPage"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>pages</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllPages",
    "longname": "sap.m.App#removeAllPages",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#removeAllPages",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.removeAllPages"
  },
  {
    "description": "Removes an page from the aggregation named <code>pages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the page to remove or its index or id",
        "name": "vPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed page or null"
      }
    ],
    "name": "removePage",
    "longname": "sap.m.App#removePage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#removePage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.removePage"
  },
  {
    "description": "Setter for property <code>defaultTransitionName</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>defaultTransitionName</code>",
        "name": "sDefaultTransitionName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.7.1",
    "name": "setDefaultTransitionName",
    "longname": "sap.m.App#setDefaultTransitionName",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#setDefaultTransitionName",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.setDefaultTransitionName"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is <code>'100%'</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeight",
    "longname": "sap.m.App#setHeight",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#setHeight",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.setHeight"
  },
  {
    "description": "This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.\rThis value should be set initially and not set/modified while the application is running.\r</p><p>\rThis could be used not only for the initial display, but also if the user wants to navigate \"up to top\", so this page serves as a sort of \"home/root page\".",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialPage</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInitialPage",
    "longname": "sap.m.App#setInitialPage",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#setInitialPage",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.setInitialPage"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.App#setVisible",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#setVisible",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>'100%'</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.NavContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.App#setWidth",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#setWidth",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.setWidth"
  },
  {
    "description": "Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.\r</p><p>\rAvailable transitions currently include \"slide\" (default), \"fade\", \"flip\", and \"show\". None of these is currently making use of any given transitionParameters.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the NavContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given data object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The screen to which drilldown should happen. The ID or the control itself can be given.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the transition/animation to apply. This parameter can be omitted; then the default is \"slide\" (horizontal movement from the right).\rOther options are: \"fade\", \"flip\", and \"show\" and the names of any registered custom transitions.\r</p><p>\rNone of the standard transitions is currently making use of any given transition parameters.",
        "name": "sTransitionName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oTransitionParameters"
      }
    ],
    "since": "1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.\r</p><p>\rFor a proper parameter order, the \"data\" parameter must be given when the \"transitionParameters\" parameter is used. (it can be given as \"null\")\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.\rThe \"show\", \"slide\" and \"fade\" transitions do not use any parameter.",
    "type": {
      "names": [
        "sap.m.NavContainer"
      ]
    },
    "name": "to",
    "longname": "sap.m.App#to",
    "kind": "function",
    "memberof": "sap.m.App",
    "scope": "instance",
    "inherits": "sap.m.NavContainer#to",
    "inherited": true,
    "codeName": "sap.m.NavContainer.prototype.to"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.ColumnListItem#event:detailPress",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.ColumnListItem#event:detailTap",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.ColumnListItem#event:press",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.ColumnListItem#event:tap",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.ColumnListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.ColumnListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.ColumnListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.ColumnListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.ColumnListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.ColumnListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.ColumnListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.ColumnListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.ColumnListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.ColumnListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.ColumnListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.ColumnListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.ColumnListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ColumnListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.ColumnListItem#getType",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.ColumnListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ColumnListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.ColumnListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.ColumnListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ColumnListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.ColumnListItem#setType",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.ColumnListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ColumnListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.ColumnListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.CustomListItem#event:detailPress",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.CustomListItem#event:detailTap",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.CustomListItem#event:press",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.CustomListItem#event:tap",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.CustomListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.CustomListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.CustomListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.CustomListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.CustomListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.CustomListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.CustomListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.CustomListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.CustomListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.CustomListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.CustomListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.CustomListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.CustomListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.CustomListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.CustomListItem#getType",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.CustomListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.CustomListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.CustomListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.CustomListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.CustomListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.CustomListItem#setType",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.CustomListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.CustomListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.CustomListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Tap event is raised if the user tap or click to the\rcontrol.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.CustomTile#event:press",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#event:press",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.press"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Tile</code>.<br/> itself. \r</p><p>\rTap event is raised if the user tap or click to the\rcontrol.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.CustomTile#attachPress",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#attachPress",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.attachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.CustomTile#detachPress",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#detachPress",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.detachPress"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.CustomTile#firePress",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#firePress",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.firePress"
  },
  {
    "description": "Getter for property <code>removable</code>.\rDetermines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>removable</code>"
      }
    ],
    "name": "getRemovable",
    "longname": "sap.m.CustomTile#getRemovable",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#getRemovable",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.getRemovable"
  },
  {
    "description": "Setter for property <code>removable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>removable</code>",
        "name": "bRemovable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRemovable",
    "longname": "sap.m.CustomTile#setRemovable",
    "kind": "function",
    "memberof": "sap.m.CustomTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#setRemovable",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.setRemovable"
  },
  {
    "description": "Binder for property <code>value</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindValue",
    "longname": "sap.m.DateTimeInput#bindValue",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#bindValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.bindValue"
  },
  {
    "description": "Getter for property <code>editable</code>.\rControls if a user can change the value.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>editable</code>"
      }
    ],
    "since": "1.12.0",
    "name": "getEditable",
    "longname": "sap.m.DateTimeInput#getEditable",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getEditable",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getEditable"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the control (default is true).\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.DateTimeInput#getEnabled",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getEnabled",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.DateTimeInput#getName",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getName",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getName"
  },
  {
    "description": "Getter for property <code>placeholder</code>.\rtext shown when no value available\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>placeholder</code>"
      }
    ],
    "name": "getPlaceholder",
    "longname": "sap.m.DateTimeInput#getPlaceholder",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getPlaceholder",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getPlaceholder"
  },
  {
    "description": "Getter for property <code>value</code>.\rInput Value\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.DateTimeInput#getValue",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getValue"
  },
  {
    "description": "Getter for property <code>valueState</code>.\rVisualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>valueState</code>"
      }
    ],
    "name": "getValueState",
    "longname": "sap.m.DateTimeInput#getValueState",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getValueState",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getValueState"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible inputs are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.DateTimeInput#getVisible",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the input.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.DateTimeInput#getWidth",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getWidth",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>editable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>editable</code>",
        "name": "bEditable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.0",
    "name": "setEditable",
    "longname": "sap.m.DateTimeInput#setEditable",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setEditable",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setEditable"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.DateTimeInput#setEnabled",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setEnabled",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.DateTimeInput#setName",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setName",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setName"
  },
  {
    "description": "Setter for property <code>placeholder</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>placeholder</code>",
        "name": "sPlaceholder"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlaceholder",
    "longname": "sap.m.DateTimeInput#setPlaceholder",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setPlaceholder",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setPlaceholder"
  },
  {
    "description": "Setter for property <code>valueState</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>valueState</code>",
        "name": "oValueState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValueState",
    "longname": "sap.m.DateTimeInput#setValueState",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setValueState",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setValueState"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.DateTimeInput#setVisible",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setVisible"
  },
  {
    "description": "Unbinder for property <code>value</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindValue",
    "longname": "sap.m.DateTimeInput#unbindValue",
    "kind": "function",
    "memberof": "sap.m.DateTimeInput",
    "scope": "instance",
    "inherits": "sap.m.InputBase#unbindValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.unbindValue"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.DisplayListItem#event:detailPress",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.DisplayListItem#event:detailTap",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.DisplayListItem#event:press",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.DisplayListItem#event:tap",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.DisplayListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.DisplayListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.DisplayListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.DisplayListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.DisplayListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.DisplayListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.DisplayListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.DisplayListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.DisplayListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.DisplayListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.DisplayListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.DisplayListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.DisplayListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.DisplayListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.DisplayListItem#getType",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.DisplayListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.DisplayListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.DisplayListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.DisplayListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.DisplayListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.DisplayListItem#setType",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.DisplayListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.DisplayListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.DisplayListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.FeedListItem#event:detailPress",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.FeedListItem#event:detailTap",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.FeedListItem#event:press",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.FeedListItem#event:tap",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.FeedListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.FeedListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.FeedListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.FeedListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.FeedListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.FeedListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.FeedListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.FeedListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.FeedListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.FeedListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.FeedListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.FeedListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.FeedListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.FeedListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.FeedListItem#getType",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.FeedListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.FeedListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.FeedListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.FeedListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.FeedListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.FeedListItem#setType",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.FeedListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.FeedListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.FeedListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.GroupHeaderListItem#event:detailPress",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.GroupHeaderListItem#event:detailTap",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.GroupHeaderListItem#event:press",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.GroupHeaderListItem#event:tap",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.GroupHeaderListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.GroupHeaderListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.GroupHeaderListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.GroupHeaderListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.GroupHeaderListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.GroupHeaderListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.GroupHeaderListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.GroupHeaderListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.GroupHeaderListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.GroupHeaderListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.GroupHeaderListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.GroupHeaderListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.GroupHeaderListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.GroupHeaderListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.GroupHeaderListItem#getType",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.GroupHeaderListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.GroupHeaderListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.GroupHeaderListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.GroupHeaderListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.GroupHeaderListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.GroupHeaderListItem#setType",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.GroupHeaderListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.GroupHeaderListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.GroupHeaderListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Event is fired when selection is changed by user interaction.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the select.",
        "name": "oControlEvent.getParameters.listItem"
      }
    ],
    "name": "select",
    "longname": "sap.m.List#event:select",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#event:select",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.select"
  },
  {
    "description": "This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the swipe.",
        "name": "oControlEvent.getParameters.listItem"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Given swipeContent control to show on the right hand side of a list item.",
        "name": "oControlEvent.getParameters.swipeContent"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Holds which control caused the swipe event in within the Item.",
        "name": "oControlEvent.getParameters.srcControl"
      }
    ],
    "name": "swipe",
    "longname": "sap.m.List#event:swipe",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#event:swipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.swipe"
  },
  {
    "description": "Adds some headerContent <code>oHeaderContent</code> \rto the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to add; if empty, nothing is inserted",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addHeaderContent",
    "longname": "sap.m.List#addHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#addHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.addHeaderContent"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.List#addItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#addItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when delete icon is pressed by user.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDelete",
    "longname": "sap.m.List#attachDelete",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachDelete"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when selection is changed by user interaction.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.List#attachSelect",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachSelect"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rThis event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSwipe",
    "longname": "sap.m.List#attachSwipe",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachSwipe"
  },
  {
    "description": "Binder for aggregation <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindItems",
    "longname": "sap.m.List#bindItems",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#bindItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.bindItems"
  },
  {
    "description": "Destroys all the headerContent in the aggregation \rnamed <code>headerContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyHeaderContent",
    "longname": "sap.m.List#destroyHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyHeaderContent"
  },
  {
    "description": "Destroys the infoBar in the aggregation \rnamed <code>infoBar</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyInfoBar",
    "longname": "sap.m.List#destroyInfoBar",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyInfoBar"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.List#destroyItems",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyItems"
  },
  {
    "description": "Destroys the swipeContent in the aggregation \rnamed <code>swipeContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySwipeContent",
    "longname": "sap.m.List#destroySwipeContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroySwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroySwipeContent"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDelete",
    "longname": "sap.m.List#detachDelete",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachDelete"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.List#detachSelect",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachSelect"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSwipe",
    "longname": "sap.m.List#detachSwipe",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachSwipe"
  },
  {
    "description": "Fire event delete to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the delete.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDelete",
    "longname": "sap.m.List#fireDelete",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireDelete"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the select.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.List#fireSelect",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireSelect"
  },
  {
    "description": "Fire event swipe to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.\r* \rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>\r<li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>\r<li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in within the Item.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "name": "fireSwipe",
    "longname": "sap.m.List#fireSwipe",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireSwipe"
  },
  {
    "description": "Getter for property <code>footerText</code>.\rFooter Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>footerText</code>"
      }
    ],
    "name": "getFooterText",
    "longname": "sap.m.List#getFooterText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getFooterText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getFooterText"
  },
  {
    "description": "Getter for property <code>growing</code>.\rSets the growing(paging) feature of control.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growing</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowing",
    "longname": "sap.m.List#getGrowing",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowing",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowing"
  },
  {
    "description": "Getter for property <code>growingScrollToLoad</code>.\rIf true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.\rThis property can be used only if \"growing\" property is set \"true\" and if you only have one instance of this control inside the scroll container(e.g Page).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growingScrollToLoad</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingScrollToLoad",
    "longname": "sap.m.List#getGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingScrollToLoad",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingScrollToLoad"
  },
  {
    "description": "Getter for property <code>growingThreshold</code>.\rNumber of items requested from the server. To activate this you should set \"growing\" property to \"true\".\r</p><p>\rDefault value is <code>20</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>growingThreshold</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingThreshold",
    "longname": "sap.m.List#getGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingThreshold",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingThreshold"
  },
  {
    "description": "Getter for property <code>growingTriggerText</code>.\rThis text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text (\"Load More Data\") coming from the message bundle.\rThis property can be used only if \"growing\" property is set \"true\" and scrollToLoad property is set \"false\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>growingTriggerText</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingTriggerText",
    "longname": "sap.m.List#getGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingTriggerText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingTriggerText"
  },
  {
    "description": "Getter for aggregation <code>headerContent</code>.<br/>\rThese items are placed at the end of the header line and can be used for user interactions(e.g. Button).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getHeaderContent",
    "longname": "sap.m.List#getHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderContent"
  },
  {
    "description": "Getter for property <code>headerLevel</code>.\rThe header level following the standard HTML scheme (H1 - H6)\r</p><p>\rDefault value is <code>H4</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "the value of property <code>headerLevel</code>"
      }
    ],
    "name": "getHeaderLevel",
    "longname": "sap.m.List#getHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderLevel",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderLevel"
  },
  {
    "description": "Getter for property <code>headerText</code>.\rHeader Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>headerText</code>"
      }
    ],
    "name": "getHeaderText",
    "longname": "sap.m.List#getHeaderText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderText"
  },
  {
    "description": "Getter for property <code>includeItemInSelection</code>.\rThis property decides if the list item interacts with the selection. If it is \"true\", a tap on the item will set the selection control in front of the list item.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>includeItemInSelection</code>"
      }
    ],
    "name": "getIncludeItemInSelection",
    "longname": "sap.m.List#getIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getIncludeItemInSelection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getIncludeItemInSelection"
  },
  {
    "description": "Getter for aggregation <code>infoBar</code>.<br/>\rInfoBar control is placed below the header and can be used to show extra information to the user.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        }
      }
    ],
    "name": "getInfoBar",
    "longname": "sap.m.List#getInfoBar",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getInfoBar"
  },
  {
    "description": "Getter for property <code>inset</code>.\rInset style false/true\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>inset</code>"
      }
    ],
    "name": "getInset",
    "longname": "sap.m.List#getInset",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getInset",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getInset"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rThe items of this list or rows of the table",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.List#getItems",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getItems"
  },
  {
    "description": "Getter for property <code>mode</code>.\rMode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "the value of property <code>mode</code>"
      }
    ],
    "name": "getMode",
    "longname": "sap.m.List#getMode",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getMode",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getMode"
  },
  {
    "description": "Getter for property <code>modeAnimationOn</code>.\rDefines if animations will be shown when activating or deactivating selection modes.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>modeAnimationOn</code>"
      }
    ],
    "name": "getModeAnimationOn",
    "longname": "sap.m.List#getModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getModeAnimationOn",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getModeAnimationOn"
  },
  {
    "description": "Getter for property <code>noDataText</code>.\rThis text is displayed when the control has no data.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>noDataText</code>"
      }
    ],
    "name": "getNoDataText",
    "longname": "sap.m.List#getNoDataText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getNoDataText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getNoDataText"
  },
  {
    "description": "Returns selected list item. When no item is selected, \"null\" is returned. When multi-selection is enabled and multiple items are selected, only the up-most selected item is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSelectedItem",
    "longname": "sap.m.List#getSelectedItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSelectedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSelectedItem"
  },
  {
    "description": "Returns an array containing the selected list items. If no items are selected, an empty array is returned.",
    "type": {
      "names": [
        "Array.<sap.m.ListItemBase>"
      ]
    },
    "name": "getSelectedItems",
    "longname": "sap.m.List#getSelectedItems",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSelectedItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSelectedItems"
  },
  {
    "description": "Getter for property <code>showNoData</code>.\rEnables an information text(see \"noDataText\" property) when the control has no data.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showNoData</code>"
      }
    ],
    "name": "getShowNoData",
    "longname": "sap.m.List#getShowNoData",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowNoData",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowNoData"
  },
  {
    "description": "Getter for property <code>showSeparators</code>.\rDefines which separator style will be used.\r</p><p>\rDefault value is <code>All</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "the value of property <code>showSeparators</code>"
      }
    ],
    "name": "getShowSeparators",
    "longname": "sap.m.List#getShowSeparators",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowSeparators",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowSeparators"
  },
  {
    "description": "Getter for property <code>showUnread</code>.\rActivates the unread feature for all items.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showUnread</code>"
      }
    ],
    "name": "getShowUnread",
    "longname": "sap.m.List#getShowUnread",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowUnread",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowUnread"
  },
  {
    "description": "Getter for aggregation <code>swipeContent</code>.<br/>\rUser can swipe to bring in this control on the right hand side of a list item.\rNote: This functionality gets disabled for non-touch devices.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getSwipeContent",
    "longname": "sap.m.List#getSwipeContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipeContent"
  },
  {
    "description": "Getter for property <code>swipeDirection</code>.\rDirection of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.\r</p><p>\rDefault value is <code>Both</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "the value of property <code>swipeDirection</code>"
      }
    ],
    "name": "getSwipeDirection",
    "longname": "sap.m.List#getSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipeDirection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipeDirection"
  },
  {
    "description": "Returns swiped list item. When no item is swiped, \"null\" is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSwipedItem",
    "longname": "sap.m.List#getSwipedItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipedItem"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible controls are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.List#getVisible",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rSets the width of the list.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.List#getWidth",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getWidth",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent whose index is looked for.",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfHeaderContent",
    "longname": "sap.m.List#indexOfHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#indexOfHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.indexOfHeaderContent"
  },
  {
    "description": "Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.List#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#indexOfItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.indexOfItem"
  },
  {
    "description": "Inserts a headerContent into the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to insert; if empty, nothing is inserted",
        "name": "oHeaderContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the headerContent should be inserted at; for \r            a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value \r            greater than the current size of the aggregation, the headerContent is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertHeaderContent",
    "longname": "sap.m.List#insertHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#insertHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.insertHeaderContent"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.List#insertItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#insertItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>headerContent</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllHeaderContent",
    "longname": "sap.m.List#removeAllHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeAllHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeAllHeaderContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.List#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeAllItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeAllItems"
  },
  {
    "description": "Removes an headerContent from the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to remove or its index or id",
        "name": "vHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed headerContent or null"
      }
    ],
    "name": "removeHeaderContent",
    "longname": "sap.m.List#removeHeaderContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeHeaderContent"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.List#removeItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeItem"
  },
  {
    "description": "Removes all selections of the current selection mode. Applies to the modes \"SingleSelect\", \"MultiSelect\", and \"Delete\".",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "removeSelections",
    "longname": "sap.m.List#removeSelections",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeSelections",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeSelections"
  },
  {
    "description": "Select all items in \"MultiSelection\" mode.",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "since": "1.16",
    "name": "selectAll",
    "longname": "sap.m.List#selectAll",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#selectAll",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.selectAll"
  },
  {
    "description": "Setter for property <code>footerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>footerText</code>",
        "name": "sFooterText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooterText",
    "longname": "sap.m.List#setFooterText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setFooterText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setFooterText"
  },
  {
    "description": "Setter for property <code>growing</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growing</code>",
        "name": "bGrowing"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowing",
    "longname": "sap.m.List#setGrowing",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowing",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowing"
  },
  {
    "description": "Setter for property <code>growingScrollToLoad</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growingScrollToLoad</code>",
        "name": "bGrowingScrollToLoad"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingScrollToLoad",
    "longname": "sap.m.List#setGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingScrollToLoad",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingScrollToLoad"
  },
  {
    "description": "Setter for property <code>growingThreshold</code>.\r</p><p>\rDefault value is <code>20</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>growingThreshold</code>",
        "name": "iGrowingThreshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingThreshold",
    "longname": "sap.m.List#setGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingThreshold",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingThreshold"
  },
  {
    "description": "Setter for property <code>growingTriggerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>growingTriggerText</code>",
        "name": "sGrowingTriggerText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingTriggerText",
    "longname": "sap.m.List#setGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingTriggerText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingTriggerText"
  },
  {
    "description": "Setter for property <code>headerLevel</code>.\r</p><p>\rDefault value is <code>H4</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "new value for property <code>headerLevel</code>",
        "name": "oHeaderLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderLevel",
    "longname": "sap.m.List#setHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setHeaderLevel",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setHeaderLevel"
  },
  {
    "description": "Setter for property <code>headerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>headerText</code>",
        "name": "sHeaderText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderText",
    "longname": "sap.m.List#setHeaderText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setHeaderText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setHeaderText"
  },
  {
    "description": "Setter for property <code>includeItemInSelection</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>includeItemInSelection</code>",
        "name": "bIncludeItemInSelection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIncludeItemInSelection",
    "longname": "sap.m.List#setIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setIncludeItemInSelection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setIncludeItemInSelection"
  },
  {
    "description": "Setter for the aggregated <code>infoBar</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "name": "oInfoBar"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfoBar",
    "longname": "sap.m.List#setInfoBar",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setInfoBar"
  },
  {
    "description": "Setter for property <code>inset</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>inset</code>",
        "name": "bInset"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInset",
    "longname": "sap.m.List#setInset",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setInset",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setInset"
  },
  {
    "description": "Setter for property <code>mode</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "new value for property <code>mode</code>",
        "name": "oMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMode",
    "longname": "sap.m.List#setMode",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setMode",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setMode"
  },
  {
    "description": "Setter for property <code>modeAnimationOn</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>modeAnimationOn</code>",
        "name": "bModeAnimationOn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setModeAnimationOn",
    "longname": "sap.m.List#setModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setModeAnimationOn",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setModeAnimationOn"
  },
  {
    "description": "Setter for property <code>noDataText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>noDataText</code>",
        "name": "sNoDataText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNoDataText",
    "longname": "sap.m.List#setNoDataText",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setNoDataText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setNoDataText"
  },
  {
    "description": "Sets a list item to be selected. In single mode the method removes the previous selection.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The list item to be selected.",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "setSelectedItem",
    "longname": "sap.m.List#setSelectedItem",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSelectedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSelectedItem"
  },
  {
    "description": "Sets a list item to be selected by id. In single mode the method removes the previous selection.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the list item to be selected.",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "setSelectedItemById",
    "longname": "sap.m.List#setSelectedItemById",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSelectedItemById",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSelectedItemById"
  },
  {
    "description": "Setter for property <code>showNoData</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showNoData</code>",
        "name": "bShowNoData"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowNoData",
    "longname": "sap.m.List#setShowNoData",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowNoData",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowNoData"
  },
  {
    "description": "Setter for property <code>showSeparators</code>.\r</p><p>\rDefault value is <code>All</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "new value for property <code>showSeparators</code>",
        "name": "oShowSeparators"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowSeparators",
    "longname": "sap.m.List#setShowSeparators",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowSeparators",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowSeparators"
  },
  {
    "description": "Setter for property <code>showUnread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showUnread</code>",
        "name": "bShowUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowUnread",
    "longname": "sap.m.List#setShowUnread",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowUnread",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowUnread"
  },
  {
    "description": "Setter for the aggregated <code>swipeContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oSwipeContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeContent",
    "longname": "sap.m.List#setSwipeContent",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSwipeContent"
  },
  {
    "description": "Setter for property <code>swipeDirection</code>.\r</p><p>\rDefault value is <code>Both</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "new value for property <code>swipeDirection</code>",
        "name": "oSwipeDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeDirection",
    "longname": "sap.m.List#setSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSwipeDirection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSwipeDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.List#setVisible",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.List#setWidth",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setWidth",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setWidth"
  },
  {
    "description": "After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.\rNOTE: If user try to tap inside of the list but outside of the swipeContent then control hides automatically.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.",
        "name": "oCallback"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "swipeOut",
    "longname": "sap.m.List#swipeOut",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#swipeOut",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.swipeOut"
  },
  {
    "description": "Unbinder for aggregation <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindItems",
    "longname": "sap.m.List#unbindItems",
    "kind": "function",
    "memberof": "sap.m.List",
    "scope": "instance",
    "inherits": "sap.m.ListBase#unbindItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.unbindItems"
  },
  {
    "description": "Adds some column <code>oColumn</code> \rto the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column to add; if empty, nothing is inserted",
        "name": "oColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "addColumn",
    "longname": "sap.m.GrowingList#addColumn",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#addColumn",
    "inherited": true,
    "codeName": "sap.m.List.prototype.addColumn"
  },
  {
    "description": "Destroys all the columns in the aggregation \rnamed <code>columns</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "destroyColumns",
    "longname": "sap.m.GrowingList#destroyColumns",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#destroyColumns",
    "inherited": true,
    "codeName": "sap.m.List.prototype.destroyColumns"
  },
  {
    "description": "Getter for property <code>backgroundDesign</code>.\rThis property is used to set the background color of the list. Depending on the theme you can change the state of the background from \"Solid\" over \"Translucent\" to \"Transparent\".\r</p><p>\rDefault value is <code>Solid</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.BackgroundDesign"
          ]
        },
        "description": "the value of property <code>backgroundDesign</code>"
      }
    ],
    "since": "1.14",
    "name": "getBackgroundDesign",
    "longname": "sap.m.GrowingList#getBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#getBackgroundDesign",
    "inherited": true,
    "codeName": "sap.m.List.prototype.getBackgroundDesign"
  },
  {
    "description": "Getter for aggregation <code>columns</code>.<br/>\rColumns",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Column>"
          ]
        }
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "getColumns",
    "longname": "sap.m.GrowingList#getColumns",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#getColumns",
    "inherited": true,
    "codeName": "sap.m.List.prototype.getColumns"
  },
  {
    "description": "Getter for property <code>headerDesign</code>.\rList header style. Possible vales are \"Standard\" and \"Plain\"\r</p><p>\rDefault value is <code>Standard</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListHeaderDesign"
          ]
        },
        "description": "the value of property <code>headerDesign</code>"
      }
    ],
    "since": "1.14",
    "name": "getHeaderDesign",
    "longname": "sap.m.GrowingList#getHeaderDesign",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#getHeaderDesign",
    "inherited": true,
    "codeName": "sap.m.List.prototype.getHeaderDesign"
  },
  {
    "description": "Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column whose index is looked for.",
        "name": "oColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "indexOfColumn",
    "longname": "sap.m.GrowingList#indexOfColumn",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#indexOfColumn",
    "inherited": true,
    "codeName": "sap.m.List.prototype.indexOfColumn"
  },
  {
    "description": "Inserts a column into the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the column to insert; if empty, nothing is inserted",
        "name": "oColumn"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the column should be inserted at; for \r            a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value \r            greater than the current size of the aggregation, the column is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "insertColumn",
    "longname": "sap.m.GrowingList#insertColumn",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#insertColumn",
    "inherited": true,
    "codeName": "sap.m.List.prototype.insertColumn"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>columns</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.Column>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "removeAllColumns",
    "longname": "sap.m.GrowingList#removeAllColumns",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#removeAllColumns",
    "inherited": true,
    "codeName": "sap.m.List.prototype.removeAllColumns"
  },
  {
    "description": "Removes an column from the aggregation named <code>columns</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.Column"
          ]
        },
        "description": "the column to remove or its index or id",
        "name": "vColumn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Column"
          ]
        },
        "description": "the removed column or null"
      }
    ],
    "deprecated": "Since version 1.16. \rUse Table control instead.",
    "name": "removeColumn",
    "longname": "sap.m.GrowingList#removeColumn",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#removeColumn",
    "inherited": true,
    "codeName": "sap.m.List.prototype.removeColumn"
  },
  {
    "description": "Setter for property <code>backgroundDesign</code>.\r</p><p>\rDefault value is <code>Solid</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.BackgroundDesign"
          ]
        },
        "description": "new value for property <code>backgroundDesign</code>",
        "name": "oBackgroundDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.14",
    "name": "setBackgroundDesign",
    "longname": "sap.m.GrowingList#setBackgroundDesign",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#setBackgroundDesign",
    "inherited": true,
    "codeName": "sap.m.List.prototype.setBackgroundDesign"
  },
  {
    "description": "Setter for property <code>headerDesign</code>.\r</p><p>\rDefault value is <code>Standard</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListHeaderDesign"
          ]
        },
        "description": "new value for property <code>headerDesign</code>",
        "name": "oHeaderDesign"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.List"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.14",
    "name": "setHeaderDesign",
    "longname": "sap.m.GrowingList#setHeaderDesign",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.List#setHeaderDesign",
    "inherited": true,
    "codeName": "sap.m.List.prototype.setHeaderDesign"
  },
  {
    "description": "Event is fired when selection is changed by user interaction.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the select.",
        "name": "oControlEvent.getParameters.listItem"
      }
    ],
    "name": "select",
    "longname": "sap.m.GrowingList#event:select",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#event:select",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.select"
  },
  {
    "description": "This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the swipe.",
        "name": "oControlEvent.getParameters.listItem"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Given swipeContent control to show on the right hand side of a list item.",
        "name": "oControlEvent.getParameters.swipeContent"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Holds which control caused the swipe event in within the Item.",
        "name": "oControlEvent.getParameters.srcControl"
      }
    ],
    "name": "swipe",
    "longname": "sap.m.GrowingList#event:swipe",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#event:swipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.swipe"
  },
  {
    "description": "Adds some headerContent <code>oHeaderContent</code> \rto the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to add; if empty, nothing is inserted",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addHeaderContent",
    "longname": "sap.m.GrowingList#addHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#addHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.addHeaderContent"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.GrowingList#addItem",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#addItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when delete icon is pressed by user.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDelete",
    "longname": "sap.m.GrowingList#attachDelete",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachDelete"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when selection is changed by user interaction.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.GrowingList#attachSelect",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachSelect"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rThis event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSwipe",
    "longname": "sap.m.GrowingList#attachSwipe",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachSwipe"
  },
  {
    "description": "Binder for aggregation <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindItems",
    "longname": "sap.m.GrowingList#bindItems",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#bindItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.bindItems"
  },
  {
    "description": "Destroys all the headerContent in the aggregation \rnamed <code>headerContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyHeaderContent",
    "longname": "sap.m.GrowingList#destroyHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyHeaderContent"
  },
  {
    "description": "Destroys the infoBar in the aggregation \rnamed <code>infoBar</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyInfoBar",
    "longname": "sap.m.GrowingList#destroyInfoBar",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyInfoBar"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.GrowingList#destroyItems",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyItems"
  },
  {
    "description": "Destroys the swipeContent in the aggregation \rnamed <code>swipeContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySwipeContent",
    "longname": "sap.m.GrowingList#destroySwipeContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroySwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroySwipeContent"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDelete",
    "longname": "sap.m.GrowingList#detachDelete",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachDelete"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.GrowingList#detachSelect",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachSelect"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSwipe",
    "longname": "sap.m.GrowingList#detachSwipe",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachSwipe"
  },
  {
    "description": "Fire event delete to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the delete.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDelete",
    "longname": "sap.m.GrowingList#fireDelete",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireDelete"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the select.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.GrowingList#fireSelect",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireSelect"
  },
  {
    "description": "Fire event swipe to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.\r* \rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>\r<li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>\r<li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in within the Item.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "name": "fireSwipe",
    "longname": "sap.m.GrowingList#fireSwipe",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireSwipe"
  },
  {
    "description": "Getter for property <code>footerText</code>.\rFooter Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>footerText</code>"
      }
    ],
    "name": "getFooterText",
    "longname": "sap.m.GrowingList#getFooterText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getFooterText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getFooterText"
  },
  {
    "description": "Getter for property <code>growing</code>.\rSets the growing(paging) feature of control.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growing</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowing",
    "longname": "sap.m.GrowingList#getGrowing",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowing",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowing"
  },
  {
    "description": "Getter for property <code>growingScrollToLoad</code>.\rIf true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.\rThis property can be used only if \"growing\" property is set \"true\" and if you only have one instance of this control inside the scroll container(e.g Page).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growingScrollToLoad</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingScrollToLoad",
    "longname": "sap.m.GrowingList#getGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingScrollToLoad",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingScrollToLoad"
  },
  {
    "description": "Getter for property <code>growingThreshold</code>.\rNumber of items requested from the server. To activate this you should set \"growing\" property to \"true\".\r</p><p>\rDefault value is <code>20</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>growingThreshold</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingThreshold",
    "longname": "sap.m.GrowingList#getGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingThreshold",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingThreshold"
  },
  {
    "description": "Getter for property <code>growingTriggerText</code>.\rThis text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text (\"Load More Data\") coming from the message bundle.\rThis property can be used only if \"growing\" property is set \"true\" and scrollToLoad property is set \"false\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>growingTriggerText</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingTriggerText",
    "longname": "sap.m.GrowingList#getGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingTriggerText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingTriggerText"
  },
  {
    "description": "Getter for aggregation <code>headerContent</code>.<br/>\rThese items are placed at the end of the header line and can be used for user interactions(e.g. Button).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getHeaderContent",
    "longname": "sap.m.GrowingList#getHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderContent"
  },
  {
    "description": "Getter for property <code>headerLevel</code>.\rThe header level following the standard HTML scheme (H1 - H6)\r</p><p>\rDefault value is <code>H4</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "the value of property <code>headerLevel</code>"
      }
    ],
    "name": "getHeaderLevel",
    "longname": "sap.m.GrowingList#getHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderLevel",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderLevel"
  },
  {
    "description": "Getter for property <code>headerText</code>.\rHeader Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>headerText</code>"
      }
    ],
    "name": "getHeaderText",
    "longname": "sap.m.GrowingList#getHeaderText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderText"
  },
  {
    "description": "Getter for property <code>includeItemInSelection</code>.\rThis property decides if the list item interacts with the selection. If it is \"true\", a tap on the item will set the selection control in front of the list item.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>includeItemInSelection</code>"
      }
    ],
    "name": "getIncludeItemInSelection",
    "longname": "sap.m.GrowingList#getIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getIncludeItemInSelection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getIncludeItemInSelection"
  },
  {
    "description": "Getter for aggregation <code>infoBar</code>.<br/>\rInfoBar control is placed below the header and can be used to show extra information to the user.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        }
      }
    ],
    "name": "getInfoBar",
    "longname": "sap.m.GrowingList#getInfoBar",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getInfoBar"
  },
  {
    "description": "Getter for property <code>inset</code>.\rInset style false/true\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>inset</code>"
      }
    ],
    "name": "getInset",
    "longname": "sap.m.GrowingList#getInset",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getInset",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getInset"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rThe items of this list or rows of the table",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.GrowingList#getItems",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getItems"
  },
  {
    "description": "Getter for property <code>mode</code>.\rMode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "the value of property <code>mode</code>"
      }
    ],
    "name": "getMode",
    "longname": "sap.m.GrowingList#getMode",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getMode",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getMode"
  },
  {
    "description": "Getter for property <code>modeAnimationOn</code>.\rDefines if animations will be shown when activating or deactivating selection modes.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>modeAnimationOn</code>"
      }
    ],
    "name": "getModeAnimationOn",
    "longname": "sap.m.GrowingList#getModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getModeAnimationOn",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getModeAnimationOn"
  },
  {
    "description": "Getter for property <code>noDataText</code>.\rThis text is displayed when the control has no data.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>noDataText</code>"
      }
    ],
    "name": "getNoDataText",
    "longname": "sap.m.GrowingList#getNoDataText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getNoDataText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getNoDataText"
  },
  {
    "description": "Returns selected list item. When no item is selected, \"null\" is returned. When multi-selection is enabled and multiple items are selected, only the up-most selected item is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSelectedItem",
    "longname": "sap.m.GrowingList#getSelectedItem",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSelectedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSelectedItem"
  },
  {
    "description": "Returns an array containing the selected list items. If no items are selected, an empty array is returned.",
    "type": {
      "names": [
        "Array.<sap.m.ListItemBase>"
      ]
    },
    "name": "getSelectedItems",
    "longname": "sap.m.GrowingList#getSelectedItems",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSelectedItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSelectedItems"
  },
  {
    "description": "Getter for property <code>showNoData</code>.\rEnables an information text(see \"noDataText\" property) when the control has no data.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showNoData</code>"
      }
    ],
    "name": "getShowNoData",
    "longname": "sap.m.GrowingList#getShowNoData",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowNoData",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowNoData"
  },
  {
    "description": "Getter for property <code>showSeparators</code>.\rDefines which separator style will be used.\r</p><p>\rDefault value is <code>All</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "the value of property <code>showSeparators</code>"
      }
    ],
    "name": "getShowSeparators",
    "longname": "sap.m.GrowingList#getShowSeparators",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowSeparators",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowSeparators"
  },
  {
    "description": "Getter for property <code>showUnread</code>.\rActivates the unread feature for all items.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showUnread</code>"
      }
    ],
    "name": "getShowUnread",
    "longname": "sap.m.GrowingList#getShowUnread",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowUnread",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowUnread"
  },
  {
    "description": "Getter for aggregation <code>swipeContent</code>.<br/>\rUser can swipe to bring in this control on the right hand side of a list item.\rNote: This functionality gets disabled for non-touch devices.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getSwipeContent",
    "longname": "sap.m.GrowingList#getSwipeContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipeContent"
  },
  {
    "description": "Getter for property <code>swipeDirection</code>.\rDirection of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.\r</p><p>\rDefault value is <code>Both</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "the value of property <code>swipeDirection</code>"
      }
    ],
    "name": "getSwipeDirection",
    "longname": "sap.m.GrowingList#getSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipeDirection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipeDirection"
  },
  {
    "description": "Returns swiped list item. When no item is swiped, \"null\" is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSwipedItem",
    "longname": "sap.m.GrowingList#getSwipedItem",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipedItem"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible controls are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.GrowingList#getVisible",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rSets the width of the list.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.GrowingList#getWidth",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getWidth",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent whose index is looked for.",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfHeaderContent",
    "longname": "sap.m.GrowingList#indexOfHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#indexOfHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.indexOfHeaderContent"
  },
  {
    "description": "Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.GrowingList#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#indexOfItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.indexOfItem"
  },
  {
    "description": "Inserts a headerContent into the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to insert; if empty, nothing is inserted",
        "name": "oHeaderContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the headerContent should be inserted at; for \r            a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value \r            greater than the current size of the aggregation, the headerContent is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertHeaderContent",
    "longname": "sap.m.GrowingList#insertHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#insertHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.insertHeaderContent"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.GrowingList#insertItem",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#insertItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>headerContent</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllHeaderContent",
    "longname": "sap.m.GrowingList#removeAllHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeAllHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeAllHeaderContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.GrowingList#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeAllItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeAllItems"
  },
  {
    "description": "Removes an headerContent from the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to remove or its index or id",
        "name": "vHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed headerContent or null"
      }
    ],
    "name": "removeHeaderContent",
    "longname": "sap.m.GrowingList#removeHeaderContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeHeaderContent"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.GrowingList#removeItem",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeItem"
  },
  {
    "description": "Removes all selections of the current selection mode. Applies to the modes \"SingleSelect\", \"MultiSelect\", and \"Delete\".",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "removeSelections",
    "longname": "sap.m.GrowingList#removeSelections",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeSelections",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeSelections"
  },
  {
    "inherits": "sap.m.ListBase#selectAll",
    "since": "1.16",
    "description": "Select all items in \"MultiSelection\" mode.",
    "name": "selectAll",
    "inherited": true,
    "longname": "sap.m.GrowingList#selectAll",
    "kind": "function",
    "scope": "instance",
    "memberof": "sap.m.GrowingList",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "codeName": "sap.m.ListBase.prototype.selectAll"
  },
  {
    "description": "Setter for property <code>footerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>footerText</code>",
        "name": "sFooterText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooterText",
    "longname": "sap.m.GrowingList#setFooterText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setFooterText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setFooterText"
  },
  {
    "description": "Setter for property <code>growing</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growing</code>",
        "name": "bGrowing"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowing",
    "longname": "sap.m.GrowingList#setGrowing",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowing",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowing"
  },
  {
    "description": "Setter for property <code>growingScrollToLoad</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growingScrollToLoad</code>",
        "name": "bGrowingScrollToLoad"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingScrollToLoad",
    "longname": "sap.m.GrowingList#setGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingScrollToLoad",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingScrollToLoad"
  },
  {
    "description": "Setter for property <code>growingThreshold</code>.\r</p><p>\rDefault value is <code>20</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>growingThreshold</code>",
        "name": "iGrowingThreshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingThreshold",
    "longname": "sap.m.GrowingList#setGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingThreshold",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingThreshold"
  },
  {
    "description": "Setter for property <code>growingTriggerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>growingTriggerText</code>",
        "name": "sGrowingTriggerText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingTriggerText",
    "longname": "sap.m.GrowingList#setGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingTriggerText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingTriggerText"
  },
  {
    "description": "Setter for property <code>headerLevel</code>.\r</p><p>\rDefault value is <code>H4</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "new value for property <code>headerLevel</code>",
        "name": "oHeaderLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderLevel",
    "longname": "sap.m.GrowingList#setHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setHeaderLevel",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setHeaderLevel"
  },
  {
    "description": "Setter for property <code>headerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>headerText</code>",
        "name": "sHeaderText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderText",
    "longname": "sap.m.GrowingList#setHeaderText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setHeaderText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setHeaderText"
  },
  {
    "description": "Setter for property <code>includeItemInSelection</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>includeItemInSelection</code>",
        "name": "bIncludeItemInSelection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIncludeItemInSelection",
    "longname": "sap.m.GrowingList#setIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setIncludeItemInSelection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setIncludeItemInSelection"
  },
  {
    "description": "Setter for the aggregated <code>infoBar</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "name": "oInfoBar"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfoBar",
    "longname": "sap.m.GrowingList#setInfoBar",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setInfoBar"
  },
  {
    "description": "Setter for property <code>inset</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>inset</code>",
        "name": "bInset"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInset",
    "longname": "sap.m.GrowingList#setInset",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setInset",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setInset"
  },
  {
    "description": "Setter for property <code>mode</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "new value for property <code>mode</code>",
        "name": "oMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMode",
    "longname": "sap.m.GrowingList#setMode",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setMode",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setMode"
  },
  {
    "description": "Setter for property <code>modeAnimationOn</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>modeAnimationOn</code>",
        "name": "bModeAnimationOn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setModeAnimationOn",
    "longname": "sap.m.GrowingList#setModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setModeAnimationOn",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setModeAnimationOn"
  },
  {
    "description": "Setter for property <code>noDataText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>noDataText</code>",
        "name": "sNoDataText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNoDataText",
    "longname": "sap.m.GrowingList#setNoDataText",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setNoDataText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setNoDataText"
  },
  {
    "inherits": "sap.m.ListBase#setSelectedItem",
    "description": "Sets a list item to be selected. In single mode the method removes the previous selection.",
    "name": "setSelectedItem",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The list item to be selected.",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "inherited": true,
    "longname": "sap.m.GrowingList#setSelectedItem",
    "kind": "function",
    "scope": "instance",
    "memberof": "sap.m.GrowingList",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "codeName": "sap.m.ListBase.prototype.setSelectedItem"
  },
  {
    "inherits": "sap.m.ListBase#setSelectedItemById",
    "description": "Sets a list item to be selected by id. In single mode the method removes the previous selection.",
    "name": "setSelectedItemById",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the list item to be selected.",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "inherited": true,
    "longname": "sap.m.GrowingList#setSelectedItemById",
    "kind": "function",
    "scope": "instance",
    "memberof": "sap.m.GrowingList",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "codeName": "sap.m.ListBase.prototype.setSelectedItemById"
  },
  {
    "description": "Setter for property <code>showNoData</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showNoData</code>",
        "name": "bShowNoData"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowNoData",
    "longname": "sap.m.GrowingList#setShowNoData",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowNoData",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowNoData"
  },
  {
    "description": "Setter for property <code>showSeparators</code>.\r</p><p>\rDefault value is <code>All</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "new value for property <code>showSeparators</code>",
        "name": "oShowSeparators"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowSeparators",
    "longname": "sap.m.GrowingList#setShowSeparators",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowSeparators",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowSeparators"
  },
  {
    "description": "Setter for property <code>showUnread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showUnread</code>",
        "name": "bShowUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowUnread",
    "longname": "sap.m.GrowingList#setShowUnread",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowUnread",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowUnread"
  },
  {
    "description": "Setter for the aggregated <code>swipeContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oSwipeContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeContent",
    "longname": "sap.m.GrowingList#setSwipeContent",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSwipeContent"
  },
  {
    "description": "Setter for property <code>swipeDirection</code>.\r</p><p>\rDefault value is <code>Both</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "new value for property <code>swipeDirection</code>",
        "name": "oSwipeDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeDirection",
    "longname": "sap.m.GrowingList#setSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSwipeDirection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSwipeDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.GrowingList#setVisible",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.GrowingList#setWidth",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setWidth",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setWidth"
  },
  {
    "inherits": "sap.m.ListBase#swipeOut",
    "description": "After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.\rNOTE: If user try to tap inside of the list but outside of the swipeContent then control hides automatically.",
    "name": "swipeOut",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.",
        "name": "oCallback"
      }
    ],
    "inherited": true,
    "longname": "sap.m.GrowingList#swipeOut",
    "kind": "function",
    "scope": "instance",
    "memberof": "sap.m.GrowingList",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "codeName": "sap.m.ListBase.prototype.swipeOut"
  },
  {
    "description": "Unbinder for aggregation <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindItems",
    "longname": "sap.m.GrowingList#unbindItems",
    "kind": "function",
    "memberof": "sap.m.GrowingList",
    "scope": "instance",
    "inherits": "sap.m.ListBase#unbindItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.unbindItems"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.HBox#addItem",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#addItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.addItem"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.HBox#destroyItems",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#destroyItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.destroyItems"
  },
  {
    "description": "Getter for property <code>alignItems</code>.\rDetermines the layout behavior of items along the cross-axis. \"Baseline\" is not supported in Internet Explorer <10.\r</p><p>\rDefault value is <code>Stretch</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignItems"
          ]
        },
        "description": "the value of property <code>alignItems</code>"
      }
    ],
    "name": "getAlignItems",
    "longname": "sap.m.HBox#getAlignItems",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getAlignItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getAlignItems"
  },
  {
    "description": "Getter for property <code>direction</code>.\rDetermines the direction of the layout of child elements\r</p><p>\rDefault value is <code>Row</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexDirection"
          ]
        },
        "description": "the value of property <code>direction</code>"
      }
    ],
    "name": "getDirection",
    "longname": "sap.m.HBox#getDirection",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getDirection",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getDirection"
  },
  {
    "description": "Getter for property <code>displayInline</code>.\rDetermines whether the flexbox is in block or inline mode\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>displayInline</code>"
      }
    ],
    "name": "getDisplayInline",
    "longname": "sap.m.HBox#getDisplayInline",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getDisplayInline",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getDisplayInline"
  },
  {
    "description": "Getter for property <code>fitContainer</code>.\rDetermines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>fitContainer</code>"
      }
    ],
    "name": "getFitContainer",
    "longname": "sap.m.HBox#getFitContainer",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getFitContainer",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getFitContainer"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "since": "1.9.1",
    "name": "getHeight",
    "longname": "sap.m.HBox#getHeight",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getHeight",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getHeight"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rFlex items within the FlexBox layout",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.HBox#getItems",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getItems"
  },
  {
    "description": "Getter for property <code>justifyContent</code>.\rDetermines the layout behavior along the main axis. \"SpaceAround\" is currently not supported in most non-Webkit browsers.\r</p><p>\rDefault value is <code>Start</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexJustifyContent"
          ]
        },
        "description": "the value of property <code>justifyContent</code>"
      }
    ],
    "name": "getJustifyContent",
    "longname": "sap.m.HBox#getJustifyContent",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getJustifyContent",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getJustifyContent"
  },
  {
    "description": "Getter for property <code>renderType</code>.\rDetermines whether the layout is rendered as a series of divs or as an unordered list (ul)\r</p><p>\rDefault value is <code>Div</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexRendertype"
          ]
        },
        "description": "the value of property <code>renderType</code>"
      }
    ],
    "name": "getRenderType",
    "longname": "sap.m.HBox#getRenderType",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getRenderType",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getRenderType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rIs the control visible\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.HBox#getVisible",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getVisible",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "since": "1.9.1",
    "name": "getWidth",
    "longname": "sap.m.HBox#getWidth",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getWidth",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.HBox#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#indexOfItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.HBox#insertItem",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#insertItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.HBox#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#removeAllItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.HBox#removeItem",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#removeItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.removeItem"
  },
  {
    "description": "Setter for property <code>alignItems</code>.\r</p><p>\rDefault value is <code>Stretch</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignItems"
          ]
        },
        "description": "new value for property <code>alignItems</code>",
        "name": "oAlignItems"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAlignItems",
    "longname": "sap.m.HBox#setAlignItems",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setAlignItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setAlignItems"
  },
  {
    "description": "Setter for property <code>direction</code>.\r</p><p>\rDefault value is <code>Row</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexDirection"
          ]
        },
        "description": "new value for property <code>direction</code>",
        "name": "oDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDirection",
    "longname": "sap.m.HBox#setDirection",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setDirection",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setDirection"
  },
  {
    "description": "Setter for property <code>displayInline</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>displayInline</code>",
        "name": "bDisplayInline"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDisplayInline",
    "longname": "sap.m.HBox#setDisplayInline",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setDisplayInline",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setDisplayInline"
  },
  {
    "description": "Setter for property <code>fitContainer</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>fitContainer</code>",
        "name": "bFitContainer"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFitContainer",
    "longname": "sap.m.HBox#setFitContainer",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setFitContainer",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setFitContainer"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "setHeight",
    "longname": "sap.m.HBox#setHeight",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setHeight",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>justifyContent</code>.\r</p><p>\rDefault value is <code>Start</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexJustifyContent"
          ]
        },
        "description": "new value for property <code>justifyContent</code>",
        "name": "oJustifyContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setJustifyContent",
    "longname": "sap.m.HBox#setJustifyContent",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setJustifyContent",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setJustifyContent"
  },
  {
    "description": "Setter for property <code>renderType</code>.\r</p><p>\rDefault value is <code>Div</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexRendertype"
          ]
        },
        "description": "new value for property <code>renderType</code>",
        "name": "oRenderType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRenderType",
    "longname": "sap.m.HBox#setRenderType",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setRenderType",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setRenderType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.HBox#setVisible",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setVisible",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "setWidth",
    "longname": "sap.m.HBox#setWidth",
    "kind": "function",
    "memberof": "sap.m.HBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setWidth",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setWidth"
  },
  {
    "description": "This event gets fired when the input operation has finished and the value has changed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The new value of the input",
        "name": "oControlEvent.getParameters.newValue"
      }
    ],
    "name": "change",
    "longname": "sap.m.Input#event:change",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#event:change",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.change"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.InputBase</code>.<br/> itself. \r</p><p>\rThis event gets fired when the input operation has finished and the value has changed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.Input#attachChange",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#attachChange",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.attachChange"
  },
  {
    "description": "Binder for property <code>value</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindValue",
    "longname": "sap.m.Input#bindValue",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#bindValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.bindValue"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.Input#detachChange",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#detachChange",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.detachChange"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'newValue' of type <code>string</code> The new value of the input</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.Input#fireChange",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#fireChange",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.fireChange"
  },
  {
    "description": "Getter for property <code>editable</code>.\rControls if a user can change the value.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>editable</code>"
      }
    ],
    "since": "1.12.0",
    "name": "getEditable",
    "longname": "sap.m.Input#getEditable",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getEditable",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getEditable"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the control (default is true).\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.Input#getEnabled",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getEnabled",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.Input#getName",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getName",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getName"
  },
  {
    "description": "Getter for property <code>placeholder</code>.\rtext shown when no value available\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>placeholder</code>"
      }
    ],
    "name": "getPlaceholder",
    "longname": "sap.m.Input#getPlaceholder",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getPlaceholder",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getPlaceholder"
  },
  {
    "description": "Getter for property <code>value</code>.\rInput Value\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.Input#getValue",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getValue"
  },
  {
    "description": "Getter for property <code>valueState</code>.\rVisualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>valueState</code>"
      }
    ],
    "name": "getValueState",
    "longname": "sap.m.Input#getValueState",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getValueState",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getValueState"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible inputs are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Input#getVisible",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the input.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Input#getWidth",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getWidth",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>editable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>editable</code>",
        "name": "bEditable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.0",
    "name": "setEditable",
    "longname": "sap.m.Input#setEditable",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setEditable",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setEditable"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.Input#setEnabled",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setEnabled",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.Input#setName",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setName",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setName"
  },
  {
    "description": "Setter for property <code>placeholder</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>placeholder</code>",
        "name": "sPlaceholder"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlaceholder",
    "longname": "sap.m.Input#setPlaceholder",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setPlaceholder",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setPlaceholder"
  },
  {
    "description": "Setter for property <code>value</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>value</code>",
        "name": "sValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValue",
    "longname": "sap.m.Input#setValue",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setValue"
  },
  {
    "description": "Setter for property <code>valueState</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>valueState</code>",
        "name": "oValueState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValueState",
    "longname": "sap.m.Input#setValueState",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setValueState",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setValueState"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Input#setVisible",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setVisible"
  },
  {
    "description": "Unbinder for property <code>value</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindValue",
    "longname": "sap.m.Input#unbindValue",
    "kind": "function",
    "memberof": "sap.m.Input",
    "scope": "instance",
    "inherits": "sap.m.InputBase#unbindValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.unbindValue"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.InputListItem#event:detailPress",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.InputListItem#event:detailTap",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.InputListItem#event:press",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.InputListItem#event:tap",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.InputListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.InputListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.InputListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.InputListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.InputListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.InputListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.InputListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.InputListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.InputListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.InputListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.InputListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.InputListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.InputListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.InputListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.InputListItem#getType",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.InputListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.InputListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.InputListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.InputListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.InputListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.InputListItem#setType",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.InputListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.InputListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.InputListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.ObjectListItem#event:detailPress",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.ObjectListItem#event:detailTap",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.ObjectListItem#event:press",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.ObjectListItem#event:tap",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.ObjectListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.ObjectListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.ObjectListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.ObjectListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.ObjectListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.ObjectListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.ObjectListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.ObjectListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.ObjectListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.ObjectListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.ObjectListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.ObjectListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.ObjectListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ObjectListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.ObjectListItem#getType",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.ObjectListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.ObjectListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.ObjectListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.ObjectListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ObjectListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.ObjectListItem#setType",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.ObjectListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.ObjectListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.ObjectListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether was a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "afterDetailNavigate",
    "longname": "sap.m.SplitApp#event:afterDetailNavigate",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:afterDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.afterDetailNavigate"
  },
  {
    "description": "This event is fired when the master area is fully closed after the animation when there is.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterMasterClose",
    "longname": "sap.m.SplitApp#event:afterMasterClose",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:afterMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.afterMasterClose"
  },
  {
    "description": "The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which had been shown before navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which is now shown after navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether was a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "afterMasterNavigate",
    "longname": "sap.m.SplitApp#event:afterMasterNavigate",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:afterMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.afterMasterNavigate"
  },
  {
    "description": "This event is fired when the master area is fully opened after animation if there is.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "afterMasterOpen",
    "longname": "sap.m.SplitApp#event:afterMasterOpen",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:afterMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.afterMasterOpen"
  },
  {
    "description": "This event is fired before the master area is closed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeMasterClose",
    "longname": "sap.m.SplitApp#event:beforeMasterClose",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:beforeMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.beforeMasterClose"
  },
  {
    "description": "This event is fired before the master area is opened.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "beforeMasterOpen",
    "longname": "sap.m.SplitApp#event:beforeMasterOpen",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:beforeMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.beforeMasterOpen"
  },
  {
    "description": "The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "detailNavigate",
    "longname": "sap.m.SplitApp#event:detailNavigate",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:detailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detailNavigate"
  },
  {
    "description": "Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "masterButton",
    "longname": "sap.m.SplitApp#event:masterButton",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:masterButton",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.masterButton"
  },
  {
    "description": "The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.from"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which was shown before the current navigation.",
        "name": "oControlEvent.getParameters.fromId"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the page which will be shown after the current navigation.",
        "name": "oControlEvent.getParameters.toId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.",
        "name": "oControlEvent.getParameters.firstTime"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a forward navigation, triggered by \"to()\".",
        "name": "oControlEvent.getParameters.isTo"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a back navigation, triggered by \"back()\".",
        "name": "oControlEvent.getParameters.isBack"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this is a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToTop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether this was a navigation to the root page, triggered by \"backToTop()\".",
        "name": "oControlEvent.getParameters.isBackToPage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".",
        "name": "oControlEvent.getParameters.direction"
      }
    ],
    "name": "masterNavigate",
    "longname": "sap.m.SplitApp#event:masterNavigate",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#event:masterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.masterNavigate"
  },
  {
    "description": "Adds some detailPage <code>oDetailPage</code> \rto the aggregation named <code>detailPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage to add; if empty, nothing is inserted",
        "name": "oDetailPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addDetailPage",
    "longname": "sap.m.SplitApp#addDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#addDetailPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.addDetailPage"
  },
  {
    "description": "Adds some masterPage <code>oMasterPage</code> \rto the aggregation named <code>masterPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage to add; if empty, nothing is inserted",
        "name": "oMasterPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addMasterPage",
    "longname": "sap.m.SplitApp#addMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#addMasterPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.addMasterPage"
  },
  {
    "description": "Add a content entity either to master area or detail area depending on the master parameter.\r</p><p>\rThis method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.",
        "name": "oPage"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "States if the page should be added to the master area. If it's set to false, the page is added to detail area.",
        "name": "bMaster"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "since": "1.11.1",
    "name": "addPage",
    "longname": "sap.m.SplitApp#addPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#addPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.addPage"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterDetailNavigate",
    "longname": "sap.m.SplitApp#attachAfterDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachAfterDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachAfterDetailNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired when the master area is fully closed after the animation when there is.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterMasterClose",
    "longname": "sap.m.SplitApp#attachAfterMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachAfterMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachAfterMasterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the \"navigate\" event.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterMasterNavigate",
    "longname": "sap.m.SplitApp#attachAfterMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachAfterMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachAfterMasterNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired when the master area is fully opened after animation if there is.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachAfterMasterOpen",
    "longname": "sap.m.SplitApp#attachAfterMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachAfterMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachAfterMasterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired before the master area is closed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeMasterClose",
    "longname": "sap.m.SplitApp#attachBeforeMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachBeforeMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachBeforeMasterClose"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThis event is fired before the master area is opened.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachBeforeMasterOpen",
    "longname": "sap.m.SplitApp#attachBeforeMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachBeforeMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachBeforeMasterOpen"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailNavigate",
    "longname": "sap.m.SplitApp#attachDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachDetailNavigate"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rEvent gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachMasterButton",
    "longname": "sap.m.SplitApp#attachMasterButton",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachMasterButton",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachMasterButton"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.SplitContainer</code>.<br/> itself. \r</p><p>\rThe event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.\rThis event can be aborted by the application with preventDefault(), which means that there will be no navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachMasterNavigate",
    "longname": "sap.m.SplitApp#attachMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#attachMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.attachMasterNavigate"
  },
  {
    "description": "navigate back within DetailView",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "backDetail",
    "longname": "sap.m.SplitApp#backDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#backDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.backDetail"
  },
  {
    "description": "navigate back within MasterView",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "backMaster",
    "longname": "sap.m.SplitApp#backMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#backMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.backMaster"
  },
  {
    "description": "Navigates back to the nearest previous page in the SplitContainer history with the given ID. If there is no such page among the previous pages, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.\r</p><p>\rCalling this navigation method triggers first the (cancelable) \"navigate\" event on the SplitContainer, then the \"beforeHide\" pseudo event on the source page and \"beforeFirstShow\" (if applicable) and\"beforeShow\" on the target page. Later - after the transition has completed - the \"afterShow\" pseudo event is triggered on the target page and \"afterHide\" on the page which has been left. The given backData object is available in the \"beforeFirstShow\", \"beforeShow\" and \"afterShow\" event object as \"data\" property. The original \"data\" object from the \"to\" navigation is also available in these event objects.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The screen to which drilldown should happen. The ID or the control itself can be given.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameters"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "since": "1.10.0",
    "name": "backToPage",
    "longname": "sap.m.SplitApp#backToPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#backToPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.backToPage"
  },
  {
    "description": "Navigates back to the initial/top level of Detail (this is the element aggregated as \"initialPage\", or the first added element). If already on the initial page, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "backToTopDetail",
    "longname": "sap.m.SplitApp#backToTopDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#backToTopDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.backToTopDetail"
  },
  {
    "description": "Navigates back to the initial/top level of Master (this is the element aggregated as \"initialPage\", or the first added element). If already on the initial page, nothing happens.\rThe transition effect which had been used to get to the current page is inverted and used for this navigation.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as \"backData\" property. (The original data from the \"to()\" navigation will still be available as \"data\" property.)\r</p><p>\rIn scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\rFor back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oBackData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.\rThe animation type can NOT be selected here - it is always the inverse of the \"to\" navigation.\r</p><p>\rIn order to use the \"transitionParameters\" property, the \"data\" property must be used (at least \"null\" must be given) for a proper parameter order.\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "backToTopMaster",
    "longname": "sap.m.SplitApp#backToTopMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#backToTopMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.backToTopMaster"
  },
  {
    "description": "Destroys all the detailPages in the aggregation \rnamed <code>detailPages</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyDetailPages",
    "longname": "sap.m.SplitApp#destroyDetailPages",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#destroyDetailPages",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.destroyDetailPages"
  },
  {
    "description": "Destroys all the masterPages in the aggregation \rnamed <code>masterPages</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyMasterPages",
    "longname": "sap.m.SplitApp#destroyMasterPages",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#destroyMasterPages",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.destroyMasterPages"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterDetailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterDetailNavigate",
    "longname": "sap.m.SplitApp#detachAfterDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachAfterDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachAfterDetailNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterMasterClose",
    "longname": "sap.m.SplitApp#detachAfterMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachAfterMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachAfterMasterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterMasterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterMasterNavigate",
    "longname": "sap.m.SplitApp#detachAfterMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachAfterMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachAfterMasterNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'afterMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachAfterMasterOpen",
    "longname": "sap.m.SplitApp#detachAfterMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachAfterMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachAfterMasterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeMasterClose' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeMasterClose",
    "longname": "sap.m.SplitApp#detachBeforeMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachBeforeMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachBeforeMasterClose"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'beforeMasterOpen' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachBeforeMasterOpen",
    "longname": "sap.m.SplitApp#detachBeforeMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachBeforeMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachBeforeMasterOpen"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailNavigate",
    "longname": "sap.m.SplitApp#detachDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachDetailNavigate"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'masterButton' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachMasterButton",
    "longname": "sap.m.SplitApp#detachMasterButton",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachMasterButton",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachMasterButton"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'masterNavigate' event of this <code>sap.m.SplitContainer</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachMasterNavigate",
    "longname": "sap.m.SplitApp#detachMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#detachMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.detachMasterNavigate"
  },
  {
    "description": "Fire event afterDetailNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterDetailNavigate",
    "longname": "sap.m.SplitApp#fireAfterDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireAfterDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireAfterDetailNavigate"
  },
  {
    "description": "Fire event afterMasterClose to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterMasterClose",
    "longname": "sap.m.SplitApp#fireAfterMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireAfterMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireAfterMasterClose"
  },
  {
    "description": "Fire event afterMasterNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterMasterNavigate",
    "longname": "sap.m.SplitApp#fireAfterMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireAfterMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireAfterMasterNavigate"
  },
  {
    "description": "Fire event afterMasterOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireAfterMasterOpen",
    "longname": "sap.m.SplitApp#fireAfterMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireAfterMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireAfterMasterOpen"
  },
  {
    "description": "Fire event beforeMasterClose to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeMasterClose",
    "longname": "sap.m.SplitApp#fireBeforeMasterClose",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireBeforeMasterClose",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireBeforeMasterClose"
  },
  {
    "description": "Fire event beforeMasterOpen to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireBeforeMasterOpen",
    "longname": "sap.m.SplitApp#fireBeforeMasterOpen",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireBeforeMasterOpen",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireBeforeMasterOpen"
  },
  {
    "description": "Fire event detailNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailNavigate",
    "longname": "sap.m.SplitApp#fireDetailNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireDetailNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireDetailNavigate"
  },
  {
    "description": "Fire event masterButton to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireMasterButton",
    "longname": "sap.m.SplitApp#fireMasterButton",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireMasterButton",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireMasterButton"
  },
  {
    "description": "Fire event masterNavigate to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>\r<li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>\r<li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>\r<li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>\r<li>'firstTime' of type <code>boolean</code> Whether the \"to\" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>\r<li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by \"to()\".</li>\r<li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by \"back()\".</li>\r<li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by \"backToTop()\".</li>\r<li>'direction' of type <code>string</code> How the navigation was triggered, possible values are \"to\", \"back\", and \"backToTop\".</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireMasterNavigate",
    "longname": "sap.m.SplitApp#fireMasterNavigate",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#fireMasterNavigate",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.fireMasterNavigate"
  },
  {
    "description": "Getter for property <code>backgroundColor</code>.\rBackground color of the SplitContainer. If set, this color will override the default background defined by the theme. So this should only be set when really required.\rAny configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>backgroundColor</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundColor",
    "longname": "sap.m.SplitApp#getBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getBackgroundColor",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundColor"
  },
  {
    "description": "Getter for property <code>backgroundImage</code>.\rBackground image of the SplitContainer. If set, this image will override the default background defined by the theme. So this should only be set when really required.\rThis background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.\rUse the \"backgroundRepeat\" property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "the value of property <code>backgroundImage</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundImage",
    "longname": "sap.m.SplitApp#getBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getBackgroundImage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundImage"
  },
  {
    "description": "Getter for property <code>backgroundOpacity</code>.\rOpacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).\rThis can be used to make the application content better readable by making the background image partly transparent.\r</p><p>\rDefault value is <code>1</code>",
    "returns": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "the value of property <code>backgroundOpacity</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundOpacity",
    "longname": "sap.m.SplitApp#getBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getBackgroundOpacity",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundOpacity"
  },
  {
    "description": "Getter for property <code>backgroundRepeat</code>.\rWhether the background image (if configured) should be proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>backgroundRepeat</code>"
      }
    ],
    "since": "1.11.2",
    "name": "getBackgroundRepeat",
    "longname": "sap.m.SplitApp#getBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getBackgroundRepeat",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getBackgroundRepeat"
  },
  {
    "description": "Returns the current shown detail page.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getCurrentDetailPage",
    "longname": "sap.m.SplitApp#getCurrentDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getCurrentDetailPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getCurrentDetailPage"
  },
  {
    "description": "Returns the current shown master page.",
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "name": "getCurrentMasterPage",
    "longname": "sap.m.SplitApp#getCurrentMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getCurrentMasterPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getCurrentMasterPage"
  },
  {
    "description": "Returns the current shown page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned. Otherwise the current page in detail area is returned.\r</p><p>\rThis method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.",
        "name": "bMaster"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getCurrentPage",
    "longname": "sap.m.SplitApp#getCurrentPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getCurrentPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getCurrentPage"
  },
  {
    "description": "Getter for property <code>defaultTransitionNameDetail</code>.\rThe type of the transition/animation to apply when \"to()\" is called without defining the transition to use. The default is \"slide\", other options are: \"fade\" and \"show\" and the names of any registered custom transitions.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>defaultTransitionNameDetail</code>"
      }
    ],
    "name": "getDefaultTransitionNameDetail",
    "longname": "sap.m.SplitApp#getDefaultTransitionNameDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getDefaultTransitionNameDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getDefaultTransitionNameDetail"
  },
  {
    "description": "Getter for property <code>defaultTransitionNameMaster</code>.\rThe type of the transition/animation to apply when \"to()\" is called without defining the transition to use. The default is \"slide\", other options are: \"fade\" and \"show\" and the names of any registered custom transitions.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>defaultTransitionNameMaster</code>"
      }
    ],
    "name": "getDefaultTransitionNameMaster",
    "longname": "sap.m.SplitApp#getDefaultTransitionNameMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getDefaultTransitionNameMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getDefaultTransitionNameMaster"
  },
  {
    "description": "Returns the page with the given id in detail area. If there's no page that has the given id, null is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the page that needs to be fetched.",
        "name": "sId"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getDetailPage",
    "longname": "sap.m.SplitApp#getDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getDetailPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getDetailPage"
  },
  {
    "description": "Getter for aggregation <code>detailPages</code>.<br/>\rThe content entities between which this SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.\r</p><p>\rThese aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getDetailPages",
    "longname": "sap.m.SplitApp#getDetailPages",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getDetailPages",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getDetailPages"
  },
  {
    "description": "Sets the initial detail page, which is shown on application launch.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialDetail</code> association, or null"
      }
    ],
    "name": "getInitialDetail",
    "longname": "sap.m.SplitApp#getInitialDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getInitialDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getInitialDetail"
  },
  {
    "description": "Sets the initial master page, which is shown on application launch.",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the element which is the current target of the <code>initialMaster</code> association, or null"
      }
    ],
    "name": "getInitialMaster",
    "longname": "sap.m.SplitApp#getInitialMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getInitialMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getInitialMaster"
  },
  {
    "description": "Getter for property <code>masterButtonText</code>.\rThis is the text shown in master button which has a default value \"Navigation\". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.\r</p><p>\rThe master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitContainer manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>masterButtonText</code>"
      }
    ],
    "name": "getMasterButtonText",
    "longname": "sap.m.SplitApp#getMasterButtonText",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getMasterButtonText",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getMasterButtonText"
  },
  {
    "description": "Returns the page with the given id in master area. If there's no page that has the given id, null is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the page that needs to be fetched.",
        "name": "sId"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getMasterPage",
    "longname": "sap.m.SplitApp#getMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getMasterPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getMasterPage"
  },
  {
    "description": "Getter for aggregation <code>masterPages</code>.<br/>\rThe content entities between which this SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.\r</p><p>\rThese aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getMasterPages",
    "longname": "sap.m.SplitApp#getMasterPages",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getMasterPages",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getMasterPages"
  },
  {
    "description": "Getter for property <code>mode</code>.\rThis mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode\r</p><p>\rDefault value is <code>ShowHideMode</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitAppMode"
          ]
        },
        "description": "the value of property <code>mode</code>"
      }
    ],
    "name": "getMode",
    "longname": "sap.m.SplitApp#getMode",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getMode",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getMode"
  },
  {
    "description": "Returns the page with the given id from either master area or detail area depending on the master parameter. If there's no page that has the given id, null is returned.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the page that needs to be fetched.",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "If the page with given id should be fetched from the master area. If it's set to false, the page will be fetched from detail area.",
        "name": "bMaster"
      }
    ],
    "type": {
      "names": [
        "sap.ui.core.Control"
      ]
    },
    "since": "1.11.1",
    "name": "getPage",
    "longname": "sap.m.SplitApp#getPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#getPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.getPage"
  },
  {
    "description": "When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.",
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "hideMaster",
    "longname": "sap.m.SplitApp#hideMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#hideMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.hideMaster"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>detailPages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage whose index is looked for.",
        "name": "oDetailPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfDetailPage",
    "longname": "sap.m.SplitApp#indexOfDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#indexOfDetailPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.indexOfDetailPage"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>masterPages</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage whose index is looked for.",
        "name": "oMasterPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfMasterPage",
    "longname": "sap.m.SplitApp#indexOfMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#indexOfMasterPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.indexOfMasterPage"
  },
  {
    "description": "Inserts a detailPage into the aggregation named <code>detailPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage to insert; if empty, nothing is inserted",
        "name": "oDetailPage"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the detailPage should be inserted at; for \r            a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value \r            greater than the current size of the aggregation, the detailPage is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertDetailPage",
    "longname": "sap.m.SplitApp#insertDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#insertDetailPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.insertDetailPage"
  },
  {
    "description": "Inserts a masterPage into the aggregation named <code>masterPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage to insert; if empty, nothing is inserted",
        "name": "oMasterPage"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the masterPage should be inserted at; for \r            a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value \r            greater than the current size of the aggregation, the masterPage is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertMasterPage",
    "longname": "sap.m.SplitApp#insertMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#insertMasterPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.insertMasterPage"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>detailPages</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllDetailPages",
    "longname": "sap.m.SplitApp#removeAllDetailPages",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#removeAllDetailPages",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.removeAllDetailPages"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>masterPages</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllMasterPages",
    "longname": "sap.m.SplitApp#removeAllMasterPages",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#removeAllMasterPages",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.removeAllMasterPages"
  },
  {
    "description": "Removes an detailPage from the aggregation named <code>detailPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the detailPage to remove or its index or id",
        "name": "vDetailPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed detailPage or null"
      }
    ],
    "name": "removeDetailPage",
    "longname": "sap.m.SplitApp#removeDetailPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#removeDetailPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.removeDetailPage"
  },
  {
    "description": "Removes an masterPage from the aggregation named <code>masterPages</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the masterPage to remove or its index or id",
        "name": "vMasterPage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed masterPage or null"
      }
    ],
    "name": "removeMasterPage",
    "longname": "sap.m.SplitApp#removeMasterPage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#removeMasterPage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.removeMasterPage"
  },
  {
    "description": "Setter for property <code>backgroundColor</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>backgroundColor</code>",
        "name": "sBackgroundColor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundColor",
    "longname": "sap.m.SplitApp#setBackgroundColor",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setBackgroundColor",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundColor"
  },
  {
    "description": "Setter for property <code>backgroundImage</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.URI"
          ]
        },
        "description": "new value for property <code>backgroundImage</code>",
        "name": "sBackgroundImage"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundImage",
    "longname": "sap.m.SplitApp#setBackgroundImage",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setBackgroundImage",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundImage"
  },
  {
    "description": "Setter for property <code>backgroundOpacity</code>.\r</p><p>\rDefault value is <code>1</code>",
    "params": [
      {
        "type": {
          "names": [
            "float"
          ]
        },
        "description": "new value for property <code>backgroundOpacity</code>",
        "name": "fBackgroundOpacity"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundOpacity",
    "longname": "sap.m.SplitApp#setBackgroundOpacity",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setBackgroundOpacity",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundOpacity"
  },
  {
    "description": "Setter for property <code>backgroundRepeat</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>backgroundRepeat</code>",
        "name": "bBackgroundRepeat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.11.2",
    "name": "setBackgroundRepeat",
    "longname": "sap.m.SplitApp#setBackgroundRepeat",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setBackgroundRepeat",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setBackgroundRepeat"
  },
  {
    "description": "Setter for property <code>defaultTransitionNameDetail</code>.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>defaultTransitionNameDetail</code>",
        "name": "sDefaultTransitionNameDetail"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDefaultTransitionNameDetail",
    "longname": "sap.m.SplitApp#setDefaultTransitionNameDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setDefaultTransitionNameDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setDefaultTransitionNameDetail"
  },
  {
    "description": "Setter for property <code>defaultTransitionNameMaster</code>.\r</p><p>\rDefault value is <code>\"slide\"</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>defaultTransitionNameMaster</code>",
        "name": "sDefaultTransitionNameMaster"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDefaultTransitionNameMaster",
    "longname": "sap.m.SplitApp#setDefaultTransitionNameMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setDefaultTransitionNameMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setDefaultTransitionNameMaster"
  },
  {
    "description": "Sets the initial detail page, which is shown on application launch.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "Id of an element which becomes the new target of this <code>initialDetail</code> association.\r   Alternatively, an element instance may be given.",
        "name": "vInitialDetail"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInitialDetail",
    "longname": "sap.m.SplitApp#setInitialDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setInitialDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setInitialDetail"
  },
  {
    "description": "Setter for property <code>masterButtonText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>masterButtonText</code>",
        "name": "sMasterButtonText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMasterButtonText",
    "longname": "sap.m.SplitApp#setMasterButtonText",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setMasterButtonText",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setMasterButtonText"
  },
  {
    "description": "Setter for property <code>mode</code>.\r</p><p>\rDefault value is <code>ShowHideMode</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SplitAppMode"
          ]
        },
        "description": "new value for property <code>mode</code>",
        "name": "oMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SplitContainer"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMode",
    "longname": "sap.m.SplitApp#setMode",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#setMode",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.setMode"
  },
  {
    "description": "When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.",
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "showMaster",
    "longname": "sap.m.SplitApp#showMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#showMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.showMaster"
  },
  {
    "description": "navigate to given detail page",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the transition/animation to apply. This parameter can be omitted; then the default is \"slide\" (horizontal movement from the right).\rOther options are: \"fade\", \"flip\", and \"show\" and the names of any registered custom transitions.\r</p><p>\rNone of the standard transitions is currently making use of any given transition parameters.",
        "name": "sTransitionName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can carry any payload data which should be made available to the target page. The \"beforeShow\" event on the target page will contain this data object as \"data\" property.\r</p><p>\rUse case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.\r</p><p>\rWhen the \"transitionParameters\" object is used, this \"data\" object must also be given (either as object or as null) in order to have a proper parameter order.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.\r</p><p>\rFor a proper parameter order, the \"data\" parameter must be given when the \"transitionParameters\" parameter is used. (it can be given as \"null\")\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.\rThe \"show\", \"slide\" and \"fade\" transitions do not use any parameter.",
        "name": "oTransitionParameter"
      }
    ],
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "toDetail",
    "longname": "sap.m.SplitApp#toDetail",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#toDetail",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.toDetail"
  },
  {
    "description": "navigate to given master page",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The screen to which drilldown should happen. The ID or the control itself can be given.",
        "name": "sPageId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the transition/animation to apply. This parameter can be omitted; then the default is \"slide\" (horizontal movement from the right).\rOther options are: \"fade\", \"flip\", and \"show\" and the names of any registered custom transitions.\r</p><p>\rNone of the standard transitions is currently making use of any given transition parameters.",
        "name": "sTransitionName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oTransitionParameters"
      }
    ],
    "since": "1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.\r</p><p>\rFor a proper parameter order, the \"data\" parameter must be given when the \"transitionParameters\" parameter is used. (it can be given as \"null\")\r</p><p>\rNOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.\rThe \"show\", \"slide\" and \"fade\" transitions do not use any parameter.",
    "type": {
      "names": [
        "sap.m.SplitContainer"
      ]
    },
    "name": "toMaster",
    "longname": "sap.m.SplitApp#toMaster",
    "kind": "function",
    "memberof": "sap.m.SplitApp",
    "scope": "instance",
    "inherits": "sap.m.SplitContainer#toMaster",
    "inherited": true,
    "codeName": "sap.m.SplitContainer.prototype.toMaster"
  },
  {
    "description": "Event is fired when the user clicks on the detail button of the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailPress",
    "longname": "sap.m.StandardListItem#event:detailPress",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailPress"
  },
  {
    "description": "detail tap event (This event is deprecated, use the detailPress event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "detailTap",
    "longname": "sap.m.StandardListItem#event:detailTap",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:detailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detailTap"
  },
  {
    "description": "Event is fired when the user clicks on the control.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.StandardListItem#event:press",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:press",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.press"
  },
  {
    "description": "tap event (This event is deprecated, use the press event instead)",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "tap",
    "longname": "sap.m.StandardListItem#event:tap",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#event:tap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.tap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the detail button of the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailPress",
    "longname": "sap.m.StandardListItem#attachDetailPress",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rdetail tap event (This event is deprecated, use the detailPress event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDetailTap",
    "longname": "sap.m.StandardListItem#attachDetailTap",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachDetailTap"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rEvent is fired when the user clicks on the control.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.StandardListItem#attachPress",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachPress"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. \r</p><p>\rtap event (This event is deprecated, use the press event instead)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachTap",
    "longname": "sap.m.StandardListItem#attachTap",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#attachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.attachTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailPress",
    "longname": "sap.m.StandardListItem#detachDetailPress",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDetailTap",
    "longname": "sap.m.StandardListItem#detachDetailTap",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachDetailTap"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.StandardListItem#detachPress",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachTap",
    "longname": "sap.m.StandardListItem#detachTap",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#detachTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.detachTap"
  },
  {
    "description": "Fire event detailPress to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailPress",
    "longname": "sap.m.StandardListItem#fireDetailPress",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailPress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailPress"
  },
  {
    "description": "Fire event detailTap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDetailTap",
    "longname": "sap.m.StandardListItem#fireDetailTap",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireDetailTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireDetailTap"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.StandardListItem#firePress",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#firePress",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.firePress"
  },
  {
    "description": "Fire event tap to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireTap",
    "longname": "sap.m.StandardListItem#fireTap",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#fireTap",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.fireTap"
  },
  {
    "description": "Getter for property <code>counter</code>.\rProperty sets a counter bubble with the integer given.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>counter</code>"
      }
    ],
    "name": "getCounter",
    "longname": "sap.m.StandardListItem#getCounter",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getCounter"
  },
  {
    "description": "Getter for property <code>selected</code>.\rThis property defines the select state of the list item when using single/Multi-Selection\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.StandardListItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getSelected"
  },
  {
    "description": "Getter for property <code>type</code>.\rType of the list item, defines the behaviour\r</p><p>\rDefault value is <code>Inactive</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "the value of property <code>type</code>"
      }
    ],
    "name": "getType",
    "longname": "sap.m.StandardListItem#getType",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getType"
  },
  {
    "description": "Getter for property <code>unread</code>.\rIf the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>unread</code>"
      }
    ],
    "name": "getUnread",
    "longname": "sap.m.StandardListItem#getUnread",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getUnread"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible list items are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.StandardListItem#getVisible",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.getVisible"
  },
  {
    "description": "returns the state of the item selection as a boolean",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "deprecated": "Since version 7.20.0. \rAPI Change makes this method unnecessary",
    "name": "isSelected",
    "longname": "sap.m.StandardListItem#isSelected",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#isSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.isSelected"
  },
  {
    "description": "Setter for property <code>counter</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>counter</code>",
        "name": "iCounter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setCounter",
    "longname": "sap.m.StandardListItem#setCounter",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setCounter",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setCounter"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.StandardListItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setSelected",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setSelected"
  },
  {
    "description": "Setter for property <code>type</code>.\r</p><p>\rDefault value is <code>Inactive</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListType"
          ]
        },
        "description": "new value for property <code>type</code>",
        "name": "oType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setType",
    "longname": "sap.m.StandardListItem#setType",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setType",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setType"
  },
  {
    "description": "Setter for property <code>unread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>unread</code>",
        "name": "bUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setUnread",
    "longname": "sap.m.StandardListItem#setUnread",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setUnread",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setUnread"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.StandardListItem#setVisible",
    "kind": "function",
    "memberof": "sap.m.StandardListItem",
    "scope": "instance",
    "inherits": "sap.m.ListItemBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListItemBase.prototype.setVisible"
  },
  {
    "description": "Tap event is raised if the user tap or click to the\rcontrol.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      }
    ],
    "name": "press",
    "longname": "sap.m.StandardTile#event:press",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#event:press",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.press"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.Tile</code>.<br/> itself. \r</p><p>\rTap event is raised if the user tap or click to the\rcontrol.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachPress",
    "longname": "sap.m.StandardTile#attachPress",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#attachPress",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.attachPress"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachPress",
    "longname": "sap.m.StandardTile#detachPress",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#detachPress",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.detachPress"
  },
  {
    "description": "Fire event press to attached listeners.",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "firePress",
    "longname": "sap.m.StandardTile#firePress",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#firePress",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.firePress"
  },
  {
    "description": "Getter for property <code>removable</code>.\rDetermines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>removable</code>"
      }
    ],
    "name": "getRemovable",
    "longname": "sap.m.StandardTile#getRemovable",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#getRemovable",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.getRemovable"
  },
  {
    "description": "Setter for property <code>removable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>removable</code>",
        "name": "bRemovable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.Tile"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRemovable",
    "longname": "sap.m.StandardTile#setRemovable",
    "kind": "function",
    "memberof": "sap.m.StandardTile",
    "scope": "instance",
    "inherits": "sap.m.Tile#setRemovable",
    "inherited": true,
    "codeName": "sap.m.Tile.prototype.setRemovable"
  },
  {
    "description": "Event is fired when selection is changed by user interaction.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the select.",
        "name": "oControlEvent.getParameters.listItem"
      }
    ],
    "name": "select",
    "longname": "sap.m.Table#event:select",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#event:select",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.select"
  },
  {
    "description": "This event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The listitem which fired the swipe.",
        "name": "oControlEvent.getParameters.listItem"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Given swipeContent control to show on the right hand side of a list item.",
        "name": "oControlEvent.getParameters.swipeContent"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "Holds which control caused the swipe event in within the Item.",
        "name": "oControlEvent.getParameters.srcControl"
      }
    ],
    "name": "swipe",
    "longname": "sap.m.Table#event:swipe",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#event:swipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.swipe"
  },
  {
    "description": "Adds some headerContent <code>oHeaderContent</code> \rto the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to add; if empty, nothing is inserted",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addHeaderContent",
    "longname": "sap.m.Table#addHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#addHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.addHeaderContent"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.Table#addItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#addItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.addItem"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when delete icon is pressed by user.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachDelete",
    "longname": "sap.m.Table#attachDelete",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachDelete"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rEvent is fired when selection is changed by user interaction.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSelect",
    "longname": "sap.m.Table#attachSelect",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachSelect"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.ListBase</code>.<br/> itself. \r</p><p>\rThis event is fired when a user swipes to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachSwipe",
    "longname": "sap.m.Table#attachSwipe",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#attachSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.attachSwipe"
  },
  {
    "description": "Binder for aggregation <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a list in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "sap.ui.core.Element"
          ]
        },
        "description": "the control template for this aggregation",
        "name": "oTemplate"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.Sorter"
          ]
        },
        "description": "the initial sort order (optional)",
        "name": "oSorter"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "the predefined filters for this aggregation (optional)",
        "name": "aFilters"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindItems",
    "longname": "sap.m.Table#bindItems",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#bindItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.bindItems"
  },
  {
    "description": "Destroys all the headerContent in the aggregation \rnamed <code>headerContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyHeaderContent",
    "longname": "sap.m.Table#destroyHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyHeaderContent"
  },
  {
    "description": "Destroys the infoBar in the aggregation \rnamed <code>infoBar</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyInfoBar",
    "longname": "sap.m.Table#destroyInfoBar",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyInfoBar"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.Table#destroyItems",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroyItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroyItems"
  },
  {
    "description": "Destroys the swipeContent in the aggregation \rnamed <code>swipeContent</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroySwipeContent",
    "longname": "sap.m.Table#destroySwipeContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#destroySwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.destroySwipeContent"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachDelete",
    "longname": "sap.m.Table#detachDelete",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachDelete"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSelect",
    "longname": "sap.m.Table#detachSelect",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachSelect"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.ListBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachSwipe",
    "longname": "sap.m.Table#detachSwipe",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#detachSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.detachSwipe"
  },
  {
    "description": "Fire event delete to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the delete.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireDelete",
    "longname": "sap.m.Table#fireDelete",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireDelete",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireDelete"
  },
  {
    "description": "Fire event select to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the select.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireSelect",
    "longname": "sap.m.Table#fireSelect",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireSelect",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireSelect"
  },
  {
    "description": "Fire event swipe to attached listeners.\r</p><p>\rListeners may prevent the default action of this event using the preventDefault-method on the event object.\r* \rExpects following event parameters:\r<ul>\r<li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>\r<li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>\r<li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in within the Item.</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "whether to prevent the default action"
      }
    ],
    "access": "protected",
    "name": "fireSwipe",
    "longname": "sap.m.Table#fireSwipe",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#fireSwipe",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.fireSwipe"
  },
  {
    "description": "Getter for property <code>footerText</code>.\rFooter Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>footerText</code>"
      }
    ],
    "name": "getFooterText",
    "longname": "sap.m.Table#getFooterText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getFooterText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getFooterText"
  },
  {
    "description": "Getter for property <code>growing</code>.\rSets the growing(paging) feature of control.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growing</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowing",
    "longname": "sap.m.Table#getGrowing",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowing",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowing"
  },
  {
    "description": "Getter for property <code>growingScrollToLoad</code>.\rIf true, user can scroll end to trigger a new page request. Otherwise a trigger button is displayed at the bottom of the list.\rThis property can be used only if \"growing\" property is set \"true\" and if you only have one instance of this control inside the scroll container(e.g Page).\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>growingScrollToLoad</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingScrollToLoad",
    "longname": "sap.m.Table#getGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingScrollToLoad",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingScrollToLoad"
  },
  {
    "description": "Getter for property <code>growingThreshold</code>.\rNumber of items requested from the server. To activate this you should set \"growing\" property to \"true\".\r</p><p>\rDefault value is <code>20</code>",
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the value of property <code>growingThreshold</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingThreshold",
    "longname": "sap.m.Table#getGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingThreshold",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingThreshold"
  },
  {
    "description": "Getter for property <code>growingTriggerText</code>.\rThis text is displayed on the trigger button which is responsible to load new page at the end of the list. The default is a translated text (\"Load More Data\") coming from the message bundle.\rThis property can be used only if \"growing\" property is set \"true\" and scrollToLoad property is set \"false\".\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>growingTriggerText</code>"
      }
    ],
    "since": "1.16",
    "name": "getGrowingTriggerText",
    "longname": "sap.m.Table#getGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getGrowingTriggerText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getGrowingTriggerText"
  },
  {
    "description": "Getter for aggregation <code>headerContent</code>.<br/>\rThese items are placed at the end of the header line and can be used for user interactions(e.g. Button).",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getHeaderContent",
    "longname": "sap.m.Table#getHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderContent"
  },
  {
    "description": "Getter for property <code>headerLevel</code>.\rThe header level following the standard HTML scheme (H1 - H6)\r</p><p>\rDefault value is <code>H4</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "the value of property <code>headerLevel</code>"
      }
    ],
    "name": "getHeaderLevel",
    "longname": "sap.m.Table#getHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderLevel",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderLevel"
  },
  {
    "description": "Getter for property <code>headerText</code>.\rHeader Text\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>headerText</code>"
      }
    ],
    "name": "getHeaderText",
    "longname": "sap.m.Table#getHeaderText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getHeaderText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getHeaderText"
  },
  {
    "description": "Getter for property <code>includeItemInSelection</code>.\rThis property decides if the list item interacts with the selection. If it is \"true\", a tap on the item will set the selection control in front of the list item.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>includeItemInSelection</code>"
      }
    ],
    "name": "getIncludeItemInSelection",
    "longname": "sap.m.Table#getIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getIncludeItemInSelection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getIncludeItemInSelection"
  },
  {
    "description": "Getter for aggregation <code>infoBar</code>.<br/>\rInfoBar control is placed below the header and can be used to show extra information to the user.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        }
      }
    ],
    "name": "getInfoBar",
    "longname": "sap.m.Table#getInfoBar",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getInfoBar"
  },
  {
    "description": "Getter for property <code>inset</code>.\rInset style false/true\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>inset</code>"
      }
    ],
    "name": "getInset",
    "longname": "sap.m.Table#getInset",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getInset",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getInset"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rThe items of this list or rows of the table",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.Table#getItems",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getItems"
  },
  {
    "description": "Getter for property <code>mode</code>.\rMode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "the value of property <code>mode</code>"
      }
    ],
    "name": "getMode",
    "longname": "sap.m.Table#getMode",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getMode",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getMode"
  },
  {
    "description": "Getter for property <code>modeAnimationOn</code>.\rDefines if animations will be shown when activating or deactivating selection modes.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>modeAnimationOn</code>"
      }
    ],
    "name": "getModeAnimationOn",
    "longname": "sap.m.Table#getModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getModeAnimationOn",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getModeAnimationOn"
  },
  {
    "description": "Getter for property <code>noDataText</code>.\rThis text is displayed when the control has no data.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>noDataText</code>"
      }
    ],
    "name": "getNoDataText",
    "longname": "sap.m.Table#getNoDataText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getNoDataText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getNoDataText"
  },
  {
    "description": "Returns selected list item. When no item is selected, \"null\" is returned. When multi-selection is enabled and multiple items are selected, only the up-most selected item is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSelectedItem",
    "longname": "sap.m.Table#getSelectedItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSelectedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSelectedItem"
  },
  {
    "description": "Returns an array containing the selected list items. If no items are selected, an empty array is returned.",
    "type": {
      "names": [
        "Array.<sap.m.ListItemBase>"
      ]
    },
    "name": "getSelectedItems",
    "longname": "sap.m.Table#getSelectedItems",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSelectedItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSelectedItems"
  },
  {
    "description": "Getter for property <code>showNoData</code>.\rEnables an information text(see \"noDataText\" property) when the control has no data.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showNoData</code>"
      }
    ],
    "name": "getShowNoData",
    "longname": "sap.m.Table#getShowNoData",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowNoData",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowNoData"
  },
  {
    "description": "Getter for property <code>showSeparators</code>.\rDefines which separator style will be used.\r</p><p>\rDefault value is <code>All</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "the value of property <code>showSeparators</code>"
      }
    ],
    "name": "getShowSeparators",
    "longname": "sap.m.Table#getShowSeparators",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowSeparators",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowSeparators"
  },
  {
    "description": "Getter for property <code>showUnread</code>.\rActivates the unread feature for all items.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>showUnread</code>"
      }
    ],
    "name": "getShowUnread",
    "longname": "sap.m.Table#getShowUnread",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getShowUnread",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getShowUnread"
  },
  {
    "description": "Getter for aggregation <code>swipeContent</code>.<br/>\rUser can swipe to bring in this control on the right hand side of a list item.\rNote: This functionality gets disabled for non-touch devices.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        }
      }
    ],
    "name": "getSwipeContent",
    "longname": "sap.m.Table#getSwipeContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipeContent"
  },
  {
    "description": "Getter for property <code>swipeDirection</code>.\rDirection of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.\r</p><p>\rDefault value is <code>Both</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "the value of property <code>swipeDirection</code>"
      }
    ],
    "name": "getSwipeDirection",
    "longname": "sap.m.Table#getSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipeDirection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipeDirection"
  },
  {
    "description": "Returns swiped list item. When no item is swiped, \"null\" is returned.",
    "type": {
      "names": [
        "sap.m.ListItemBase"
      ]
    },
    "name": "getSwipedItem",
    "longname": "sap.m.Table#getSwipedItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getSwipedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getSwipedItem"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible controls are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.Table#getVisible",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rSets the width of the list.\r</p><p>\rDefault value is <code>auto</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.Table#getWidth",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#getWidth",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent whose index is looked for.",
        "name": "oHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfHeaderContent",
    "longname": "sap.m.Table#indexOfHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#indexOfHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.indexOfHeaderContent"
  },
  {
    "description": "Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.Table#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#indexOfItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.indexOfItem"
  },
  {
    "description": "Inserts a headerContent into the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to insert; if empty, nothing is inserted",
        "name": "oHeaderContent"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the headerContent should be inserted at; for \r            a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value \r            greater than the current size of the aggregation, the headerContent is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertHeaderContent",
    "longname": "sap.m.Table#insertHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#insertHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.insertHeaderContent"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.Table#insertItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#insertItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>headerContent</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllHeaderContent",
    "longname": "sap.m.Table#removeAllHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeAllHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeAllHeaderContent"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.m.ListItemBase>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.Table#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeAllItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeAllItems"
  },
  {
    "description": "Removes an headerContent from the aggregation named <code>headerContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the headerContent to remove or its index or id",
        "name": "vHeaderContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed headerContent or null"
      }
    ],
    "name": "removeHeaderContent",
    "longname": "sap.m.Table#removeHeaderContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeHeaderContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeHeaderContent"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.m.ListItemBase"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.Table#removeItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeItem"
  },
  {
    "description": "Removes all selections of the current selection mode. Applies to the modes \"SingleSelect\", \"MultiSelect\", and \"Delete\".",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "removeSelections",
    "longname": "sap.m.Table#removeSelections",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#removeSelections",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.removeSelections"
  },
  {
    "description": "Select all items in \"MultiSelection\" mode.",
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "since": "1.16",
    "name": "selectAll",
    "longname": "sap.m.Table#selectAll",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#selectAll",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.selectAll"
  },
  {
    "description": "Setter for property <code>footerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>footerText</code>",
        "name": "sFooterText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFooterText",
    "longname": "sap.m.Table#setFooterText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setFooterText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setFooterText"
  },
  {
    "description": "Setter for property <code>growing</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growing</code>",
        "name": "bGrowing"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowing",
    "longname": "sap.m.Table#setGrowing",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowing",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowing"
  },
  {
    "description": "Setter for property <code>growingScrollToLoad</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>growingScrollToLoad</code>",
        "name": "bGrowingScrollToLoad"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingScrollToLoad",
    "longname": "sap.m.Table#setGrowingScrollToLoad",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingScrollToLoad",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingScrollToLoad"
  },
  {
    "description": "Setter for property <code>growingThreshold</code>.\r</p><p>\rDefault value is <code>20</code>",
    "params": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "new value for property <code>growingThreshold</code>",
        "name": "iGrowingThreshold"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingThreshold",
    "longname": "sap.m.Table#setGrowingThreshold",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingThreshold",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingThreshold"
  },
  {
    "description": "Setter for property <code>growingTriggerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>growingTriggerText</code>",
        "name": "sGrowingTriggerText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.16",
    "name": "setGrowingTriggerText",
    "longname": "sap.m.Table#setGrowingTriggerText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setGrowingTriggerText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setGrowingTriggerText"
  },
  {
    "description": "Setter for property <code>headerLevel</code>.\r</p><p>\rDefault value is <code>H4</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.HeaderLevel"
          ]
        },
        "description": "new value for property <code>headerLevel</code>",
        "name": "oHeaderLevel"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderLevel",
    "longname": "sap.m.Table#setHeaderLevel",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setHeaderLevel",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setHeaderLevel"
  },
  {
    "description": "Setter for property <code>headerText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>headerText</code>",
        "name": "sHeaderText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setHeaderText",
    "longname": "sap.m.Table#setHeaderText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setHeaderText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setHeaderText"
  },
  {
    "description": "Setter for property <code>includeItemInSelection</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>includeItemInSelection</code>",
        "name": "bIncludeItemInSelection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setIncludeItemInSelection",
    "longname": "sap.m.Table#setIncludeItemInSelection",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setIncludeItemInSelection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setIncludeItemInSelection"
  },
  {
    "description": "Setter for the aggregated <code>infoBar</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.InfoBar"
          ]
        },
        "name": "oInfoBar"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInfoBar",
    "longname": "sap.m.Table#setInfoBar",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setInfoBar",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setInfoBar"
  },
  {
    "description": "Setter for property <code>inset</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>inset</code>",
        "name": "bInset"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setInset",
    "longname": "sap.m.Table#setInset",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setInset",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setInset"
  },
  {
    "description": "Setter for property <code>mode</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListMode"
          ]
        },
        "description": "new value for property <code>mode</code>",
        "name": "oMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setMode",
    "longname": "sap.m.Table#setMode",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setMode",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setMode"
  },
  {
    "description": "Setter for property <code>modeAnimationOn</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>modeAnimationOn</code>",
        "name": "bModeAnimationOn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setModeAnimationOn",
    "longname": "sap.m.Table#setModeAnimationOn",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setModeAnimationOn",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setModeAnimationOn"
  },
  {
    "description": "Setter for property <code>noDataText</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>noDataText</code>",
        "name": "sNoDataText"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setNoDataText",
    "longname": "sap.m.Table#setNoDataText",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setNoDataText",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setNoDataText"
  },
  {
    "description": "Sets a list item to be selected. In single mode the method removes the previous selection.",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListItemBase"
          ]
        },
        "description": "The list item to be selected.",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "setSelectedItem",
    "longname": "sap.m.Table#setSelectedItem",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSelectedItem",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSelectedItem"
  },
  {
    "description": "Sets a list item to be selected by id. In single mode the method removes the previous selection.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the list item to be selected.",
        "name": "sId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Sets selected status of the list item.",
        "name": "bSelect"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "setSelectedItemById",
    "longname": "sap.m.Table#setSelectedItemById",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSelectedItemById",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSelectedItemById"
  },
  {
    "description": "Setter for property <code>showNoData</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showNoData</code>",
        "name": "bShowNoData"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowNoData",
    "longname": "sap.m.Table#setShowNoData",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowNoData",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowNoData"
  },
  {
    "description": "Setter for property <code>showSeparators</code>.\r</p><p>\rDefault value is <code>All</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.ListSeparators"
          ]
        },
        "description": "new value for property <code>showSeparators</code>",
        "name": "oShowSeparators"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowSeparators",
    "longname": "sap.m.Table#setShowSeparators",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowSeparators",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowSeparators"
  },
  {
    "description": "Setter for property <code>showUnread</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>showUnread</code>",
        "name": "bShowUnread"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setShowUnread",
    "longname": "sap.m.Table#setShowUnread",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setShowUnread",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setShowUnread"
  },
  {
    "description": "Setter for the aggregated <code>swipeContent</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "name": "oSwipeContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeContent",
    "longname": "sap.m.Table#setSwipeContent",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSwipeContent",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSwipeContent"
  },
  {
    "description": "Setter for property <code>swipeDirection</code>.\r</p><p>\rDefault value is <code>Both</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.SwipeDirection"
          ]
        },
        "description": "new value for property <code>swipeDirection</code>",
        "name": "oSwipeDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSwipeDirection",
    "longname": "sap.m.Table#setSwipeDirection",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setSwipeDirection",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setSwipeDirection"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.Table#setVisible",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is <code>auto</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.Table#setWidth",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#setWidth",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.setWidth"
  },
  {
    "description": "After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.\rNOTE: If user try to tap inside of the list but outside of the swipeContent then control hides automatically.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.",
        "name": "oCallback"
      }
    ],
    "type": {
      "names": [
        "sap.m.ListBase"
      ]
    },
    "name": "swipeOut",
    "longname": "sap.m.Table#swipeOut",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#swipeOut",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.swipeOut"
  },
  {
    "description": "Unbinder for aggregation <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ListBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindItems",
    "longname": "sap.m.Table#unbindItems",
    "kind": "function",
    "memberof": "sap.m.Table",
    "scope": "instance",
    "inherits": "sap.m.ListBase#unbindItems",
    "inherited": true,
    "codeName": "sap.m.ListBase.prototype.unbindItems"
  },
  {
    "description": "This event gets fired when the input operation has finished and the value has changed.",
    "kind": "event",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.base.Event"
          ]
        },
        "name": "oControlEvent"
      },
      {
        "type": {
          "names": [
            "sap.ui.base.EventProvider"
          ]
        },
        "name": "oControlEvent.getSource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "oControlEvent.getParameters"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The new value of the input",
        "name": "oControlEvent.getParameters.newValue"
      }
    ],
    "name": "change",
    "longname": "sap.m.TextArea#event:change",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#event:change",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.change"
  },
  {
    "description": "Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>.\rWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified\rotherwise to this <code>sap.m.InputBase</code>.<br/> itself. \r</p><p>\rThis event gets fired when the input operation has finished and the value has changed.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An application specific payload object, that will be passed to the event handler along with the event object when firing the event.",
        "name": "oData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "attachChange",
    "longname": "sap.m.TextArea#attachChange",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#attachChange",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.attachChange"
  },
  {
    "description": "Binder for property <code>value</code>.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to a property in the model",
        "name": "sPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "null",
        "description": "the formatter function",
        "name": "fnFormatter"
      },
      {
        "type": {
          "names": [
            "sap.ui.model.BindingMode"
          ]
        },
        "optional": true,
        "defaultvalue": "Default",
        "description": "the binding mode to be used for this property binding (e.g. one way)",
        "name": "sMode"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "bindValue",
    "longname": "sap.m.TextArea#bindValue",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#bindValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.bindValue"
  },
  {
    "description": "Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>\r</p><p>\rThe passed function and listener object must match the ones used for event registration.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to call, when the event occurs.",
        "name": "fnFunction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Context object on which the given function had to be called.",
        "name": "oListener"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "detachChange",
    "longname": "sap.m.TextArea#detachChange",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#detachChange",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.detachChange"
  },
  {
    "description": "Fire event change to attached listeners.\r</p><p>\rExpects following event parameters:\r<ul>\r<li>'newValue' of type <code>string</code> The new value of the input</li>\r</ul>",
    "params": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "optional": true,
        "description": "the arguments to pass along with the event.",
        "name": "mArguments"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "access": "protected",
    "name": "fireChange",
    "longname": "sap.m.TextArea#fireChange",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#fireChange",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.fireChange"
  },
  {
    "description": "Getter for property <code>editable</code>.\rControls if a user can change the value.\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>editable</code>"
      }
    ],
    "since": "1.12.0",
    "name": "getEditable",
    "longname": "sap.m.TextArea#getEditable",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getEditable",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getEditable"
  },
  {
    "description": "Getter for property <code>enabled</code>.\rBoolean property to enable the control (default is true).\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>enabled</code>"
      }
    ],
    "name": "getEnabled",
    "longname": "sap.m.TextArea#getEnabled",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getEnabled",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getEnabled"
  },
  {
    "description": "Getter for property <code>name</code>.\rThe 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>name</code>"
      }
    ],
    "name": "getName",
    "longname": "sap.m.TextArea#getName",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getName",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getName"
  },
  {
    "description": "Getter for property <code>placeholder</code>.\rtext shown when no value available\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>placeholder</code>"
      }
    ],
    "name": "getPlaceholder",
    "longname": "sap.m.TextArea#getPlaceholder",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getPlaceholder",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getPlaceholder"
  },
  {
    "description": "Getter for property <code>value</code>.\rInput Value\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value of property <code>value</code>"
      }
    ],
    "name": "getValue",
    "longname": "sap.m.TextArea#getValue",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getValue"
  },
  {
    "description": "Getter for property <code>valueState</code>.\rVisualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.\r</p><p>\rDefault value is <code>None</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "the value of property <code>valueState</code>"
      }
    ],
    "name": "getValueState",
    "longname": "sap.m.TextArea#getValueState",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getValueState",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getValueState"
  },
  {
    "description": "Getter for property <code>visible</code>.\rInvisible inputs are not rendered\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.TextArea#getVisible",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getVisible",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rDefines the width of the input.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "name": "getWidth",
    "longname": "sap.m.TextArea#getWidth",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#getWidth",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.getWidth"
  },
  {
    "description": "Setter for property <code>editable</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>editable</code>",
        "name": "bEditable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.12.0",
    "name": "setEditable",
    "longname": "sap.m.TextArea#setEditable",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setEditable",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setEditable"
  },
  {
    "description": "Setter for property <code>enabled</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>enabled</code>",
        "name": "bEnabled"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setEnabled",
    "longname": "sap.m.TextArea#setEnabled",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setEnabled",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setEnabled"
  },
  {
    "description": "Setter for property <code>name</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>name</code>",
        "name": "sName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setName",
    "longname": "sap.m.TextArea#setName",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setName",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setName"
  },
  {
    "description": "Setter for property <code>placeholder</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>placeholder</code>",
        "name": "sPlaceholder"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setPlaceholder",
    "longname": "sap.m.TextArea#setPlaceholder",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setPlaceholder",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setPlaceholder"
  },
  {
    "description": "Setter for property <code>value</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "new value for property <code>value</code>",
        "name": "sValue"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValue",
    "longname": "sap.m.TextArea#setValue",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setValue"
  },
  {
    "description": "Setter for property <code>valueState</code>.\r</p><p>\rDefault value is <code>None</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.ValueState"
          ]
        },
        "description": "new value for property <code>valueState</code>",
        "name": "oValueState"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setValueState",
    "longname": "sap.m.TextArea#setValueState",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setValueState",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setValueState"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.TextArea#setVisible",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setVisible",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setWidth",
    "longname": "sap.m.TextArea#setWidth",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#setWidth",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.setWidth"
  },
  {
    "description": "Unbinder for property <code>value</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.InputBase"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "unbindValue",
    "longname": "sap.m.TextArea#unbindValue",
    "kind": "function",
    "memberof": "sap.m.TextArea",
    "scope": "instance",
    "inherits": "sap.m.InputBase#unbindValue",
    "inherited": true,
    "codeName": "sap.m.InputBase.prototype.unbindValue"
  },
  {
    "description": "Adds some item <code>oItem</code> \rto the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to add; if empty, nothing is inserted",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "addItem",
    "longname": "sap.m.VBox#addItem",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#addItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.addItem"
  },
  {
    "description": "Destroys all the items in the aggregation \rnamed <code>items</code>.",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "destroyItems",
    "longname": "sap.m.VBox#destroyItems",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#destroyItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.destroyItems"
  },
  {
    "description": "Getter for property <code>alignItems</code>.\rDetermines the layout behavior of items along the cross-axis. \"Baseline\" is not supported in Internet Explorer <10.\r</p><p>\rDefault value is <code>Stretch</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignItems"
          ]
        },
        "description": "the value of property <code>alignItems</code>"
      }
    ],
    "name": "getAlignItems",
    "longname": "sap.m.VBox#getAlignItems",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getAlignItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getAlignItems"
  },
  {
    "description": "Getter for property <code>direction</code>.\rDetermines the direction of the layout of child elements\r</p><p>\rDefault value is <code>Row</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexDirection"
          ]
        },
        "description": "the value of property <code>direction</code>"
      }
    ],
    "name": "getDirection",
    "longname": "sap.m.VBox#getDirection",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getDirection",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getDirection"
  },
  {
    "description": "Getter for property <code>displayInline</code>.\rDetermines whether the flexbox is in block or inline mode\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>displayInline</code>"
      }
    ],
    "name": "getDisplayInline",
    "longname": "sap.m.VBox#getDisplayInline",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getDisplayInline",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getDisplayInline"
  },
  {
    "description": "Getter for property <code>fitContainer</code>.\rDetermines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>fitContainer</code>"
      }
    ],
    "name": "getFitContainer",
    "longname": "sap.m.VBox#getFitContainer",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getFitContainer",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getFitContainer"
  },
  {
    "description": "Getter for property <code>height</code>.\rThe height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>height</code>"
      }
    ],
    "since": "1.9.1",
    "name": "getHeight",
    "longname": "sap.m.VBox#getHeight",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getHeight",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getHeight"
  },
  {
    "description": "Getter for aggregation <code>items</code>.<br/>\rFlex items within the FlexBox layout",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        }
      }
    ],
    "name": "getItems",
    "longname": "sap.m.VBox#getItems",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getItems"
  },
  {
    "description": "Getter for property <code>justifyContent</code>.\rDetermines the layout behavior along the main axis. \"SpaceAround\" is currently not supported in most non-Webkit browsers.\r</p><p>\rDefault value is <code>Start</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexJustifyContent"
          ]
        },
        "description": "the value of property <code>justifyContent</code>"
      }
    ],
    "name": "getJustifyContent",
    "longname": "sap.m.VBox#getJustifyContent",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getJustifyContent",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getJustifyContent"
  },
  {
    "description": "Getter for property <code>renderType</code>.\rDetermines whether the layout is rendered as a series of divs or as an unordered list (ul)\r</p><p>\rDefault value is <code>Div</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexRendertype"
          ]
        },
        "description": "the value of property <code>renderType</code>"
      }
    ],
    "name": "getRenderType",
    "longname": "sap.m.VBox#getRenderType",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getRenderType",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getRenderType"
  },
  {
    "description": "Getter for property <code>visible</code>.\rIs the control visible\r</p><p>\rDefault value is <code>true</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>visible</code>"
      }
    ],
    "name": "getVisible",
    "longname": "sap.m.VBox#getVisible",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getVisible",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getVisible"
  },
  {
    "description": "Getter for property <code>width</code>.\rThe width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "the value of property <code>width</code>"
      }
    ],
    "since": "1.9.1",
    "name": "getWidth",
    "longname": "sap.m.VBox#getWidth",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#getWidth",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.getWidth"
  },
  {
    "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> \rand returns its index if found or -1 otherwise.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item whose index is looked for.",
        "name": "oItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the index of the provided control in the aggregation if found, or -1 otherwise"
      }
    ],
    "name": "indexOfItem",
    "longname": "sap.m.VBox#indexOfItem",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#indexOfItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.indexOfItem"
  },
  {
    "description": "Inserts a item into the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to insert; if empty, nothing is inserted",
        "name": "oItem"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "description": "the <code>0</code>-based index the item should be inserted at; for \r            a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value \r            greater than the current size of the aggregation, the item is inserted at \r            the last position",
        "name": "iIndex"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "insertItem",
    "longname": "sap.m.VBox#insertItem",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#insertItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.insertItem"
  },
  {
    "description": "Removes all the controls in the aggregation named <code>items</code>.<br/>\rAdditionally unregisters them from the hosting UIArea.",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<sap.ui.core.Control>"
          ]
        },
        "description": "an array of the removed elements (might be empty)"
      }
    ],
    "name": "removeAllItems",
    "longname": "sap.m.VBox#removeAllItems",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#removeAllItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.removeAllItems"
  },
  {
    "description": "Removes an item from the aggregation named <code>items</code>.",
    "params": [
      {
        "type": {
          "names": [
            "int",
            "string",
            "sap.ui.core.Control"
          ]
        },
        "description": "the item to remove or its index or id",
        "name": "vItem"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.ui.core.Control"
          ]
        },
        "description": "the removed item or null"
      }
    ],
    "name": "removeItem",
    "longname": "sap.m.VBox#removeItem",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#removeItem",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.removeItem"
  },
  {
    "description": "Setter for property <code>alignItems</code>.\r</p><p>\rDefault value is <code>Stretch</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexAlignItems"
          ]
        },
        "description": "new value for property <code>alignItems</code>",
        "name": "oAlignItems"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setAlignItems",
    "longname": "sap.m.VBox#setAlignItems",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setAlignItems",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setAlignItems"
  },
  {
    "description": "Setter for property <code>direction</code>.\r</p><p>\rDefault value is <code>Row</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexDirection"
          ]
        },
        "description": "new value for property <code>direction</code>",
        "name": "oDirection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDirection",
    "longname": "sap.m.VBox#setDirection",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setDirection",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setDirection"
  },
  {
    "description": "Setter for property <code>displayInline</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>displayInline</code>",
        "name": "bDisplayInline"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setDisplayInline",
    "longname": "sap.m.VBox#setDisplayInline",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setDisplayInline",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setDisplayInline"
  },
  {
    "description": "Setter for property <code>fitContainer</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>fitContainer</code>",
        "name": "bFitContainer"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setFitContainer",
    "longname": "sap.m.VBox#setFitContainer",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setFitContainer",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setFitContainer"
  },
  {
    "description": "Setter for property <code>height</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>height</code>",
        "name": "sHeight"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "setHeight",
    "longname": "sap.m.VBox#setHeight",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setHeight",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setHeight"
  },
  {
    "description": "Setter for property <code>justifyContent</code>.\r</p><p>\rDefault value is <code>Start</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexJustifyContent"
          ]
        },
        "description": "new value for property <code>justifyContent</code>",
        "name": "oJustifyContent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setJustifyContent",
    "longname": "sap.m.VBox#setJustifyContent",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setJustifyContent",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setJustifyContent"
  },
  {
    "description": "Setter for property <code>renderType</code>.\r</p><p>\rDefault value is <code>Div</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.m.FlexRendertype"
          ]
        },
        "description": "new value for property <code>renderType</code>",
        "name": "oRenderType"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setRenderType",
    "longname": "sap.m.VBox#setRenderType",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setRenderType",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setRenderType"
  },
  {
    "description": "Setter for property <code>visible</code>.\r</p><p>\rDefault value is <code>true</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>visible</code>",
        "name": "bVisible"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setVisible",
    "longname": "sap.m.VBox#setVisible",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setVisible",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setVisible"
  },
  {
    "description": "Setter for property <code>width</code>.\r</p><p>\rDefault value is empty/<code>undefined</code>",
    "params": [
      {
        "type": {
          "names": [
            "sap.ui.core.CSSSize"
          ]
        },
        "description": "new value for property <code>width</code>",
        "name": "sWidth"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.FlexBox"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "since": "1.9.1",
    "name": "setWidth",
    "longname": "sap.m.VBox#setWidth",
    "kind": "function",
    "memberof": "sap.m.VBox",
    "scope": "instance",
    "inherits": "sap.m.FlexBox#setWidth",
    "inherited": true,
    "codeName": "sap.m.FlexBox.prototype.setWidth"
  },
  {
    "description": "Getter for property <code>selected</code>.\rSelected state of the item. If set to \"true\", the item will be displayed as selected in the view settings dialog.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ViewSettingsCustomItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsCustomItem",
    "scope": "instance",
    "inherits": "sap.m.ViewSettingsItem#getSelected",
    "inherited": true,
    "codeName": "sap.m.ViewSettingsItem.prototype.getSelected"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ViewSettingsCustomItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsCustomItem",
    "scope": "instance",
    "inherits": "sap.m.ViewSettingsItem#setSelected",
    "inherited": true,
    "codeName": "sap.m.ViewSettingsItem.prototype.setSelected"
  },
  {
    "description": "Getter for property <code>selected</code>.\rSelected state of the item. If set to \"true\", the item will be displayed as selected in the view settings dialog.\r</p><p>\rDefault value is <code>false</code>",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "the value of property <code>selected</code>"
      }
    ],
    "name": "getSelected",
    "longname": "sap.m.ViewSettingsFilterItem#getSelected",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "inherits": "sap.m.ViewSettingsItem#getSelected",
    "inherited": true,
    "codeName": "sap.m.ViewSettingsItem.prototype.getSelected"
  },
  {
    "description": "Setter for property <code>selected</code>.\r</p><p>\rDefault value is <code>false</code>",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "new value for property <code>selected</code>",
        "name": "bSelected"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "sap.m.ViewSettingsItem"
          ]
        },
        "description": "<code>this</code> to allow method chaining"
      }
    ],
    "name": "setSelected",
    "longname": "sap.m.ViewSettingsFilterItem#setSelected",
    "kind": "function",
    "memberof": "sap.m.ViewSettingsFilterItem",
    "scope": "instance",
    "inherits": "sap.m.ViewSettingsItem#setSelected",
    "inherited": true,
    "codeName": "sap.m.ViewSettingsItem.prototype.setSelected"
  }
]